<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akilarの糖果屋</title>
  
  <subtitle>Akilar.top</subtitle>
  <link href="https://akilar.top/atom.xml" rel="self"/>
  
  <link href="https://akilar.top/"/>
  <updated>2020-10-24T13:59:30.379Z</updated>
  <id>https://akilar.top/</id>
  
  <author>
    <name>Akilar</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Butterfly主题的侧边栏botui聊天机器人</title>
    <link href="https://akilar.top/posts/9dc1acf8/"/>
    <id>https://akilar.top/posts/9dc1acf8/</id>
    <published>2020-10-22T11:04:08.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="botui-js"><a href="#botui-js" class="headerlink" title="botui.js"></a>botui.js</h1><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/botui/botui"><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://github-readme-stats.vercel.app/api/pin/?username=botui&repo=botui&theme=calm&show_owner=true"/></a><p>botui.js是一个简单的聊天机器人框架，使用它可以完成简易的脚本对话式交流。缺点是只能在自己设定的逻辑内进行有限问答，而不是像真正的AI那样智能会话。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/24/vHQIx9jnb4PgzZu.png" alt=""></p><h1 id="我的项目代码"><a href="#我的项目代码" class="headerlink" title="我的项目代码"></a>我的项目代码</h1><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Akilarlxh/butterfly_botui"><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&repo=butterfly_botui&theme=calm&show_owner=true"/></a><p>教程中提到的<code>pug、css、js</code>都在这里，担心复制格式出错的可以直接下载项目内的资源。</p><h1 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h1><ol><li><p>在<code>~\[blogroot]\themes\butterfly\layout\includes\widget\</code>目录下新建<code>card_botui.pug</code>，注意对齐格式。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.card-widget.card-botui</span><br><span class="line">  .card-content(style=&#x27;height:320px;&#x27;)</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fas.fa-comments</span><br><span class="line">      span= _p(&#x27;aside.card_botui&#x27;)</span><br><span class="line">    #hello-akilar.botui-app-container(style=&#x27;width:100%;padding:0.5px&#x27;)</span><br><span class="line">      bot-ui</span><br></pre></td></tr></table></figure></li><li><p>修改<code>~\[blogroot]\themes\butterfly\layout\includes\widget\index.pug</code>，注意对齐格式。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    #aside_content.aside_content</span><br><span class="line">      if theme.aside.card_author.enable</span><br><span class="line">        include ./card_author.pug</span><br><span class="line">      .sticky_layout</span><br><span class="line"><span class="addition">+       if theme.aside.card_botui.enable</span></span><br><span class="line"><span class="addition">+         include ./card_botui.pug</span></span><br><span class="line">        if theme.aside.card_announcement.enable</span><br><span class="line">          include ./card_announcement.pug</span><br><span class="line">        if theme.aside.card_recent_post.enable</span><br><span class="line">          include ./card_recent_post.pug</span><br><span class="line">        if theme.newest_comments.enable</span><br><span class="line">          include ./card_newest_comment.pug</span><br><span class="line">        if theme.ad &amp;&amp; theme.ad.aside</span><br></pre></td></tr></table></figure></li><li><p>在<code>~\[blogroot]\themes\butterfly\source\css\</code>目录下新建<code>card_botui.css</code>,</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https:</span>//fonts.googleapis.com/css?family=Open+Sans);</span><br><span class="line"><span class="selector-class">.botui-container</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;Open Sans&quot;</span>,sans-serif</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-messages-container</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-container</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message</span>&#123;</span><br><span class="line">  <span class="attribute">min-height</span>:<span class="number">30px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message-content</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">7px</span> <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#595a5a</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#ebebeb</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message-content</span><span class="selector-class">.human</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#f7f8f8</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#919292</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message-content</span><span class="selector-class">.text</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1.3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message-content</span><span class="selector-class">.loading</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">206</span>,<span class="number">206</span>,<span class="number">206</span>,.<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1.3</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message-content</span><span class="selector-class">.embed</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">5px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-message-content-link</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#919292</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-text-input</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;Open Sans&quot;</span>,sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>:transparent;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#595a5a</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#919292</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-text-submit</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#919292</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#777979</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-buttons-button</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">cursor</span>:pointer;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">500</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">7px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;Open Sans&quot;</span>,sans-serif;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#777979</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">2px</span> <span class="number">3px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">25</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-text-select</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;Open Sans&quot;</span>,sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>:transparent;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#595a5a</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#919292</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-text-searchselect</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;Open Sans&quot;</span>,sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>:transparent;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#595a5a</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#919292</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-text-searchselect</span> <span class="selector-class">.dropdown-toggle</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:none<span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.botui-actions-text-searchselect</span> <span class="selector-class">.selected-tag</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:transparent<span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span><span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-enter-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>:all .<span class="number">3s</span> ease</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-enter</span>,<span class="selector-class">.slide-fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">10px</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:.<span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">height</span>:.<span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:.<span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#919292</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span><span class="selector-pseudo">:nth-last-child(1)</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:.<span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">animation</span>:loading .<span class="number">6s</span> .<span class="number">3s</span> linear infinite</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span><span class="selector-pseudo">:nth-last-child(2)</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:.<span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">animation</span>:loading .<span class="number">6s</span> .<span class="number">2s</span> linear infinite</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span><span class="selector-pseudo">:nth-last-child(3)</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>:loading .<span class="number">6s</span> .<span class="number">1s</span> linear infinite</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> loading&#123;</span><br><span class="line">  0%&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#ababab</span></span><br><span class="line">    &#125;</span><br><span class="line">  25%&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>,-<span class="number">3px</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  50%&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#ababab</span></span><br><span class="line">    &#125;</span><br><span class="line">  75%&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">3px</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  100%&#123;<span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * botui 0.3.9</span></span><br><span class="line"><span class="comment"> * A JS library to build the UI for your bot</span></span><br><span class="line"><span class="comment"> * https://botui.org</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2019, Moin Uddin</span></span><br><span class="line"><span class="comment"> * Released under the MIT license.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.botui-message-content-link</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: thin dotted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.botui-message-content-link</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">:active</span>, <span class="selector-tag">a</span><span class="selector-class">.botui-message-content-link</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span><span class="selector-class">.botui-actions-text</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.botui-actions-buttons-button</span>, <span class="selector-tag">input</span><span class="selector-class">.botui-actions-text-input</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: normal;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.botui-actions-buttons-button</span><span class="selector-pseudo">::-moz-focus-inner</span>, <span class="selector-tag">input</span><span class="selector-class">.botui-actions-text-input</span><span class="selector-pseudo">::-moz-focus-inner</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.botui-actions-buttons-button</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-app-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">10px</span></span><br><span class="line">  min-height: <span class="number">20px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message-content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message-content</span><span class="selector-class">.human</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message-content</span> <span class="selector-tag">iframe</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message-content-image</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">200px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.botui-message-content-link</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profil</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profil</span><span class="selector-class">.human</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profil</span><span class="selector-class">.agent</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profil</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">26px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">26px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e8e8e8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profil</span>&gt;<span class="selector-tag">img</span><span class="selector-class">.agent</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">url</span>(http://decodemoji.com/img/logos/blue_moji_hat.svg);</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.botui-actions-buttons-button</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.botui-actions-buttons-button</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span>&#123;</span><br><span class="line">  <span class="attribute">margin-right</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span><span class="number">400px</span>)&#123;</span><br><span class="line">  <span class="selector-class">.botui-actions-text-submit</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:none</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*侧边栏滚动条隐藏*/</span></span><br><span class="line"><span class="selector-class">.botui</span><span class="selector-class">.botui-container</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>~\[blogroot]\themes\butterfly\source\js\</code>目录下新建<code>botui.js</code>和<code>botui_init.js</code>,</p><ul><li><p>botui.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * botui 0.3.9</span></span><br><span class="line"><span class="comment"> * A JS library to build the UI for your bot</span></span><br><span class="line"><span class="comment"> * https://botui.org</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2019, Moin Uddin</span></span><br><span class="line"><span class="comment"> * Released under the MIT license.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (root.BotUI = factory(root));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    root.BotUI = factory(root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span> ? <span class="built_in">window</span> : <span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">root, undefined</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> BotUI = (<span class="function"><span class="keyword">function</span> (<span class="params">id, opts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    opts = opts || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!id) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;BotUI: Container id is required as first argument.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById(id)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;BotUI: Element with id #&#x27;</span> + id + <span class="string">&#x27; does not exist.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!root.Vue &amp;&amp; !opts.vue) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;BotUI: Vue is required but not found.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _botApp, <span class="comment">// current vue instance.</span></span><br><span class="line">    _options = &#123;</span><br><span class="line">      debug: <span class="literal">false</span>,</span><br><span class="line">      fontawesome: <span class="literal">true</span>,</span><br><span class="line">      searchselect: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    _container, <span class="comment">// the outermost Element. Needed to scroll to bottom, for now.</span></span><br><span class="line">    _interface = &#123;&#125;, <span class="comment">// methods returned by a BotUI() instance.</span></span><br><span class="line">    _actionResolve,</span><br><span class="line">    _markDownRegex = &#123;</span><br><span class="line">      icon: <span class="regexp">/!\(([^\)]+)\)/igm</span>, <span class="comment">// !(icon)</span></span><br><span class="line">      image: <span class="regexp">/!\[(.*?)\]\((.*?)\)/igm</span>, <span class="comment">// ![aleternate text](src)</span></span><br><span class="line">      link: <span class="regexp">/\[([^\[]+)\]\(([^\)]+)\)(\^?)/igm</span> <span class="comment">// [text](link) ^ can be added at end to set the target as &#x27;blank&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    _fontAwesome = <span class="string">&#x27;https://use.fontawesome.com/ea731dcb6f.js&#x27;</span>,</span><br><span class="line">    _esPromisePollyfill = <span class="string">&#x27;https://cdn.jsdelivr.net/es6-promise/4.1.0/es6-promise.min.js&#x27;</span>, <span class="comment">// mostly for IE</span></span><br><span class="line">    _searchselect =  <span class="string">&quot;https://unpkg.com/vue-select@2.4.0/dist/vue-select.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">    root.Vue = root.Vue || opts.vue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge opts passed to constructor with _options</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> _options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (opts.hasOwnProperty(prop)) &#123;</span><br><span class="line">        _options[prop] = opts[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!root.Promise &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> === <span class="string">&quot;undefined&quot;</span> &amp;&amp; !opts.promise) &#123;</span><br><span class="line">      loadScript(_esPromisePollyfill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_linkReplacer</span>(<span class="params">match, $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _target = $<span class="number">3</span> ? <span class="string">&#x27;blank&#x27;</span> : <span class="string">&#x27;&#x27;</span>; <span class="comment">// check if &#x27;^&#x27; sign is present with link syntax</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;a class=&#x27;botui-message-content-link&#x27; target=&#x27;&quot;</span> + _target + <span class="string">&quot;&#x27; href=&#x27;&quot;</span> + $<span class="number">2</span> +<span class="string">&quot;&#x27;&gt;&quot;</span> + $<span class="number">1</span> + <span class="string">&quot;&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_parseMarkDown</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> text</span><br><span class="line">                 .replace(_markDownRegex.image, <span class="string">&quot;&lt;img class=&#x27;botui-message-content-image&#x27; src=&#x27;$2&#x27; alt=&#x27;$1&#x27; /&gt;&quot;</span>)</span><br><span class="line">                 .replace(_markDownRegex.icon, <span class="string">&quot;&lt;i class=&#x27;botui-icon botui-message-content-icon fa fa-$1&#x27;&gt;&lt;/i&gt;&quot;</span>)</span><br><span class="line">                 .replace(_markDownRegex.link, _linkReplacer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">src, cb</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">          script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">          script.src = src;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(cb) &#123;</span><br><span class="line">            script.onload = cb;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_handleAction</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(_instance.action.addMessage) &#123;</span><br><span class="line">        _interface.message.human(&#123;</span><br><span class="line">          delay: <span class="number">100</span>,</span><br><span class="line">          content: text</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      _instance.action.show = !_instance.action.autoHide;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _botuiComponent = &#123;</span><br><span class="line">      template: <span class="string">&#x27;&lt;div class=\&quot;botui botui-container\&quot; v-botui-container&gt;&lt;div class=\&quot;botui-messages-container\&quot;&gt;&lt;div v-for=\&quot;msg in messages\&quot; class=\&quot;botui-message\&quot; :class=\&quot;msg.cssClass\&quot; v-botui-scroll&gt;&lt;transition name=\&quot;slide-fade\&quot;&gt;&lt;div v-if=\&quot;msg.visible\&quot;&gt;&lt;div v-if=\&quot;msg.photo &amp;&amp; !msg.loading\&quot; :class=\&quot;[\&#x27;profil\&#x27;, \&#x27;profile\&#x27;, &#123;human: msg.human, \&#x27;agent\&#x27;: !msg.human&#125;]\&quot;&gt; &lt;img :src=\&quot;msg.photo\&quot; :class=\&quot;[&#123;human: msg.human, \&#x27;agent\&#x27;: !msg.human&#125;]\&quot;&gt;&lt;/div&gt;&lt;div :class=\&quot;[&#123;human: msg.human, \&#x27;botui-message-content\&#x27;: true&#125;, msg.type]\&quot;&gt;&lt;span v-if=\&quot;msg.type == \&#x27;text\&#x27;\&quot; v-text=\&quot;msg.content\&quot; v-botui-markdown&gt;&lt;/span&gt;&lt;span v-if=\&quot;msg.type == \&#x27;html\&#x27;\&quot; v-html=\&quot;msg.content\&quot;&gt;&lt;/span&gt; &lt;iframe v-if=\&quot;msg.type == \&#x27;embed\&#x27;\&quot; :src=\&quot;msg.content\&quot; frameborder=\&quot;0\&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/transition&gt;&lt;div v-if=\&quot;msg.photo &amp;&amp; msg.loading &amp;&amp; !msg.human\&quot; :class=\&quot;[\&#x27;profil\&#x27;, \&#x27;profile\&#x27;, &#123;human: msg.human, \&#x27;agent\&#x27;: !msg.human&#125;]\&quot;&gt; &lt;img :src=\&quot;msg.photo\&quot; :class=\&quot;[&#123;human: msg.human, \&#x27;agent\&#x27;: !msg.human&#125;]\&quot;&gt;&lt;/div&gt;&lt;div v-if=\&quot;msg.loading\&quot; class=\&quot;botui-message-content loading\&quot;&gt;&lt;i class=\&quot;dot\&quot;&gt;&lt;/i&gt;&lt;i class=\&quot;dot\&quot;&gt;&lt;/i&gt;&lt;i class=\&quot;dot\&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;botui-actions-container\&quot;&gt;&lt;transition name=\&quot;slide-fade\&quot;&gt;&lt;div v-if=\&quot;action.show\&quot; v-botui-scroll&gt;&lt;form v-if=\&quot;action.type == \&#x27;text\&#x27;\&quot; class=\&quot;botui-actions-text\&quot; @submit.prevent=\&quot;handle_action_text()\&quot; :class=\&quot;action.cssClass\&quot;&gt;&lt;i v-if=\&quot;action.text.icon\&quot; class=\&quot;botui-icon botui-action-text-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + action.text.icon\&quot;&gt;&lt;/i&gt; &lt;input type=\&quot;text\&quot; ref=\&quot;input\&quot; :type=\&quot;action.text.sub_type\&quot; v-model=\&quot;action.text.value\&quot; class=\&quot;botui-actions-text-input\&quot; :placeholder=\&quot;action.text.placeholder\&quot; :size=\&quot;action.text.size\&quot; :value=\&quot; action.text.value\&quot; :class=\&quot;action.text.cssClass\&quot; required v-focus/&gt; &lt;button type=\&quot;submit\&quot; :class=\&quot;&#123;\&#x27;botui-actions-buttons-button\&#x27;: !!action.text.button, \&#x27;botui-actions-text-submit\&#x27;: !action.text.button&#125;\&quot;&gt;&lt;i v-if=\&quot;action.text.button &amp;&amp; action.text.button.icon\&quot; class=\&quot;botui-icon botui-action-button-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + action.text.button.icon\&quot;&gt;&lt;/i&gt; &lt;span&gt;&#123;&#123;(action.text.button &amp;&amp; action.text.button.label) || \&#x27;Go\&#x27;&#125;&#125;&lt;/span&gt;&lt;/button&gt;&lt;/form&gt;&lt;form v-if=\&quot;action.type == \&#x27;select\&#x27;\&quot; class=\&quot;botui-actions-select\&quot; @submit.prevent=\&quot;handle_action_select()\&quot; :class=\&quot;action.cssClass\&quot;&gt;&lt;i v-if=\&quot;action.select.icon\&quot; class=\&quot;botui-icon botui-action-select-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + action.select.icon\&quot;&gt;&lt;/i&gt;&lt;v-select v-if=\&quot;action.select.searchselect &amp;&amp; !action.select.multipleselect\&quot; v-model=\&quot;action.select.value\&quot; :value=\&quot;action.select.value\&quot; :placeholder=\&quot;action.select.placeholder\&quot; class=\&quot;botui-actions-text-searchselect\&quot; :label=\&quot;action.select.label\&quot; :options=\&quot;action.select.options\&quot;&gt;&lt;/v-select&gt;&lt;v-select v-else-if=\&quot;action.select.searchselect &amp;&amp; action.select.multipleselect\&quot; multiple v-model=\&quot;action.select.value\&quot; :value=\&quot;action.select.value\&quot; :placeholder=\&quot;action.select.placeholder\&quot; class=\&quot;botui-actions-text-searchselect\&quot; :label=\&quot;action.select.label\&quot; :options=\&quot;action.select.options\&quot;&gt;&lt;/v-select&gt; &lt;select v-else v-model=\&quot;action.select.value\&quot; class=\&quot;botui-actions-text-select\&quot; :placeholder=\&quot;action.select.placeholder\&quot; :size=\&quot;action.select.size\&quot; :class=\&quot;action.select.cssClass\&quot; required v-focus&gt;&lt;option v-for=\&quot;option in action.select.options\&quot; :class=\&quot;action.select.optionClass\&quot; v-bind:value=\&quot;option.value\&quot; :disabled=\&quot;(option.value == \&#x27;\&#x27;)?true:false\&quot; :selected=\&quot;(action.select.value == option.value)?\&#x27;selected\&#x27;:\&#x27;\&#x27;\&quot;&gt; &#123;&#123; option.text &#125;&#125;&lt;/option&gt;&lt;/select&gt; &lt;button type=\&quot;submit\&quot; :class=\&quot;&#123;\&#x27;botui-actions-buttons-button\&#x27;: !!action.select.button, \&#x27;botui-actions-select-submit\&#x27;: !action.select.button&#125;\&quot;&gt;&lt;i v-if=\&quot;action.select.button &amp;&amp; action.select.button.icon\&quot; class=\&quot;botui-icon botui-action-button-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + action.select.button.icon\&quot;&gt;&lt;/i&gt; &lt;span&gt;&#123;&#123;(action.select.button &amp;&amp; action.select.button.label) || \&#x27;Ok\&#x27;&#125;&#125;&lt;/span&gt;&lt;/button&gt;&lt;/form&gt;&lt;div v-if=\&quot;action.type == \&#x27;button\&#x27;\&quot; class=\&quot;botui-actions-buttons\&quot; :class=\&quot;action.cssClass\&quot;&gt; &lt;button type=\&quot;button\&quot; :class=\&quot;button.cssClass\&quot; class=\&quot;botui-actions-buttons-button\&quot; v-botui-scroll v-for=\&quot;button in action.button.buttons\&quot; @click=\&quot;handle_action_button(button)\&quot;&gt;&lt;i v-if=\&quot;button.icon\&quot; class=\&quot;botui-icon botui-action-button-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + button.icon\&quot;&gt;&lt;/i&gt; &#123;&#123;button.text&#125;&#125;&lt;/button&gt;&lt;/div&gt;&lt;form v-if=\&quot;action.type == \&#x27;buttontext\&#x27;\&quot; class=\&quot;botui-actions-text\&quot; @submit.prevent=\&quot;handle_action_text()\&quot; :class=\&quot;action.cssClass\&quot;&gt;&lt;i v-if=\&quot;action.text.icon\&quot; class=\&quot;botui-icon botui-action-text-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + action.text.icon\&quot;&gt;&lt;/i&gt; &lt;input type=\&quot;text\&quot; ref=\&quot;input\&quot; :type=\&quot;action.text.sub_type\&quot; v-model=\&quot;action.text.value\&quot; class=\&quot;botui-actions-text-input\&quot; :placeholder=\&quot;action.text.placeholder\&quot; :size=\&quot;action.text.size\&quot; :value=\&quot;action.text.value\&quot; :class=\&quot;action.text.cssClass\&quot; required v-focus/&gt; &lt;button type=\&quot;submit\&quot; :class=\&quot;&#123;\&#x27;botui-actions-buttons-button\&#x27;: !!action.text.button, \&#x27;botui-actions-text-submit\&#x27;: !action.text.button&#125;\&quot;&gt;&lt;i v-if=\&quot;action.text.button &amp;&amp; action.text.button.icon\&quot; class=\&quot;botui-icon botui-action-button-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + action.text.button.icon\&quot;&gt;&lt;/i&gt; &lt;span&gt;&#123;&#123;(action.text.button &amp;&amp; action.text.button.label) || \&#x27;Go\&#x27;&#125;&#125;&lt;/span&gt;&lt;/button&gt;&lt;div class=\&quot;botui-actions-buttons\&quot; :class=\&quot;action.cssClass\&quot;&gt; &lt;button type=\&quot;button\&quot; :class=\&quot;button.cssClass\&quot; class=\&quot;botui-actions-buttons-button\&quot; v-for=\&quot;button in action.button.buttons\&quot; @click=\&quot;handle_action_button(button)\&quot; autofocus&gt;&lt;i v-if=\&quot;button.icon\&quot; class=\&quot;botui-icon botui-action-button-icon fa\&quot; :class=\&quot;\&#x27;fa-\&#x27; + button.icon\&quot;&gt;&lt;/i&gt; &#123;&#123;button.text&#125;&#125;&lt;/button&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/transition&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>, <span class="comment">// replaced by HTML template during build. see Gulpfile.js</span></span><br><span class="line">      data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          action: &#123;</span><br><span class="line">            text: &#123;</span><br><span class="line">              size: <span class="number">30</span>,</span><br><span class="line">              placeholder: <span class="string">&#x27;Write here ..&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            button: &#123;&#125;,</span><br><span class="line">            show: <span class="literal">false</span>,</span><br><span class="line">            type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">            autoHide: <span class="literal">true</span>,</span><br><span class="line">            addMessage: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          messages: []</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        isMobile: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> root.innerWidth &amp;&amp; root.innerWidth &lt;= <span class="number">768</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    handle_action_button: <span class="function"><span class="keyword">function</span> (<span class="params">button</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.action.button.buttons.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.action.button.buttons[i].value == button.value &amp;&amp; <span class="keyword">typeof</span>(<span class="built_in">this</span>.action.button.buttons[i].event) == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">              <span class="built_in">this</span>.action.button.buttons[i].event(button);</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">this</span>.action.button.buttons[i].actionStop) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          _handleAction(button.text);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> defaultActionObj = &#123;</span><br><span class="line">            type: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">            text: button.text,</span><br><span class="line">            value: button.value</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> eachProperty <span class="keyword">in</span> button) &#123;</span><br><span class="line">            <span class="keyword">if</span> (button.hasOwnProperty(eachProperty)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (eachProperty !== <span class="string">&#x27;type&#x27;</span> &amp;&amp; eachProperty !== <span class="string">&#x27;text&#x27;</span> &amp;&amp; eachProperty !== <span class="string">&#x27;value&#x27;</span>) &#123;</span><br><span class="line">                defaultActionObj[eachProperty] = button[eachProperty];</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          _actionResolve(defaultActionObj);</span><br><span class="line">    &#125;,</span><br><span class="line">    handle_action_text: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.action.text.value) <span class="keyword">return</span>;</span><br><span class="line">          _handleAction(<span class="built_in">this</span>.action.text.value);</span><br><span class="line">    _actionResolve(&#123;</span><br><span class="line">            type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">            value: <span class="built_in">this</span>.action.text.value</span><br><span class="line">          &#125;);</span><br><span class="line">    <span class="built_in">this</span>.action.text.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">        handle_action_select: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">this</span>.action.select.searchselect &amp;&amp; !<span class="built_in">this</span>.action.select.multipleselect) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.action.select.value.value) <span class="keyword">return</span>;</span><br><span class="line">            _handleAction(<span class="built_in">this</span>.action.select.value[<span class="built_in">this</span>.action.select.label]);</span><br><span class="line">            _actionResolve(&#123;</span><br><span class="line">              type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">              value: <span class="built_in">this</span>.action.select.value.value,</span><br><span class="line">              text: <span class="built_in">this</span>.action.select.value.text,</span><br><span class="line">              obj: <span class="built_in">this</span>.action.select.value</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">this</span>.action.select.searchselect &amp;&amp; <span class="built_in">this</span>.action.select.multipleselect) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.action.select.value) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">var</span> labels = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.action.select.value.length; i++) &#123;</span><br><span class="line">              values.push(<span class="built_in">this</span>.action.select.value[i].value);</span><br><span class="line">              labels.push(<span class="built_in">this</span>.action.select.value[i][<span class="built_in">this</span>.action.select.label]);</span><br><span class="line">            &#125;</span><br><span class="line">            _handleAction(labels.join(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">            _actionResolve(&#123;</span><br><span class="line">              type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">              value: values.join(<span class="string">&#x27;, &#x27;</span>),</span><br><span class="line">              text: labels.join(<span class="string">&#x27;, &#x27;</span>),</span><br><span class="line">              obj: <span class="built_in">this</span>.action.select.value</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.action.select.value) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.action.select.options.length; i++) &#123; <span class="comment">// Find select title</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">this</span>.action.select.options[i].value == <span class="built_in">this</span>.action.select.value) &#123;</span><br><span class="line">                _handleAction(<span class="built_in">this</span>.action.select.options[i].text);</span><br><span class="line">                _actionResolve(&#123;</span><br><span class="line">                  type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                  value: <span class="built_in">this</span>.action.select.value,</span><br><span class="line">                  text: <span class="built_in">this</span>.action.select.options[i].text</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    root.Vue.directive(<span class="string">&#x27;botui-markdown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(binding.value == <span class="string">&#x27;false&#x27;</span>) <span class="keyword">return</span>; <span class="comment">// v-botui-markdown=&quot;false&quot;</span></span><br><span class="line">      el.innerHTML = _parseMarkDown(el.textContent);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    root.Vue.directive(<span class="string">&#x27;botui-scroll&#x27;</span>, &#123;</span><br><span class="line">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        _container.scrollTop = _container.scrollHeight;</span><br><span class="line">        <span class="comment">// 弹弹乐问题定位</span></span><br><span class="line">el.scrollIntoView(&#123;<span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>, <span class="attr">block</span>: <span class="string">&quot;center&quot;</span>, <span class="attr">inline</span>: <span class="string">&quot;nearest&quot;</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    root.Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        el.focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    root.Vue.directive(<span class="string">&#x27;botui-container&#x27;</span>, &#123;</span><br><span class="line">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        _container = el;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _botApp = <span class="keyword">new</span> root.Vue(&#123;</span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="string">&#x27;bot-ui&#x27;</span>: _botuiComponent</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).$mount(<span class="string">&#x27;#&#x27;</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _instance = _botApp.$children[<span class="number">0</span>]; <span class="comment">// to access the component&#x27;s data</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_addMessage</span>(<span class="params">_msg</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(!_msg.loading &amp;&amp; !_msg.content) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;BotUI: &quot;content&quot; is required in a non-loading message object.&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      _msg.type = _msg.type || <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">      _msg.visible = (_msg.delay || _msg.loading) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">var</span> _index = _instance.messages.push(_msg) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(_msg.delay) &#123;</span><br><span class="line">            _msg.visible = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(_msg.loading) &#123;</span><br><span class="line">              _msg.loading = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          resolve(_index);</span><br><span class="line">        &#125;, _msg.delay || <span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_checkOpts</span>(<span class="params">_opts</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> _opts === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        _opts = &#123;</span><br><span class="line">          content: _opts</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> _opts || &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _interface.message =  &#123;</span><br><span class="line">      add: <span class="function"><span class="keyword">function</span> (<span class="params">addOpts</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _addMessage( _checkOpts(addOpts) );</span><br><span class="line">      &#125;,</span><br><span class="line">      bot: <span class="function"><span class="keyword">function</span> (<span class="params">addOpts</span>) </span>&#123;</span><br><span class="line">        addOpts = _checkOpts(addOpts);</span><br><span class="line">        <span class="keyword">return</span> _addMessage(addOpts);</span><br><span class="line">      &#125;,</span><br><span class="line">      human: <span class="function"><span class="keyword">function</span> (<span class="params">addOpts</span>) </span>&#123;</span><br><span class="line">        addOpts = _checkOpts(addOpts);</span><br><span class="line">        addOpts.human = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> _addMessage(addOpts);</span><br><span class="line">      &#125;,</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(_instance.messages[index]);</span><br><span class="line">      &#125;,</span><br><span class="line">      remove: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        _instance.messages.splice(index, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">      &#125;,</span><br><span class="line">      update: <span class="function"><span class="keyword">function</span> (<span class="params">index, msg</span>) </span>&#123; <span class="comment">// only content can be updated, not the message type.</span></span><br><span class="line">        <span class="keyword">var</span> _msg = _instance.messages[index];</span><br><span class="line">        _msg.content = msg.content;</span><br><span class="line">        _msg.visible = !msg.loading;</span><br><span class="line">        _msg.loading = !!msg.loading;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(msg.content);</span><br><span class="line">      &#125;,</span><br><span class="line">      removeAll: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _instance.messages.splice(<span class="number">0</span>, _instance.messages.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeAtoB</span>(<span class="params">objA, objB</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> objA) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!objB.hasOwnProperty(prop)) &#123;</span><br><span class="line">          objB[prop] = objA[prop];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_checkAction</span>(<span class="params">_opts</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!_opts.action &amp;&amp; !_opts.actionButton  &amp;&amp; !_opts.actionText) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;BotUI: &quot;action&quot; property is required.&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_showActions</span>(<span class="params">_opts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      _checkAction(_opts);</span><br><span class="line"></span><br><span class="line">      mergeAtoB(&#123;</span><br><span class="line">        type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">        cssClass: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        autoHide: <span class="literal">true</span>,</span><br><span class="line">        addMessage: <span class="literal">true</span></span><br><span class="line">      &#125;, _opts);</span><br><span class="line"></span><br><span class="line">      _instance.action.type = _opts.type;</span><br><span class="line">      _instance.action.cssClass = _opts.cssClass;</span><br><span class="line">      _instance.action.autoHide = _opts.autoHide;</span><br><span class="line">      _instance.action.addMessage = _opts.addMessage;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        _actionResolve = resolve; <span class="comment">// resolved when action is performed, i.e: button clicked, text submitted, etc.</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          _instance.action.show = <span class="literal">true</span>;</span><br><span class="line">        &#125;, _opts.delay || <span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _interface.action = &#123;</span><br><span class="line">      show: _showActions,</span><br><span class="line">      hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _instance.action.show = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">      &#125;,</span><br><span class="line">      text: <span class="function"><span class="keyword">function</span> (<span class="params">_opts</span>) </span>&#123;</span><br><span class="line">        _checkAction(_opts);</span><br><span class="line">        _instance.action.text = _opts.action;</span><br><span class="line">        <span class="keyword">return</span> _showActions(_opts);</span><br><span class="line">      &#125;,</span><br><span class="line">      button: <span class="function"><span class="keyword">function</span> (<span class="params">_opts</span>) </span>&#123;</span><br><span class="line">        _checkAction(_opts);</span><br><span class="line">        _opts.type = <span class="string">&#x27;button&#x27;</span>;</span><br><span class="line">        _instance.action.button.buttons = _opts.action;</span><br><span class="line">        <span class="keyword">return</span> _showActions(_opts);</span><br><span class="line">      &#125;,</span><br><span class="line">      select: <span class="function"><span class="keyword">function</span> (<span class="params">_opts</span>) </span>&#123;</span><br><span class="line">        _checkAction(_opts);</span><br><span class="line">        _opts.type = <span class="string">&#x27;select&#x27;</span>;</span><br><span class="line">        _opts.action.label = _opts.action.label || <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">        _opts.action.value = _opts.action.value || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        _opts.action.searchselect = <span class="keyword">typeof</span> _opts.action.searchselect !== <span class="string">&#x27;undefined&#x27;</span> ? _opts.action.searchselect : _options.searchselect;</span><br><span class="line">        _opts.action.multipleselect = _opts.action.multipleselect || <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (_opts.action.searchselect &amp;&amp; <span class="keyword">typeof</span>(_opts.action.value) == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!_opts.action.multipleselect) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _opts.action.options.length; i++) &#123; <span class="comment">// Find object</span></span><br><span class="line">              <span class="keyword">if</span> (_opts.action.options[i].value == _opts.action.value) &#123;</span><br><span class="line">                _opts.action.value = _opts.action.options[i]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> vals = _opts.action.value.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            _opts.action.value = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _opts.action.options.length; i++) &#123; <span class="comment">// Find object</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; vals.length; j++) &#123; <span class="comment">// Search values</span></span><br><span class="line">                <span class="keyword">if</span> (_opts.action.options[i].value == vals[j]) &#123;</span><br><span class="line">                  _opts.action.value.push(_opts.action.options[i]);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!_opts.action.searchselect) &#123; _opts.action.options.unshift(&#123;<span class="attr">value</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">text</span> : _opts.action.placeholder&#125;); &#125;</span><br><span class="line">        _instance.action.button = _opts.action.button;</span><br><span class="line">        _instance.action.select = _opts.action;</span><br><span class="line">        <span class="keyword">return</span> _showActions(_opts);</span><br><span class="line">      &#125;,</span><br><span class="line">      buttontext: <span class="function"><span class="keyword">function</span> (<span class="params">_opts</span>) </span>&#123;</span><br><span class="line">        _checkAction(_opts);</span><br><span class="line">        _opts.type = <span class="string">&#x27;buttontext&#x27;</span>;</span><br><span class="line">        _instance.action.button.buttons = _opts.actionButton;</span><br><span class="line">        _instance.action.text = _opts.actionText;</span><br><span class="line">        <span class="keyword">return</span> _showActions(_opts);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_options.fontawesome) &#123;</span><br><span class="line">      loadScript(_fontAwesome);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_options.searchselect) &#123;</span><br><span class="line">      loadScript(_searchselect, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Vue.component(<span class="string">&#x27;v-select&#x27;</span>, VueSelect.VueSelect);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_options.debug) &#123;</span><br><span class="line">      _interface._botApp = _botApp; <span class="comment">// current Vue instance</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _interface;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> BotUI;</span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li><li><p>botui_init.js</p><div class="note info flat"><p>这个是整个项目的关键，聊天内容全部在这里进行设计，此处仅以我的项目作为示例，可以参阅botui的github仓库查阅使用文档，或者在我的项目上进行内容修改。</p></div>    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> botui = <span class="keyword">new</span> BotUI(<span class="string">&quot;hello-akilar&quot;</span>);</span><br><span class="line">botui.message.add(&#123;</span><br><span class="line">  delay: <span class="number">800</span>,</span><br><span class="line">  content: <span class="string">&quot;Hi, 欢迎光临Akilarの糖果屋😊&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  botui.message.add(&#123;</span><br><span class="line">    delay: <span class="number">1100</span>,</span><br><span class="line">    content: <span class="string">&quot;我是店长Akilar😄&quot;</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">1100</span>,</span><br><span class="line">      content: <span class="string">&quot;你也可以叫我Aki~😋&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      botui.action.button(&#123;</span><br><span class="line">        delay: <span class="number">1600</span>,</span><br><span class="line">        action: [&#123;</span><br><span class="line">          text: <span class="string">&quot;我想知道更多关于糖果屋的故事!😃&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;sure&quot;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          text: <span class="string">&quot;好的，就这样吧，拜拜！🙄&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;skip&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="string">&quot;sure&quot;</span> == a.value &amp;&amp; sure();</span><br><span class="line">        <span class="string">&quot;skip&quot;</span> == a.value &amp;&amp; end()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sure = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">600</span>,</span><br><span class="line">      content: <span class="string">&quot;🎉🎉🎉🎉🎉🎉&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      secondpart()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">600</span>,</span><br><span class="line">      content: <span class="string">&quot;w(ﾟДﾟ)w 不要走！再看看嘛！&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  secondpart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">5000</span>,</span><br><span class="line">      content: <span class="string">&quot;首先呢，很感谢您肯在这里驻足片刻❤️。Akilarの糖果屋是一个个人性质的博客，我会在这里发表各种各样的内容。&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      botui.message.add(&#123;</span><br><span class="line">        delay: <span class="number">15000</span>,</span><br><span class="line">        content: <span class="string">&quot;起这个名字是因为想到了安卓的命名方式，安卓历代版本都用甜品的名字命名🍰，例如9是Pineapple cake(菠萝蛋糕)🍰，8是Oreo(奥利奥)🍩，那我干脆就甜到底了。因此可以看到我的分类里面都是糖。之后就发现了一个很纠结的问题，除了巧克力，我想不到其他的不带糖字的糖果。当然了，无伤大雅。才怪咯！超难受的好么！偏偏我那么喜欢巧克力🍫，我是不会把它删掉的。&quot;</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        botui.message.add(&#123;</span><br><span class="line">          delay: <span class="number">5000</span>,</span><br><span class="line">          content: <span class="string">&quot;分类也有一点我的恶趣味在。👀&quot;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          botui.message.add(&#123;</span><br><span class="line">            delay: <span class="number">8000</span>,</span><br><span class="line">            content: <span class="string">&quot;比如巧克力是Ubuntu的教程，棉花糖是windows的教程，糖葫芦就是各种通用教程啦！🎉&quot;</span></span><br><span class="line">          &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            botui.message.add(&#123;</span><br><span class="line">              delay: <span class="number">5000</span>,</span><br><span class="line">              content: <span class="string">&quot;泡泡糖是个人日记哦，流水账一样的，不要看，很羞耻的。😶&quot;</span></span><br><span class="line">            &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              botui.message.add(&#123;</span><br><span class="line">                delay: <span class="number">4000</span>,</span><br><span class="line">                content: <span class="string">&quot;我个人最推荐的是太妃糖版块哦，这里可都是我引以为豪的作品呢💝！马卡龙酌情观看吧，长篇连载对我来说是个挑战，很可能断更。👻&quot;</span></span><br><span class="line">              &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                botui.action.button(&#123;</span><br><span class="line">                  delay: <span class="number">1100</span>,</span><br><span class="line">                  action: [&#123;</span><br><span class="line">                    text: <span class="string">&quot;为什么叫Akilarの糖果屋呢？🤔&quot;</span>,</span><br><span class="line">                    value: <span class="string">&quot;why-mashiro&quot;</span></span><br><span class="line">                  &#125;]</span><br><span class="line">                &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">                  thirdpart()</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  thirdpart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">1e3</span>,</span><br><span class="line">      content: <span class="string">&quot;诶？Akilar是我的英文名啊😏，糖果屋，emm🤔，大概是因为我在现实中也很想开一家糖果屋吧。&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      botui.action.button(&#123;</span><br><span class="line">        delay: <span class="number">1500</span>,</span><br><span class="line">        action: [&#123;</span><br><span class="line">          text: <span class="string">&quot;😲，那英文名为什么叫Akilar呢？&quot;</span>,</span><br><span class="line">          value: <span class="string">&quot;why-cat&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        fourthpart()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fourthpart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">3000</span>,</span><br><span class="line">      content: <span class="string">&quot;这个是因为我的名字的释义用日文发音，其中有一节是Akira，用英文谐音拼写就是Akilar了 &quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      botui.message.add(&#123;</span><br><span class="line">        delay: <span class="number">3000</span>,</span><br><span class="line">        content: <span class="string">&quot;灵感来自于刀剑神域~&quot;</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        botui.action.button(&#123;</span><br><span class="line">          delay: <span class="number">1500</span>,</span><br><span class="line">          action: [&#123;</span><br><span class="line">            text: <span class="string">&quot;方便透露一下真名吗？👀&quot;</span>,</span><br><span class="line">            value: <span class="string">&quot;why-domain&quot;</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">          fifthpart()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fifthpart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    botui.message.add(&#123;</span><br><span class="line">      delay: <span class="number">5000</span>,</span><br><span class="line">      content: <span class="string">&quot;emmmm,流水幽吟绕耳边，煦风馨语抚心弦，挥臂欲揽冰钩月，银星斟酌醉人涎~&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      botui.message.add(&#123;</span><br><span class="line">        delay: <span class="number">3000</span>,</span><br><span class="line">        content: <span class="string">&quot;只是一介无名小卒而已^_^&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改<code>~\[blogroot]\_config.butterfly.yml</code>,注意对齐格式。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    aside:</span><br><span class="line">      enable: true</span><br><span class="line">      mobile: false # display on mobile</span><br><span class="line">      position: right # left or right</span><br><span class="line">      card_author:</span><br><span class="line">        enable: true</span><br><span class="line">        description:</span><br><span class="line">        button:</span><br><span class="line">          icon:</span><br><span class="line">          text:</span><br><span class="line">          link:</span><br><span class="line"><span class="addition">+     card_botui:</span></span><br><span class="line"><span class="addition">+         enable: true #侧栏聊天窗口</span></span><br><span class="line">      card_announcement:</span><br><span class="line">        enable: true</span><br><span class="line"></span><br><span class="line">    inject:</span><br><span class="line">      head:</span><br><span class="line">        # 侧栏聊天窗口</span><br><span class="line"><span class="addition">+       - &lt;link rel=&quot;stylesheet&quot; href=&quot;/botui/css/card_botui.css&quot; /&gt;</span></span><br><span class="line">      bottom:</span><br><span class="line"><span class="addition">+       # Veu.js依赖</span></span><br><span class="line"><span class="addition">+       - &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.11&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+       # 侧栏聊天窗</span></span><br><span class="line"><span class="addition">+       - &lt;script src=&quot;/js/botui.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+       - &lt;script data-pjax src=&quot;/js/botui_init.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>~\[blogroot]\themes\butterfly\languages\zh-CN.yml</code>中添加相应译名</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    aside:</span><br><span class="line">      articles: 文章</span><br><span class="line">      tags: 标签</span><br><span class="line">      categories: 分类</span><br><span class="line">      Link: 友人帐</span><br><span class="line"><span class="addition">+     card_botui: 聊天窗</span></span><br><span class="line">      card_announcement: 告示牌</span><br><span class="line">      card_categories: 分类</span><br><span class="line">      card_tags: 标签</span><br><span class="line">      card_archives: 时间轴</span><br><span class="line">      card_recent_post: 最新文章</span><br><span class="line">      card_webinfo:</span><br></pre></td></tr></table></figure></li></ol><h1 id="可能遇到的bug"><a href="#可能遇到的bug" class="headerlink" title="可能遇到的bug"></a>可能遇到的bug</h1><ol><li><p>无法显示</p><ul><li>botui.js依赖vue.js，添加依赖即可。（教程已更新相关内容）<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  inject:</span><br><span class="line">    head:</span><br><span class="line">    bottom:</span><br><span class="line"><span class="addition">+     # Veu.js依赖</span></span><br><span class="line"><span class="addition">+     - &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.11&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>切换页面侧栏就变成空白</p><ul><li>添加pjax重载(仅限于butterfly主题)<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  inject:</span><br><span class="line">    head:</span><br><span class="line">    bottom:</span><br><span class="line"><span class="deletion">-     - &lt;script src=&quot;/js/botui_init.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+     - &lt;script data-pjax src=&quot;/js/botui_init.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">botui.js是一个简单的聊天机器人框架。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="🦋Butterfly" scheme="https://akilar.top/tags/%F0%9F%A6%8BButterfly/"/>
    
  </entry>
  
  <entry>
    <title>二级域名的活用方法</title>
    <link href="https://akilar.top/posts/8250e594/"/>
    <id>https://akilar.top/posts/8250e594/</id>
    <published>2020-10-17T19:46:17.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>在看到别人的博客感到震撼之余，我还眼馋人家的门户主页。而且又不是很愿意同时养好几个不同的域名，于是想到了利用二级域名来部署我的门户主页。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/k5gdKnlbahOoAUe.png" alt=""></p><h1 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h1><p>我使用的主页是fork自冰卡诺老师基于<code>metro4</code>框架制作的项目。此处以此为例进行部署操作。</p><ul><li><a href="https://github.com/Akilarlxh/blog">本人的主页项目源码</a></li><li><a href="https://github.com/Zfour/zfe.one">冰老师的主页项目源码</a><br>直接访问项目仓库，fork到自己的代码托管网站上。</li></ul><div class="note info flat"><p>此处以我的主页为例。最先说明，因为这次使用的都是project pages，最终的二级域名和项目名没有半点关系，所以各位在配置时没必要对项目名太过谨慎。</p></div><div class="tabs" id="二级域名部署"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#二级域名部署-1">♠️Github</button></li><li class="tab"><button type="button" data-href="#二级域名部署-2">♥️Vercel</button></li><li class="tab"><button type="button" data-href="#二级域名部署-3">♣️Coding</button></li><li class="tab"><button type="button" data-href="#二级域名部署-4">♦️Gitee工具人</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="二级域名部署-1"><ol><li>找到github的仓库，开启github pages。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/NMGzo6yeOUpsxg5.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/TGreB5ELwM1VaUX.png" alt=""></li><li>因为要使用自定义的二级域名访问<code>github project pages</code>，所以务必确保你在项目内添加了<code>CNAME</code>，并且<code>CNAME</code>内写入了二级域名。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/OJ6q3skyrdeTaYb.png" alt=""></li><li>配置CNAME解析<br>在你的域名解析站里为二级域名添加解析。比如我买的域名是<code>Akilar.top</code>，而我要用<code>blog.akilar.top</code>这个二级域名访问。那么在解析时，主机记录写期望的二级域名头，记录值填写托管网站提供的记录值。例如<code>github pages</code>的记录值，一律是<code>username.github.io</code>。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/uALhtqJUFG6s1OR.png" alt=""><br>之后就可以使用<code>blog.akilar.top</code>z这个二级域名访问了。</li></ol><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="二级域名部署-2"><div class="note warning flat"><p>Github在国内的速度实在是不好形容，所以我们可以使用Vercel来部署Github项目静态网站。</p></div><ol><li>访问<a href="https://vercel.com/">Vercel</a>,完成注册，并使用。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/qJu2j9I4emXh7d5.png" alt=""></li><li><p>引入Github上的静态网站项目。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/UXNSPbFuaGicfMj.png" alt=""><br>这里由于我的目录结构中，index.html就在根目录，所以无需特别调整位置，一路默认项部署过去即可。</p><div class="note warning flat"><p>如果你的项目中index.html位置不在根目录，记得主动配置一下。)</p></div></li><li><p>设置自定义域名，如图所示，找到：项目-&gt;Settings-&gt;Domains。添加自定义域名，之后会得到一组解析记录。（不一定是CNAME，也可能是A记录。照着它给出的解析记录进行配置即可。）<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/WGjMANU7ZcvCyk9.png" alt=""></p></li><li>添加解析记录<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/1BNxR3LfMOqAjlJ.png" alt=""><br>之后就可以使用二级域名<code>blog.akilar.top</code>这一二级域名访问了。</li></ol><div class="note primary flat"><p>更多关于Vercel的配置教程内容可以参考这篇文章：<a href="/posts/812734f8/" title="使用Vercel来加速Hexo博客">使用Vercel来加速Hexo博客</a></p></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="二级域名部署-3"><div class="note warning flat"><p>Vercel对于电信的线路较为友好，而Coding对于联通的线路较为友好，只不过Coding实在是容易崩。而且<strong>新版Coding自打被腾讯云收购以后就开始收费(新用户会提供几个月的免费流量包，用完后才开始收费)</strong>了。所以还请酌情考虑使用需要使用。</p></div><ol><li>访问<a href="https://coding.net/">Coding</a>完成注册。</li><li>新建项目，注意必须选择项目类型为DevOps，这样才能使用静态部署功能，完成后新建代码仓库。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/L2mY8DHulGjfRJX.png" alt=""></li><li>找到持续部署-&gt;静态网站-&gt;新建静态网站。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/rbO27jJhDYIRdCH.png" alt=""></li><li>部署完成后，在右上角找到<code>自定义域名</code>选项，添加自定义域名后会得到相应的解析记录。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/xsVnO4dkAGDPwiq.png" alt=""></li><li>添加解析记录<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/j7DEcqxZt3Bi1Ve.png" alt=""><br>之后就可以使用二级域名<code>blog.akilar.top</code>这一二级域名访问了。</li></ol><div class="note primary flat"><p>更多关于Coding的配置教程内容可以参考这篇文章：<a href="/posts/54c08a4b/" title="使用Coding和Github来实现双线部署">使用Coding和Github来实现双线部署</a></p></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="二级域名部署-4"><div class="note warning flat"><p>Gitee现已不支持自定义域名，Gitee pages pro也不再支持购买。此处仅作为镜像站使用。</p></div><ol><li>访问<a href="https://gitee.com/">Gitee</a>并注册</li><li>页面右上角头像左侧找到<code>＋</code>号，选择<code>从Github/GitLab导入仓库</code><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/KqQvNYrZxO45tgb.png" alt=""><br>可以使用仓库链接导入也可以直接从你的Github导入，因为项目要作为静态网站展示，所以记得设置仓库为公开。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/mBCoDvAJ6xbE19p.png" alt=""></li><li>在仓库右上角找到:服务-&gt;Gitee Pages<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/O9Hgs7W2l8jtwq4.png" alt=""><br>因为Gitee pages pro已无法购买，所以不支持自定义域名。仅将其作为镜像站使用<code>https://username.gitee.io/projectname</code>访问。</li></ol><div class="note primary flat"><p>更多关于Gitee pages的配置教程内容可以参考这篇文章：<a href="/posts/6ff8c001/" title="使用Gitee提供镜像站支持">使用Gitee提供镜像站支持</a></p></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><div class="note primary flat"><p>如果是准备采取多线部署来架设二级域名的静态网站的话，每次部署多个显然是不愿意的，Vercel会自动检测Github对应仓库是否变动触发自动部署，倒是令人省心，至于Coding和Gitee，我的思路是使用github actions来同步Github仓库内容至Coding和Gitee，再使用脚本自动更新Gitee Pages。</p></div><h2 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h2><ol><li>在项目根目录建<code>.github/workflows/autodeploy.yml</code><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/Gi17VHTL2EZkQYF.png" alt=""></li><li>打开<code>autodeploy.yml</code><br>输入以下内容，注意修改你的个人仓库配置。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&#x27;Autodeploy&#x27;</span></span><br><span class="line"></span><br><span class="line">on: [push, delete]</span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: <span class="string">&#x27;Checkout&#x27;</span></span><br><span class="line">        uses: actions/checkout@v1</span><br><span class="line"></span><br><span class="line">      - name: <span class="string">&#x27;Mirror to coding&#x27;</span> <span class="comment"># 将Github仓库内容同步到Coding，之后Coding的持续部署功能会自动完成网站部署</span></span><br><span class="line">        uses: wearerequired/git-mirror-action@master</span><br><span class="line">        env:</span><br><span class="line">            <span class="comment"># 注意在 Settings-&gt;Secrets 配置 CODING_RSA_PRIVATE_KEY</span></span><br><span class="line">            SSH_PRIVATE_KEY: <span class="variable">$&#123;&#123; secrets.CODING_RSA_PRIVATE_KEY &#125;</span>&#125;</span><br><span class="line">        with:</span><br><span class="line">            <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">            <span class="built_in">source</span>-repo: <span class="string">&quot;git@github.com:akilarlxh/blog.git&quot;</span></span><br><span class="line">            <span class="comment"># 注意替换为你的 Coding 目标仓库地址</span></span><br><span class="line">            destination-repo: <span class="string">&quot;git@e.coding.net:akilar/akilar/blog.git&quot;</span></span><br><span class="line"></span><br><span class="line">      - name: <span class="string">&#x27;Mirror to Gitee&#x27;</span> <span class="comment">#将Github仓库内容同步到Gitee对应仓库。</span></span><br><span class="line">        uses: wearerequired/git-mirror-action@master</span><br><span class="line">        env:</span><br><span class="line">            <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">            SSH_PRIVATE_KEY: <span class="variable">$&#123;&#123; secrets.GITEE_RSA_PRIVATE_KEY &#125;</span>&#125;</span><br><span class="line">        with:</span><br><span class="line">            <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">            <span class="built_in">source</span>-repo: <span class="string">&quot;git@github.com:akilarlxh/blog.git&quot;</span></span><br><span class="line">            <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">            destination-repo: <span class="string">&quot;git@gitee.com:akilar/blog.git&quot;</span></span><br><span class="line"></span><br><span class="line">      - name: <span class="string">&#x27;Build Gitee Pages&#x27;</span> <span class="comment">#用脚本更新Gitee Pages</span></span><br><span class="line">        uses: yanglbme/gitee-pages-action@master</span><br><span class="line">        with:</span><br><span class="line">            <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">            gitee-username: akilar</span><br><span class="line">            <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">            gitee-password: <span class="variable">$&#123;&#123; secrets.GITEE_PASSWORD &#125;</span>&#125;</span><br><span class="line">            <span class="comment"># 注意替换为你的 Gitee 仓库</span></span><br><span class="line">            gitee-repo: akilar/blog</span><br></pre></td></tr></table></figure></li><li>找到你的Github对应仓库，在仓库的Settings-&gt;Secrets里添加上述脚本中提到的三个参数。</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/17/ZOokBA75vQLe1ur.png" alt=""></p><ul><li>CODING_RSA_PRIVATE_KEY : 与Coding绑定的SSH公钥对应的私钥</li><li>GITEE_RSA_PRIVATE_KEY : 与Gitee绑定的SSH公钥对应的私钥</li><li>GITEE_PASSWORD : Gitee账号的密码</li></ul><div class="note warning flat"><p>这里的<strong>CODING_RSA_PRIVATE_KEY</strong>和<strong>GITEE_RSA_PRIVATE_KEY</strong>指你的个人密钥，在配置SSH-KEY时，我们用来与Github、Coding、Gitee绑定的是公钥，而私钥存放在（以win10为例）<code>C:\Users\userneme\.ssh\id_rsa</code>文件内，内容格式类似于下方代码，使用时将包括<code>-----BEGIN RSA PRIVATE KEY-----</code>和<code>-----END RSA PRIVATE KEY-----</code>在内的全部内容都存放到变量值里。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEogIBAAKCAQEApM/T7rRtc9sNcd7NNZHMOZU7e7322leY5JauIxJEgQYpdrfO</span><br><span class="line">vQB9PPpeMudAyCvAlaM?????????XO21G7RNejl4dLEflBh68TB93DlK/k/3KizMf</span><br><span class="line">jewpXU3HHpFSSyiIA7Mi8ur39ybbG4oWEHI/Mnjq?????????e5oiVvYNux2</span><br><span class="line">TazhAoGAL8h8XrB0t????????????????W2Ul4AomH1mu+rtIz2sQZdREVL4</span><br><span class="line">dskwWvzoGOyNBPreLXWHBY6fg34dhNaZvNDZPGGd3bK6arMRdzrAynQio0CE0zwm</span><br><span class="line">zJEo1tpUvqujmYMRnM1+jYHOPqU5sIvnEy5xovAzECPUSUs43Ag=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p></div><div class="note success flat"><p><strong>CODING_RSA_PRIVATE_KEY</strong>和<strong>GITEE_RSA_PRIVATE_KEY</strong>可以使用同一个值，只要相应公钥已经和对应站点绑定。</p></div><p>之后，只要每次push到github仓库，就会触发github actions，启动自动部署了。</p><h2 id="bug归纳"><a href="#bug归纳" class="headerlink" title="bug归纳"></a>bug归纳</h2><div class="note warning flat"><p>可能遇到的bug：</p><ol><li>Gitee用github action自动部署更新收到短信，提示异地登录需要验证码。</li></ol><p>因为github action使用的是美国的服务器，所以，使用github action来远程更新gitee的站点部署时，会收到异地登陆的短信，提示需要验证码。这个在脚本作者的issues里有相应的解决方案:<a href="https://github.com/yanglbme/gitee-pages-action/issues/6">登陆失败 #6</a></p><ul><li>在微信上搜索Gitee微信公众号，在微信公众号内绑定自己的Gitee账号，这样虽然还是会有异地登录提示，但是发过来的消息不再需要填写验证码，而且提醒若不是你在操作，请及时修改密码。（某种意义上就是我在操作，所以我选择不改密码2333）</li><li>使用VPN，通过美国IP登录一次Gitee。(一般第一步就能把问题解决了，用不到第二步。)</li></ul><ol><li>Gitee部署失败<br>脚本的原理是用程序代替人工去点击Gitee Pages的更新按钮。所以需要你先手动做一次页面部署，确保有那个更新按钮在，脚本才有生效的前提。</li></ol></div><div class="note primary flat"><p>更多关于Github Actions的配置教程内容可以参考这篇文章：<a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a></p></div><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><ol><li>在博客导航栏添加主页URL跳转到了404页面<br>这应该是因为写的URL没有带协议。例如我写的如果只是<code>blog.akilar.top</code>.会被识别成相对地址，从而跳转到<code>https://akilar.top/blog.akilar.top</code>,而这个页面显然是不存在于博客下方的，正确的写法是带完整的协议内容，即<code>https://blog.akilar.top</code>。</li></ol>]]></content>
    
    
    <summary type="html">本文探讨如何使用二级域名来访问独立项目的静态网站</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
  </entry>
  
  <entry>
    <title>平滑升级魔改后的Hexo主题</title>
    <link href="https://akilar.top/posts/bbf68ad4/"/>
    <id>https://akilar.top/posts/bbf68ad4/</id>
    <published>2020-10-14T09:47:53.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>这里仅仅讨论同一大版本之间的主题升级，跨版本升级使用本文的方式进行升级，很可能因为缺少一些底层架构的依赖支持导致不可用。另外，从博主本人的魔改历程来看，每次升级后直接从零开始重新魔改，这种看似最麻烦的方式，可能是最省时间的。</p><h1 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h1><p>本文主要讨论，在大面积魔改了Hexo主题之后，如何平滑升级到最新版本的主题。众所周知，如果是按照主题文档的说法，使用<code>git pull</code>，那么从远端拉取的新版主题会覆盖现有的魔改主题，这显然不是我们想要的结果。那么不妨换个思路，既然升级这个过程本质上就是对上一版本的主题代码进行修改，我们为啥不直接把这次升级看作是对上一版本主题的一次大魔改呢？</p><h1 id="理论尝试"><a href="#理论尝试" class="headerlink" title="理论尝试"></a>理论尝试</h1><p>Github本身就提供了Compare的功能，在Release的左侧。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/XvEPVg6SomZ2LKr.png" alt=""><br>点选当前版本相对于另一版本修改的内容。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/Z1GSAiY6b8MaXvU.png" alt=""><br>由此就能看出升级前后的文件异同。<br><div class="note info flat"><p>但是，很显然单纯的通过比较以后逐个去修改，同时还要记忆自己魔改的内容与新版主题的冲突。正常人类的精力是不足以应对这种局面的。这里，可以再尝试一下另一种思路。</p></div></p><h1 id="git-diff插件"><a href="#git-diff插件" class="headerlink" title="git diff插件"></a>git diff插件</h1><p>Github除了上面提到的<code>Compare</code>功能以外，还有一个叫做<code>Pull requests</code>的功能，这个功能的本意是在协同开发时合并多个分支的功能。也就是说，我们完全可以将新主题的配置作为一个新的分支提交到github，然后在github发起该分支到魔改版本分支的<code>Pull requests</code>。然后在<code>Pull requests</code>逐个处理合并冲突。本文提供的最终的方案就是基于这一原理来进行的。使用Atom自带的<code>git diff</code>插件，能够快速的在图形化界面中处理合并冲突。</p><h1 id="升级案例实操"><a href="#升级案例实操" class="headerlink" title="升级案例实操"></a>升级案例实操</h1><div class="note default flat"><p>以butterfly主题升级为例</p></div><ol><li>首先你需要安装Atom，详细的安装教程以及插件配置可以参考这篇文章：<a href="/posts/498e6e74/" title="Atom插件安装和推荐">Atom插件安装和推荐</a>。原本还需要安装<code>Merge Conflicts</code>插件,但是最新版Atom已经将该插件的功能集成在默认插件的<code>git diff</code>中。（<code>Merge Conflicts</code>和<code>git diff</code>的功能类似但是使用前提依然是不同的，此处如果要使用<code>Merge Conflicts</code>来处理，必须确保主题文件夹里的<code>.git</code>文件夹还在，这样才能有一个<code>Pull</code>以后触发<code>Merge Conflicts</code>的过程，显然不适用于大多数情况，所以之后的教程依然针对用<code>git diff</code>插件处理。）<div class="note warning flat"><p>如果使用的是其他的文本编辑器，例如<code>VScode</code>、<code>Sublime</code>，我不确定它有没有类似的插件支持，如果有，还请在评论区提醒我更新教程。</p></div></li><li>在升级之前，为了保证自己有后悔的余地，务必先行提交一次当前主题配置的源码到Github等代码托管站点。若是还不放心还可以再发布一个Release。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/dIkfGBZHy74n8oW.png" alt=""></li><li><p>在任意位置打开终端，输入以下代码获取最新的稳定版主题文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两个源，内容完全一样，择一即可。gitee在国内较快。</span></span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git butterfly <span class="comment">#github源</span></span><br><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/iamjerryw/hexo-theme-butterfly.git butterfly <span class="comment">#gitee源</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/uPCjsg9pi5kr8WN.png" alt=""></p></li><li><p>找到你的Hexo源码，<strong>删除</strong><code>[blogroot]/themes</code>目录下的<code>butterfly</code>主题文件夹,然后将刚刚clone的最新的<code>butterfly</code>主题文件夹移动到<code>[blogroot]/themes</code>目录下。同时记得删除<code>[blogroot]/_config.butterfly.yml</code>,同时将最新的<code>butterfly</code>主题文件夹内的<code>_config.yml</code>文件复制并重命名为<code>_config.butterfly.yml</code>后移动到<code>[blogroot]/</code>目录下。<del>恭喜你，现在你可以重新开始魔改之旅了！</del></p><div class="note info flat"><p>说白了就是删除现有主题的一切内容，然后移入新版主题。相当于从零开始，当然不会真的从零开始。<br>也可以选择直接覆盖。但是考虑到butterfly主题的更新偶尔会把主题内的js和css资源转为CDN，而覆盖操作并不会删除主题文件夹内的相应静态资源。<br>所以还是建议直接删除原版主题后再移入新版主题文件夹比较好。</p></div></li><li>使用Atom打开Hexo项目文件夹<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/N3KaIRwbrQeyj8z.png" alt=""><br>在右下角找到git按钮，打开Atom自带的git plus的GUI界面。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/y9lnfeTavxpRLAB.png" alt=""></li><li>点选<code>Unstaged Changes</code>内的内容打开git diff处理界面。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/14/WNexXgGmlEATs6O.png" alt=""><div class="note warning flat"><p>注意保留修改和删除修改的前后项，如果是先删除了原版主题文件夹然后再移入新版主题文件夹，那么点选保留修改是接受新版主题的新增内容，点选删除修改是保留原版主题的内容。前后概念理清有助于你在之后处理合并的内容。</p></div></li><li>合并处理完成后运行<code>hexo clean &amp; hexo g &amp; hexo s</code>就可以在本地预览<del>薛定谔的报错</del>更新后的内容了。</li><li>最后一步，打开[blogroot]/themes/butterfly/package.json,将主题版本号改为最新版本</li></ol><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-theme-butterfly&quot;,</span><br><span class="line"><span class="addition">+ &quot;version&quot;: &quot;3.2.0&quot;,</span></span><br><span class="line"><span class="deletion">- &quot;version&quot;: &quot;3.1.1&quot;,</span></span><br><span class="line">  &quot;description&quot;: &quot;A Simple and Card UI Design theme for Hexo&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;package.json&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h1 id="优缺点归纳"><a href="#优缺点归纳" class="headerlink" title="优缺点归纳"></a>优缺点归纳</h1><div class="table-container"><table><thead><tr><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td style="text-align:left">直接通过GUI界面进行<br>合并冲突处理，较为直观</td><td style="text-align:left">修改者对于自己魔改<br>的内容需要一定的记忆</td></tr><tr><td style="text-align:left">最终效果等同于从零开始<br>重新进行了一遍魔改</td><td style="text-align:left">某种程度上还不如从零开始<br>重新魔改来的轻松</td></tr><tr><td style="text-align:left">适合大版本内进行更新</td><td style="text-align:left">跨版本升级可能因为<br>缺少相应依赖引发报错</td></tr></tbody></table></div><h1 id="Bug处理方案归纳"><a href="#Bug处理方案归纳" class="headerlink" title="Bug处理方案归纳"></a>Bug处理方案归纳</h1><ol><li>git commit内容是主题文档的git commit history。<br>严格来说这个不算bug，这是因为点选了主题目录下的文件，且主题目录内的<code>.git</code>文件夹没有删除导致的。Atom自带的<code>git plus</code>插件会自动识别当前文件最深层级目录下的.git文件。最简单的解决方案就是删除主题文件夹下的<code>.git</code>文件夹。</li></ol>]]></content>
    
    
    <summary type="html">魔改后的主题直接升级显然是很困难的，但是换个思路，如果把主题升级也看作是一次魔改呢？</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="⚛️Atom" scheme="https://akilar.top/tags/%E2%9A%9B%EF%B8%8FAtom/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客访问优化日记</title>
    <link href="https://akilar.top/posts/7c16c4bb/"/>
    <id>https://akilar.top/posts/7c16c4bb/</id>
    <published>2020-10-01T22:08:01.000Z</published>
    <updated>2020-10-24T13:59:30.375Z</updated>
    
    <content type="html"><![CDATA[<div class="timeline"><p class='p h2'>Hexo博客优化日记</p><div class="timenode"><div class="meta"><p><p>2019-04-09:Hexo博客搭建</p></p></div><div class="body"><ol><li>Win10、Ubuntu系统下的Hexo安装配置</li><li>将Hexo部署到Github上，开通Github pages服务，使用<code>https://username.github.io</code>访问Hexo博客。</li><li>域名绑定，使用自定义域名访问Github pages。</li><li>定制脚本，只需要敲数字就能完成一系列指令操作。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-09-21:使用Vercel加速Hexo博客</p></p></div><div class="body"><ol><li>使用Vercel给Github pages提供免费CDN服务</li><li>根据主分支变动与否决定是否触发持续部署。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-09-21:使用Coding和github来实现双线部署</p></p></div><div class="body"><ol><li>将Hexo博客部署到Coding</li><li>根据主分支是否变动决定触发持续部署</li><li>给Coding添加自定义域名，提供国内线路。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-09-22:使用Gitee提供镜像站支持</p></p></div><div class="body"><ol><li>将Hexo部署到Gitee作为Hexo镜像站</li><li>使用Gitee Pages部署静态网页</li><li>使用<code>https://usernanme.gitee.io</code>访问镜像站</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-09-22:使用Github Action实现全自动部署</p></p></div><div class="body"><ol><li>根据存放源码的主分支是否变动决定是否启动持续部署</li><li>自动部署至Github、Coding、Gitee。</li><li>使用脚本自动更新Gitee Pages。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-09-23:给博客添加PWA</p></p></div><div class="body"><ol><li>仅针对Butterfly</li><li>给Hexo博客添加PWA渐进式网络应用</li><li>配合GULP插件压缩静态页面资源</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-10-02:优化博客静态资源提升访问速度</p></p></div><div class="body"><ol><li>压缩图片资源</li><li>使用jsdelivr给js、css文件提供免费CDN加速</li><li>使用lighthouse评测网页性能并获取改进意见。</li></ol></div></div></div><h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><div class="note success flat"><p>在优化博客之前，首先肯定需要搭建一个Hexo博客。</p></div><div class="tabs" id="hexobuild"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#hexobuild-1">🍰Win10</button></li><li class="tab"><button type="button" data-href="#hexobuild-2">🍫Ubuntu</button></li><li class="tab"><button type="button" data-href="#hexobuild-3">🍭Android</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="hexobuild-1"><h2 id="🍰Win10下搭建"><a href="#🍰Win10下搭建" class="headerlink" title="🍰Win10下搭建"></a>🍰Win10下搭建</h2><div class="note primary flat"><p><a href="/posts/6ef63e2d/" title="Win10:Hexo+github搭建个人博客">Win10:Hexo+github搭建个人博客</a><br>通过这篇教程，能够实现</p><ol><li>Win10系统下的Hexo安装配置</li><li>将Hexo部署到Github上，开通Github pages服务，使用<a href="https://username.github.io访问你的Hexo博客。">https://username.github.io访问你的Hexo博客。</a></li><li>域名绑定，使用自定义域名访问Github pages。</li><li>博主定制脚本，只需要敲数字就能完成一系列指令操作。</li></ol></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="hexobuild-2"><h2 id="🍫Ubuntu下搭建"><a href="#🍫Ubuntu下搭建" class="headerlink" title="🍫Ubuntu下搭建"></a>🍫Ubuntu下搭建</h2><div class="note primary flat"><p>Ubuntu本质依然是linux系统，如果是对linux系统不了解的不建议在linux系统上进行操作。<br>如果保持着学习的心态，那么在做好可能会需要多次重装的心理准备后，可以先看看前置教程。<br><a href="/posts/2f7e1a55/" title="Ubuntu重装日记">Ubuntu重装日记</a><br>在配置好相对完整的linux<del>美化</del>开发环境以后，再继续进行Hexo博客的搭建。<br><a href="/posts/e5502ef6/" title="Ubuntu:Hexo+github搭建个人博客">Ubuntu:Hexo+github搭建个人博客</a><br>通过这篇教程，能够实现</p><ol><li>Win10系统下的Hexo安装配置</li><li>将Hexo部署到Github上，开通Github pages服务，使用<a href="https://username.github.io访问你的Hexo博客。">https://username.github.io访问你的Hexo博客。</a></li><li>域名绑定，使用自定义域名访问Github pages。</li><li>博主定制脚本，只需要敲数字就能完成一系列指令操作。</li></ol></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="hexobuild-3"><h2 id="🍭Android下搭建"><a href="#🍭Android下搭建" class="headerlink" title="🍭Android下搭建"></a>🍭Android下搭建</h2><p>对，你没看错，没规定说只有电脑才能搭建博客的，手机一样也可以，使用Termux就能实现。虽然很鸡肋。下文的Github Action全自动部署才是更好的方案。</p><div class="note primary flat"><p>Termux是一款能够在安卓手机上部署linux环境的软件，集成了Python、 PHP、 Ruby、 Nodejs、 MySQL等多种开发环境。理论上甚至可以将其搭建成虚拟主机作为站点的服务器。<br>考虑到受众数量，本帖不多做套路，这里只放大神们写好的教程。</p><div class="tag link"><a class="link-card" title="Termux高级终端安装使用配置教程" href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-3"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://image.3001.net/images/20200920/16006077095413.png"/></div><div class="right"><p class="text">Termux高级终端安装使用配置教程</p><p class="url">https://www.sqlsec.com/2018/05/termux.html#toc-heading-3</p></div></a></div>至于在Termux上安装Hexo略显鸡肋，可以在配置完成Termux后自行学习，或者参考<a href="/posts/e5502ef6/" title="Ubuntu的配置教程">Ubuntu的配置教程</a><div class="note info flat"><p>在完成本贴全部的教程以后，可以通过Github Actions全自动部署博客，哪怕是ios用户，也可以通过直接登录github的网页修改源码来触发自动部署。</p></div></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note success flat"><p>在学习以下四步加速方案前，先来了解一下这个加速过程的原理<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/03/umbOp5ZGzsPBdLU.png" alt=""></p></div><h1 id="Vercel加速"><a href="#Vercel加速" class="headerlink" title="Vercel加速"></a>Vercel加速</h1><div class="note primary flat"><p><a href="/posts/812734f8/" title="使用Vercel来加速Hexo博客">使用Vercel来加速Hexo博客</a></p></div><h1 id="Coding-amp-Github双线部署"><a href="#Coding-amp-Github双线部署" class="headerlink" title="Coding&amp;Github双线部署"></a>Coding&amp;Github双线部署</h1><div class="note primary flat"><p><a href="/posts/54c08a4b/" title="使用Coding和Github来实现双线部署">使用Coding和Github来实现双线部署</a></p></div><h1 id="Gitee镜像站支持"><a href="#Gitee镜像站支持" class="headerlink" title="Gitee镜像站支持"></a>Gitee镜像站支持</h1><div class="note primary flat"><p><a href="/posts/6ff8c001/" title="使用Gitee提供镜像站支持">使用Gitee提供镜像站支持</a></p></div><h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><div class="note primary flat"><p><a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a></p></div><h1 id="给博客添加PWA"><a href="#给博客添加PWA" class="headerlink" title="给博客添加PWA"></a>给博客添加PWA</h1><div class="note primary flat"><ol><li><a href="https://demo.jerryc.me/posts/4073eda/">Butterfly文档-GULP配置以及PWA配置</a></li><li><p><a href="https://app.brandmark.io/v3/">图标设计网站-提供多种图标设计方案</a></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>图文教程</span></div> <div class="hide-content"><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/02/pe7mbtMjxl65cFB.png" alt="输入主标题和副标题"><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/02/3Vg8n9wpKoQRWbk.png" alt="添加网页元素作为风格设计线索"><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/02/zBKimraonDOvfk4.png" alt="选择适合自己网站的配色方案"><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/02/GitAmFqSyNzVMvO.png" alt="下载需要收费，但是可以截图"></p></div></div></li><li><p><a href="https://icon.wuruihong.com/">图标工场-生成不同尺寸的图标图片</a></p><div class="note warning flat"><p>若是按照Butterfly文档的PWA配置教程，需要用到9种尺寸，分别是16、32、36、48、72、96、144、192、512。</p></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>图文教程</span></div> <div class="hide-content"><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/10/02/oGBbM2lf4RCa3yS.png" alt=""></p></div></div></li></ol></div><h1 id="访问速度优化"><a href="#访问速度优化" class="headerlink" title="访问速度优化"></a>访问速度优化</h1><div class="note primary flat"><ol><li>压缩图片资源<ul><li><a href="https://tinypng.com/">无损压缩-Tinypng</a>:无损压缩png，容量节省有限。</li><li><a href="https://github.com/meowtec/Imagine/releases">有损压缩-imagine</a>:有损压缩PNG、JPG，可以将PNG转为WEBP格式，进一步压缩图片大小。</li></ul></li><li><p>使用<a href="https://www.jsdelivr.com/?docs=gh">jsdelivr</a>给js、css文件提供免费CDN加速</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给自己的静态资源引用添加jsdelivr</span></span><br><span class="line"><span class="comment"># 组装方式</span></span><br><span class="line"><span class="comment"># 1. 不稳定版，需要部署后才能看到最新修改效果。适用于需要经常修改的资源</span></span><br><span class="line"><span class="string">https://cdn.jsdelivr.net/gh/github用户名/github仓库名/静态资源相对路径</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="string">https://cdn.jsdelivr.net/gh/Akilarlxh/Akilarlxh.github.io/css/customstyl.css</span></span><br><span class="line"><span class="comment"># 2. 稳定版，使用发布的版本号，保证静态资源稳定。适用于长期无需修改的资源</span></span><br><span class="line"><span class="string">https://cdn.jsdelivr.net/gh/github用户名/github仓库名@releases/静态资源相对路径</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="string">https://cdn.jsdelivr.net/gh/Akilarlxh/Akilarlxh.github.io@v2.1/js/vue.min.js</span></span><br></pre></td></tr></table></figure></li><li><p>使用<a href="https://github.com/GoogleChrome/lighthouse">lighthouse</a>评测网页性能并获取改进意见。</p></li></ol></div><h1 id="添加pjax"><a href="#添加pjax" class="headerlink" title="添加pjax"></a>添加pjax</h1><p>参考教程（适用于所有主题）：<div class="tag link"><a class="link-card" title="集成 Pjax 实现网站无刷新加载" href="https://liuyib.github.io/2019/09/24/use-pjax-to-your-site/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/liuyib/picBed@master/avatar.jpg"/></div><div class="right"><p class="text">集成 Pjax 实现网站无刷新加载</p><p class="url">https://liuyib.github.io/2019/09/24/use-pjax-to-your-site/</p></div></a></div><br>Pjax能够实现页面的局部刷新而非整体重载资源，在一定程度上能够减少网站反复加载重复资源，从而优化访问体验。</p><ol><li>博主目前使用的是Butterfly主题，而最新版Butterfly主题已经将该教程方案集成在主题中。<br>只需在主题配置文件中搜索pjax，将其enable参数设置为true即可。</li><li>重载第三方js<br>在魔改主题时，肯定会不可避免的添加一系列第三方js，此时就会遇到切换页面后，由于通过 Pjax切换的页面并没有完全刷新，浏览器不会将网页从头执行一遍，因此有些JS将不会生效。<br>得益于Butterfly已经将解决方案集成在<code>themes\butterfly\layout\includes\third-party\pjax.pug</code>文件下。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;script[data-pjax]&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).parent().append($(<span class="built_in">this</span>).remove())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>所以我们要做的事情十分简单，给这些js引入的位置添加<code>data-pjax</code>属性即可。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    # 首页电子钟</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/clock/css/clock.css&quot;/&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # 首页电子钟</span><br><span class="line">    - &lt;script src=&quot;/clock/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"><span class="deletion">-   - &lt;script src=&quot;/clock/js/clock.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+   - &lt;script data-pjax src=&quot;/clock/js/clock.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果不是在主题配置文件的inject中引入，而是通过在特定页面写入,可能不方便在标签处直接添加<code>data-pjax</code>属性,参考上述教程的解决方案。可以修改<code>themes\butterfly\layout\includes\third-party\pjax.pug</code>的内容。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-   $(&#x27;script[data-pjax]&#x27;).each(function () &#123;</span></span><br><span class="line"><span class="addition">+   $(&#x27;script[data-pjax], .pjax-reload script&#x27;).each(function () &#123;</span></span><br><span class="line">      $(this).parent().append($(this).remove())</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>然后将你需要重载的插件标签用<code>&lt;div class=&quot;pjax-reload&quot;&gt;&lt;/div&gt;</code>包裹起来。此处以<a href="https://botui.org/">butui.js</a>为例。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-   &lt;script src=&quot;/js/botui.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+   &lt;script data-pjax src=&quot;/js/botui.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+   &lt;div class=&quot;pjax-reload&quot;&gt;</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    bot_ui_ini()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"><span class="addition">+   &lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li>集成在插件中的js<br>可以参考以上方案去修改源码，但是对nodejs不了解的不建议这么做。可以考虑使用最新版Butterfly主题自带的pjax屏蔽设置。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  pjax:</span><br><span class="line"><span class="deletion">-   enable: false</span></span><br><span class="line">    enable: true</span><br><span class="line">    exclude:</span><br><span class="line"><span class="addition">+    - /artitalk/</span></span><br><span class="line"><span class="addition">+    - /about/</span></span><br><span class="line"># 此处填页面的相对路径。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">对本站的Hexo优化路线做了个归纳，理论上可以根据本帖教程复现本站效果。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Github Action实现全自动部署</title>
    <link href="https://akilar.top/posts/f752c86d/"/>
    <id>https://akilar.top/posts/f752c86d/</id>
    <published>2020-09-22T21:36:19.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-Action简介"><a href="#Github-Action简介" class="headerlink" title="Github Action简介"></a>Github Action简介</h1><p><a href="https://github.com/features/actions">Github Action</a>是 GitHub于2018年10月推出的一个CI\CD服务。<br><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>CI/CD解释</span></div>    <div class="hide-content"><div class="note info flat"><p>CI\CD 其实说的是三件事情：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。<br>因为「持续交付」和「持续部署」的英文缩写是一样的，所以这三件事情缩写成了 CI\CD 。</p></div></div></div><br>每次部署Hexo都需要运行指令三件套，随着文章越来越多，编译的时间也随之越来越长，通过Github Action，我们只需要在每次完成博客的编写或修改以后，将改动直接push到远程仓库，之后的编译部署的工作统统交给CI来完成即可，如果是看过<a href="/posts/54c08a4b/" title="Coding部署教程">Coding部署教程</a>的小伙伴，应该对这种持续部署的操作有所感触。</p><h1 id="Github-Action使用教程"><a href="#Github-Action使用教程" class="headerlink" title="Github Action使用教程"></a>Github Action使用教程</h1><h2 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h2><p>为了确保交由Github Action来持续部署时，Github Action具备足够的权限来进行<code>hexo deploy</code>操作,需要先获取Token，博主分别在Github、Gitee、Coding处部署了静态页面，所以也就需要获取这三处的Token。<br><div class="tabs" id="获取token"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#获取token-1">⚛️Github</button></li><li class="tab"><button type="button" data-href="#获取token-2">🕉️Gitee</button></li><li class="tab"><button type="button" data-href="#获取token-3">✡️Coding</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="获取token-1"><p>访问<a href="https://github.com/settings/tokens">Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens</a>-&gt;generate new token,创建的Token名称随意，但必须勾选repo项。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/PISlRDgrsBXzcLK.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/yF8cNUkmAJVBSuw.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8Github-action%E5%AE%9E%E7%8E%B0%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/20200923085908748.png" alt=""></p><div class="note warning flat"><p>token只会显示这一次，之后将无法查看，所以务必保证你已经记录下了Token。之后如果忘记了就只能重新生成重新配置了。</p></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="获取token-2"><p>访问<a href="https://gitee.com/profile/personal_access_tokens">Gitee-&gt;头像（右上角）-&gt;设置-&gt;私人令牌</a>-&gt;生成新令牌<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/voHjeENlQOpFA6n.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/X6x8Tz9bgO7HNRP.png" alt=""></p><div class="note warning flat"><p>Token只会显示这一次，之后将无法查看，所以务必保证你已经记录下了Token。之后如果忘记了就只能重新生成重新配置了。</p></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="获取token-3"><p>访问<a href="https://coding.net/">Coding</a>-&gt;头像（右上角）-&gt;个人账户设置-&gt;访问令牌-&gt;新建令牌。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/PMgKRDZAUyfktzp.png" alt=""></p><div class="note warning flat"><p>Coding的配置还需要用到令牌用户名</p></div><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/aF4dLUomY6NkunZ.png" alt=""></p><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/HW96S8wOIP7YJxt.png" alt=""></p><div class="note warning flat"><p>Token只会显示这一次，之后将无法查看，所以务必保证你已经记录下了Token。之后如果忘记了就只能重新生成重新配置了。</p></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="创建存放源码的私有仓库"><a href="#创建存放源码的私有仓库" class="headerlink" title="创建存放源码的私有仓库"></a>创建存放源码的私有仓库</h2><p>我们需要创建一个用来存放Hexo博客源码的仓库，这点在<a href="/posts/6ef63e2d/" title="Win10">Win10</a>的Hexo博客搭建教程中有提到。为了保持教程的连贯，此处再写一遍。<br> <img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/PZ7wmiuX8ae9rVK.png" alt=""><br>创建完成后，需要把博客的源码push到这里。首先获取远程仓库地址，此处虽然SSH和HTTPS均可，但是建议使用HTTPS。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/23/mpdUYJKcfWLQ2Eg.png" alt=""></p><h2 id="配置deploy项"><a href="#配置deploy项" class="headerlink" title="配置deploy项"></a>配置deploy项</h2><p>打开站点配置文件<code>~/Blog/_config.yml</code>,找到deploy项，使用之前生成的Token和各个站点仓库URL来组装地址。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">gitHub:</span> <span class="string">https://你的Github用户名:生成的Token@github.com/你的Github用户名/仓库名.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://你的Gitee用户名:生成的Token@gitee.com/你的Gitee用户名/仓库名</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://令牌用户名:生成的Token@e.coding.net/你的Coding用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure><br>例如我的配置（几处字符用问号代替权当加密了）<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://akilarlxh:1407????b9cfd????2676bc9??????c6502babf2@github.com/Akilarlxh/Akilarlxh.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://akilar:f57?????????108603a?????06b279bb@gitee.com/akilar/akilar.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://RD????ddMy:a4e4???????f8ce670dcb????1c4a2688cd????7@e.coding.net/akilar/akilar/akilar.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure></p><h2 id="配置Github-Action"><a href="#配置Github-Action" class="headerlink" title="配置Github Action"></a>配置Github Action</h2><div class="tabs" id="github-action配置"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#github-action配置-1">⚓常规配置，适合初学者</button></li><li class="tab"><button type="button" data-href="#github-action配置-2">💫拓展：Gitee自动部署脚本配置&其余需要指令支持的拓展插件的配置</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="github-action配置-1"><p>在站点根目录新建<code>.github</code>文件夹,注意开头是有个<code>.</code>的。然后在<code>.github</code>内新建<code>workflows</code>文件夹，再在<code>workflows</code>文件夹内新建<code>autodeploy.yml</code>,在<code>Blog/.github/workflows/autodeploy.yml</code>里面输入<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">博客静态文件仓库地址</span> <span class="string">.deploy_git</span> <span class="comment"># clone 静态文件仓库，防止 Hexo 推送时覆盖整个静态文件仓库，只推送有更改的文件</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github-action配置-2"><div class="note info flat"><p>这里主要在于配置上文的安装依赖和生成静态文件，如果还安装了其他的需要在部署前输入相应指令的也可以按照这个思路来修改。<br>同时，此处还涉及到<code>Gitee的自动部署</code>，<strong>即使不开通Gitee pages pro，也可以完成自动更新</strong>。<br>详情可以访问<a href="https://blog.zykjofficial.top/posts/ea8e8e59/">卓越科技-使用Github Actions 自动部署博客</a><br>插件配置教程则是参考以下文档</p><ol><li><a href="https://github.com/HCLonely/hexo-bilibili-bangumi">hexo-bilibili-bangumi</a>，使用该插件若是无效，请检查你的B站追番信息是否是公开的，在个人空间处设置。</li><li><a href="https://demo.jerryc.me/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE">Butterfly文档-gulp压缩</a></li><li><a href="https://github.com/yanglbme/gitee-pages-action">Gitee Pages Action</a></li></ol></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">gulp-cli</span> <span class="string">-g</span> <span class="comment">#全局安装gulp</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">bangumi</span> <span class="string">-u</span> <span class="comment">#bilibili番剧更新</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;我的用户名&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;我的邮箱&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">博客静态文件仓库地址</span> <span class="string">.deploy_git</span> <span class="comment"># clone 静态文件仓库，防止 Hexo 推送时覆盖整个静态文件仓库，只推送有更改的文件</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">同步到</span> <span class="string">Gitee</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 注意在github私有仓库的Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">&quot;git@github.com:xxx/xxx.github.io.git&quot;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">&quot;git@gitee.com:xxx/xxx.git&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">xxx</span></span><br><span class="line">          <span class="comment"># 注意在在github私有仓库的Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">xxx/xxx</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8Github-action%E5%AE%9E%E7%8E%B0%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/20200923101556168.png" alt=""></p><p>这里的<strong>GITEE_RSA_PRIVATE_KEY</strong>指你的个人密钥，在配置SSH-KEY时，我们用来与Github绑定的是公钥，而私钥存放在（以win10为例）<code>C:\Users\userneme\.ssh\id_rsa</code>文件内，内容格式类似于下方代码，使用时将包括<code>-----BEGIN RSA PRIVATE KEY-----</code>和<code>-----END RSA PRIVATE KEY-----</code>在内的全部内容都存放到变量值里。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEogIBAAKCAQEApM/T7rRtc9sNcd7NNZHMOZU7e7322leY5JauIxJEgQYpdrfO</span><br><span class="line">vQB9PPpeMudAyCvAlaM?????????XO21G7RNejl4dLEflBh68TB93DlK/k/3KizMf</span><br><span class="line">jewpXU3HHpFSSyiIA7Mi8ur39ybbG4oWEHI/Mnjq?????????e5oiVvYNux2</span><br><span class="line">TazhAoGAL8h8XrB0t????????????????W2Ul4AomH1mu+rtIz2sQZdREVL4</span><br><span class="line">dskwWvzoGOyNBPreLXWHBY6fg34dhNaZvNDZPGGd3bK6arMRdzrAynQio0CE0zwm</span><br><span class="line">zJEo1tpUvqujmYMRnM1+jYHOPqU5sIvnEy5xovAzECPUSUs43Ag=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><div class="note warning flat"><p>可能遇到的bug：</p><ol><li>Gitee用github action自动部署更新收到短信，提示异地登录需要验证码。</li></ol><p>因为github action使用的是美国的服务器，所以，使用github action来远程更新gitee的站点部署时，会收到异地登陆的短信，提示需要验证码。这个在脚本作者的issues里有相应的解决方案:<a href="https://github.com/yanglbme/gitee-pages-action/issues/6">登陆失败 #6</a></p><ul><li>在微信上搜索Gitee微信公众号，在微信公众号内绑定自己的Gitee账号，这样虽然还是会有异地登录提示，但是发过来的消息不再需要填写验证码，而且提醒若不是你在操作，请及时修改密码。（某种意义上就是我在操作，所以我选择不改密码2333）</li><li>使用VPN，通过美国IP登录一次Gitee。(一般第一步就能把问题解决了，用不到第二步。)</li></ul><ol><li>Gitee部署失败<br>脚本的原理是用程序代替人工去点击Gitee Pages的更新按钮。所以需要你先手动做一次页面部署，确保有那个更新按钮在，脚本才有生效的前提。</li></ol></div><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="重新设置远程仓库和分支"><a href="#重新设置远程仓库和分支" class="headerlink" title="重新设置远程仓库和分支"></a>重新设置远程仓库和分支</h2><p>在博客根目录启动终端，使用git指令重设仓库地址。这样在新建仓库，我们仍旧可以保留珍贵的commit history，便于版本回滚。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin <span class="comment"># 删除原有仓库链接</span></span><br><span class="line">git remote add origin [url] <span class="comment">#url为新的存放源码的github仓库</span></span><br><span class="line">git checkout -b master <span class="comment"># 切换到master分支，</span></span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"><span class="comment"># 如果不是，后面的所有设置的分支记得保持一致</span></span><br><span class="line"><span class="comment"># 2020年10月以后，新建仓库的默认分支换成main</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure></p><h2 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h2><p>此时，打开GIthub存放源码的私有仓库，找到action。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="http://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8Github-action%E5%AE%9E%E7%8E%B0%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/20200923095030252.png" alt=""><br>根据刚刚的Commit记录找到相应的任务<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="http://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8Github-action%E5%AE%9E%E7%8E%B0%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/20200923095125814.png" alt=""><br>点击Deploy查看部署情况<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="http://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BD%BF%E7%94%A8Github-action%E5%AE%9E%E7%8E%B0%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/20200923095219663.png" alt=""><br>若全部打钩，恭喜你，你现在可以享受自动部署的快感了。</p><h2 id="发散思维"><a href="#发散思维" class="headerlink" title="发散思维"></a>发散思维</h2><div class="note success flat"><p>Github action只要监测到master分支有所变动就会启动部署，那么顺着这个思路，手机用户可以在网页Github进行小幅修改，例如修改错别字，调整布局之类的。保存后也会启动Github action，从而将内容部署到网页上去。</p><div class="note warning flat"><p>2020年10月后github新建仓库默认分支改为main，注意更改</p></div></div><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><div class="note info flat"><ol><li><a href="https://blog.zykjofficial.top/posts/ea8e8e59/">卓越科技-使用Github Actions 自动部署博客</a></li><li><a href="https://blog.flesx.cn/posts/17931.html">flexiston-GitHub Actions自动部署Hexo博客+Gulp压缩</a></li></ol></div><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><div class="note primary flat"><ol><li><a href="#">Post not found: 使用Vercel来加速Hexo博客</a></li><li><a href="/posts/54c08a4b/" title="使用Coding和Github来实现双线部署">使用Coding和Github来实现双线部署</a></li><li><a href="/posts/6ff8c001/" title="使用Gitee提供镜像站支持">使用Gitee提供镜像站支持</a></li></ol></div>]]></content>
    
    
    <summary type="html">通过使用Github Action，将部署的步骤交给云端完成，每次只需Push即可坐等网站部署完毕。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>使用Gitee提供镜像站支持</title>
    <link href="https://akilar.top/posts/6ff8c001/"/>
    <id>https://akilar.top/posts/6ff8c001/</id>
    <published>2020-09-22T20:52:04.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitee简介"><a href="#Gitee简介" class="headerlink" title="Gitee简介"></a>Gitee简介</h1><p>与github一样，<a href="https://gitee.com/">Gitee</a>也是一个基于 Git 的代码托管服务站。而且与github的联动非常好，可以直接通过Gitee导入Github的仓库，然后使用Gitee的仓库来git clone项目，之后再重新设置远程仓库链接，将修改push到Github上。下次又需要git clone的时候，只要确定Gitee的仓库拉取了最新修改即可。这也是我一度将Gitee称之为工具人的原因。<br><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>博主的恶趣味，工具人Gitee实锤</span></div>    <div class="hide-content"><h1 id="工具人Gitee的闭环操作"><a href="#工具人Gitee的闭环操作" class="headerlink" title="工具人Gitee的闭环操作"></a>工具人Gitee的闭环操作</h1><p>这条适用于所有被从Github上使用git clone以后极慢的速度困扰的朋友。</p><ol><li><p>注册：首先肯定需要注册一个<a href="https://gitee.com/">Gitee</a>的账号,这里我们要注意一下，账号名关系到镜像站的二级域名，也即是username.gitee.io,这点与Github page极为相似。所以记得保证用户名和个人空间网址保持一致。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/SEFokKiNDyaUJvf.png" alt=""></p></li><li><p>导入Github项目到Gitee：之后我们可以在右上角找到从Github/GitLab导入仓库的选项<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/3EfbBUtPWrFHMng.png" alt=""><br>支持使用Github仓库的URL（git clone 后面挂的那个）导入，如果绑定了Github账号或者GitLab账号，也可以直接导入你在Github已有的项目。</p></li><li><p>导入仓库之后，直接使用git clone+Gitee仓库的URL就可以了，这个方法和Github并无不同。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/QupnEsPo4CwL58x.png" alt=""></p></li><li><p>git clone下来项目以后，需要重设项目远程仓库地址。</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin github仓库URL</span><br></pre></td></tr></table></figure><p>之后照常使用git push指令即可。配合Gitee的仓库刷新，下次还是从Gitee那里clone，工具人就是这么好用。</p></div></div></p><h1 id="将Hexo部署到Gitee上"><a href="#将Hexo部署到Gitee上" class="headerlink" title="将Hexo部署到Gitee上"></a>将Hexo部署到Gitee上</h1><ol><li><p>首先需要在Gitee新建一个仓库来存放博客的静态页面资源，仓库名和你的用户名一样，比如我的用户名是Akilar，那么就建一个叫做Akilar的仓库，<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/DC5ftKWvAg2847o.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/1EJbSAG2dXsBi6Q.png" alt=""></p></li><li><p>然后在站点配置文件<code>~/Blog/_config.yml</code>的deploy配置项添加Gitee的仓库URL。此处建议所有的Deploy链接都使用HTTPS链接，便于之后在<a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a>时的Token配置。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/jm4cv5DRHnx6Vzt.png" alt=""></p></li><li><p>运行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>即可将静态页面部署到仓库内。<br>之后还需要在Gitee的仓库内找到Gitee pages，选择存放静态页面的分支和目录之后（一般都是默认的<code>master</code>和<code>/</code>目录吧),点击部署，等待部署完成后即可使用<a href="https://username.gitee.io访问了。">https://username.gitee.io访问了。</a></p><div class="note warning flat"><p>2020年10月后github新建仓库默认分支改为main，gitee如果是clone过来的也可能把分支结构带过来。注意留意更改。</p></div><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/22/qtBQRjlE6WukU4L.png" alt=""></p></li></ol><p>值得注意的是，Gitee现在已经不提供Gitee Pages Pro服务，就算想花钱也没法开通，也就无法自动部署，需要手动点击更新。不过配合<a href="/posts/f752c86d/" title="Github-action以及相应的脚本">Github-action以及相应的脚本</a>，我们依然可以实现自动更新Gitee pages。</p><ol><li>由此，可以将这个<a href="https://username.gitee.io作为国内镜像站来使用。~~（结果还是工具人啊）~~">https://username.gitee.io作为国内镜像站来使用。~~（结果还是工具人啊）~~</a></li></ol><h1 id="编写技巧"><a href="#编写技巧" class="headerlink" title="编写技巧"></a>编写技巧</h1><p>因为现在有了多线部署的需求，再加上还有Gitee这个无法自定义域名的镜像站，所以对于站内文章，我们要尽量避免使用原来的永久链接，改用站内文章引用的方式来写。<br>Hexo自带站内引用文章链接的tags，<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link [post_</span>name(不需要.md后缀)] [post<span class="emphasis">_title(可选，若不写会使用post_</span>name作为链接的名称)] %&#125;</span><br><span class="line"><span class="section"># 示例：</span></span><br><span class="line"> &#123;% post<span class="emphasis">_link 使用Gitee来提供镜像站支持 Gitee工具人 %&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><div class="note primary flat"><ol><li><a href="#">Post not found: 使用Vercel来加速Hexo博客</a></li><li><a href="/posts/54c08a4b/" title="使用Coding和Github来实现双线部署">使用Coding和Github来实现双线部署</a></li><li><a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a></li></ol></div>]]></content>
    
    
    <summary type="html">Gitee page不再提供自定义域名功能，但是单纯作为一个静态网站的托管仓库还是很合适的，国内访问的速度非常快。缺点是需要手动更新。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>使用Coding和Github来实现双线部署</title>
    <link href="https://akilar.top/posts/54c08a4b/"/>
    <id>https://akilar.top/posts/54c08a4b/</id>
    <published>2020-09-21T11:00:05.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Coding简介"><a href="#Coding简介" class="headerlink" title="Coding简介"></a>Coding简介</h1><p><a href="https://coding.net/">Coding</a>是一个类似于Github的一站式软件研发协作管理平台，有必要说明的是，新版Coding现已经被腾讯云收购，静态页面的部署依赖于腾讯云的对象存储功能，虽然对于新用户会提供几个月的免费流量包，但是之后就会<strong>开始收费</strong>。<br>就我个人观点来说，收费的至少存在契约关系，毕竟腾讯的东西，只要充钱就能解决问题这点还是有口皆碑的。不过按照大佬们的说法，这种收费机制是存在隐患的。如果遇上仇家或者闲得慌的，写个python脚本多线程访问来刷你的流量，一个月饭钱可能一下子就付诸流水了。另外，Coding的自定义域名以及静态网页部署都需要在腾讯云进行实名认证，需要准备好微信和身份证，微信还需要绑定过银行卡。<br>所以，如果你有了足够的心理准备，请继续看以下详细内容。</p><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><ol><li>首先是Coding的注册，访问<a href="https://coding.net/">Coding官网</a>，按照要求逐步完成<strong>团队注册和实名认证</strong>。记住，团队注册以后你的账号本身就是团队所有者的身份，所以在之后跳出的邀请成员那页就淡定的按ESC退出邀请即可，没必要再添加一个成员账号。</li><li>完成注册和实名后，进入工作台，选择项目，新建一个项目，项目类型选择DevOps，DevOps支持静态网页持续部署。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/GJUcmPZiKofnF6y.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/sruiohVIm7QxNgd.png" alt=""><br>新版Coding没有旧版那么多的限制，仓库名和最后的域名没有任何关联，因此命名可以随意。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/e8nT5GrAN4OJqCH.png" alt=""></li><li>完成项目创建以后，还要再这个项目内创建一个代码仓库，用来存储我们的静态页面。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/FEAuCVqRNBwSe1Z.png" alt=""><br>仓库名称可以随意，但是必须记得勾选公开源代码，因为博客终归是要公开给别人看的。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/EQJItNyXA18h3s2.png" alt=""></li><li>之后我们就能获取仓库地址了，</li></ol><ul><li><p>可以用HTTP链接，比如我是<br><a href="https://e.coding.net/akilar/hexo-blog/Hexo.git">https://e.coding.net/akilar/hexo-blog/Hexo.git</a></p></li><li><p>也可以用ssh，在那之前得在coding的头像（右上角）-&gt;个人账户设置-&gt;ssh公钥-&gt;新增公钥。ssh公钥用Github配置时用到的即可。<br>你甚至可以给你所有的设备共用同一个ssh公钥，只要它们本地有相应的id_rsa（私钥）和id_rsa.pub（公钥）。<br>打开git bash或者任意终端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;akilarlxh&quot;</span> <span class="comment"># 记得替换用户名为自己的</span></span><br><span class="line">git config --global user.email <span class="string">&quot;akilarlxh@gmail.com&quot;</span> <span class="comment"># 记得替换邮箱为自己的</span></span><br><span class="line">ssh-keygen -t rsa -C akilarlxh@gmail.com <span class="comment"># 记得替换邮箱为自己的</span></span><br><span class="line">less ~/.ssh/id_rsa.pub <span class="comment"># 复制后可按 Ctrl+D 返回</span></span><br></pre></td></tr></table></figure><div class="note warnig flat"><p>我不推荐使用SSH链接部署，因为用ssh部署偶尔会遇到端口被占用的情况导致部署失败。这不利于我们之后使用<a href="/posts/f752c86d/" title="Gtihub Action">Gtihub Action</a>实现全自动部署。</p></div></li></ul><ol><li><p>打开Hexo站点配置文件<code>_config.yml</code>,找到<code>deploy</code>，按照下图格式填入你的代码仓库地址。注意缩进和“<code>:</code>”后面的空格。此处建议<strong>所有的Deploy链接都使用HTTPS链接</strong>，便于之后在<a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a>的Token配置。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/7sbCitoPkdu5fwg.png" alt=""></p></li><li><p>之后运行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>三件套即可将页面部署在代码仓库内。</p></li><li><p>然后到项目里选择持续部署-&gt;静态网站，会提示需要实名认证才能使用静态网站。</p></li></ol><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/LnJ17ZIPE2usSpm.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/YankFU3Px8WHeDh.png" alt=""><br>网站名称随意，网站类型<strong>选择静态网站，不要选择Hexo</strong>，如果选择Hexo，那你应该使用博客源码来编译，但是依然有bug，它会提示站点配置文件_config.yml丢失，所以，<strong>网站类型不要选择Hexo</strong>。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/JuwnlBO3V29yYrU.png" alt=""></p><ol><li><p>之后博客会开始自动部署<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/htKYJjw6NLvlueC.png" alt=""><br>完成后就能通过自动生成的那个长的要死的域名来访问生成的博客网站了。因为新版coding是把静态页面部署在腾讯云的对象存储上的，存储桶的默认名总会很长，而且对象存储是<strong>按流量计费</strong>的，白嫖的同学大概只能享受6个月的免费流量包。之后<strong>将会收费</strong>。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/AK28pGDXU1Jvm9W.png" alt=""></p></li><li><p>绑定自定义域名<br>绑定自定义域名需要开启腾讯云的CDN服务，这点请放心大胆的开，<strong>只要开通以后不要去用腾讯云的CDN加速就不会产生CDN流量费</strong>。<br>开通CDN以后即可自定义域名。输入自定义域名，去dnspod上添加相应的解析记录。腾讯云会自动帮你申请SSL证书，如果之前的各种认证模板都已经审核通过的话，大概10分钟左右就能下发证书。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/apnBgie3KLyhJVl.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/n3se4uXl2AcqOBa.png" alt="添加示例"></p></li><li><p>之后我们给域名解析添加线路分类，将Github相关的线路配置为境外，Coding的线路配置为默认或者境内。至此，整个双线部署的过程就算完成了。</p></li></ol><h1 id="可能遇到的bug"><a href="#可能遇到的bug" class="headerlink" title="可能遇到的bug"></a>可能遇到的bug</h1><div class="note warning flat"><ol><li>双线部署完成后无法通过域名访问</li></ol><ul><li>域名解析生效需要时间，大约十分钟。</li></ul><ol><li>域名健康监测提示301或308</li></ol><ul><li>这是当然的，因为域名后面的链接原本应该是到username.github.io的，现在被重定向到coding去了啊。</li></ul><ol><li>手机可以访问网站，电脑却打不开</li></ol><ul><li>电脑的DNS解析和手机的DNS解析是不同的，手机一般是使用的服务商的DNS解析，电脑则是本地默认的。<br>有两种解决方案。</li><li>直接参考这篇教程：<a href="/posts/61b3e163/" title="访问github或部署在gitpage上的网站过慢的解决方案">访问github或部署在gitpage上的网站过慢的解决方案</a>，通过修改hosts来解决。</li><li>Win10用户可以打开设置-&gt;网络和Internet-&gt;更改适配器选项，选择当前网络，右键属性，找到Internet协议版本4（TCP/IPv4），设置自动获得IP地址，并将DNS设置为<strong>223.5.5.5 和 223.6.6.6</strong>（此处使用的是阿里的DNS，也可以自行百度一下<a href="https://baidu.wr0926.ml/?q=6Z2g6LCx55qERE5T5pyN5Yqh5ZWG">靠谱的DNS服务商</a>）。</li></ul></div><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><div class="note primary flat"><ol><li><a href="#">Post not found: 使用Vercel来加速Hexo博客</a></li><li><a href="#">Post not found: 使用Gitee来提供镜像站支持</a></li><li><a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a></li></ol></div>]]></content>
    
    
    <summary type="html">只靠Github和Vercel的速度还是有些捉襟见肘，因此再增加一条Coding来为国内访问节点提供线路。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>使用Vercel来加速Hexo博客</title>
    <link href="https://akilar.top/posts/812734f8/"/>
    <id>https://akilar.top/posts/812734f8/</id>
    <published>2020-09-21T09:18:16.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vercel简介"><a href="#Vercel简介" class="headerlink" title="Vercel简介"></a>Vercel简介</h1><p>Vercel提供免费的serverless和全局CDN服务，使用者只需要通过几步简单的注册以及导入仓库即可完成部署，从个人体验来看，Vercel现已支持根据username.github.io的master分支是否变动来启动自动部署。<br><div class="note warning flat"><p>2020年10月后github新建仓库默认分支改为main，注意更改。</p></div></p><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><ol><li><p>访问<a href="https://vercel.com/">Vercel官网</a>，点击右上角的sign up进行注册<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/ZE6fCxIUJ7GLAeO.png" alt=""></p></li><li><p>注册完成后选择新建一个项目<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/QHS5IuBfa4vwhFP.png" alt=""></p></li><li><p>填入你在Github上部署静态页面的地址，例如我是<br><strong><a href="https://github.com/Akilarlxh/Akilarlxh.github.io">https://github.com/Akilarlxh/Akilarlxh.github.io</a></strong>，注意这里末尾不要画蛇添足加<code>.git</code>。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/uXmO1Jwpo6gdGKa.png" alt=""><br>此时可能会提示这是否是你的仓库。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/6LY7QrE54IboU3W.png" alt=""><br>如果是就大胆选yes，如果是别人的仓库，那就选No，Vercel会自动帮你fork这个仓库到你的Github账号里。</p></li><li><p>导入静态页面仓库之前，需要为你的Github安装Vercel，此处建议选择All repositories，意为为所有仓库安装，当然，你也可以选择只为当前仓库安装，也就是Only select repositories。</p><div class="note warning flat"><p>如果哪天反悔了，可以在<a href="https://github.com/settings/installations">github-&gt;头像(右上角)-&gt;settings-&gt;Applications（列表下数上第四个）-&gt;</a>Installed Github Apps里修改。</p></div><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/U9TJuLpoqbvatVj.png" alt=""></p></li><li><p>之后会识别出你的静态页面，单击Continue<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/ZFkc675SjyvsRLh.png" alt=""><br>Vercel的PROJECT NAME可以自定义，不用太过在意，但是之后不支持修改，若要改名，只能删除PROJECT以后重建一个了。<br>下方三个选项保持默认就好，因为username.github.io的master分支内是本身就已经部署好的静态页面，所以没必要选择特定的框架去再次编译。（博主也试过用源码交给他自动编译部署，但是各种bug，所以不建议，想要自动部署可以使用<a href="/posts/54c08a4b/" title="Github Action">Github Action</a>来实现。）</p><div class="note warning flat"><p>2020年10月后github新建仓库默认分支改为main，注意更改。</p></div><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/8Kg67bw2edr5HYD.png" alt=""></p></li><li><p>到此时，Vercel的部署其实就已经完成了，可以使用Vercel提供的默认域名来访问静态页面，比Github的原网站要快许多。</p></li><li><p>相必到了这步一定不会甘心于默认域名，所以可以在<code>project-&gt;settings-&gt;domains</code>里配置自定义域名，填入自定义域名以后还要根据Vercel提供的解析记录去自己的域名DNS解析处添加相应解析。以及替换域名解析的DNS服务器（视供应商不同，生效时间可能长达48小时）。这里Vercel的线路建议选择为电信。因为Vercel在电信的表现良好，联通和移动就一般般了。之后可以考虑在将移动联通的线路设到Coding那边去。关于双线部署的内容可以参考：<a href="/posts/54c08a4b/" title="使用Coding和Github来实现双线部署">使用Coding和Github来实现双线部署</a><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/HYtvzpLrDN9u2sc.png" alt="找到添加域名页"><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/pxHKCYGTEiSwdAV.png" alt="添加解析记录"><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/XAEfIyoz4k7qu8T.png" alt="在DNSPOD添加解析记录"><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/21/Iwz2Lky9nq4JgA5.png" alt="替换DNS服务器供应商"></p></li><li><p>至此，Vercel的配置就完成了。可以关闭DNSPOD上指向username.github.io的解析记录了。</p></li></ol><h1 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h1><div class="note primary flat"><h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><ol><li><a href="https://blog.flesx.cn/posts/43359.html">flexiston-使用Vercel加速Hexo博客</a></li></ol></div><div class="note primary flat"><h2 id="拓展内容："><a href="#拓展内容：" class="headerlink" title="拓展内容："></a>拓展内容：</h2><ol><li><a href="/posts/54c08a4b/" title="使用Coding和Github来实现双线部署">使用Coding和Github来实现双线部署</a></li><li><a href="#">Post not found: 使用Gitee来提供镜像站支持</a></li><li><a href="/posts/f752c86d/" title="使用Github Action实现全自动部署">使用Github Action实现全自动部署</a></li></ol></div>]]></content>
    
    
    <summary type="html">github在国内的速度差强人意，能访问但是很慢，可以使用Vercel来加速,配合coding进行双线部署，提供多线路访问渠道，能够有效改善访问慢的情况。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>诗词：王者荣耀角色诗集</title>
    <link href="https://akilar.top/posts/d0e2e2d1/"/>
    <id>https://akilar.top/posts/d0e2e2d1/</id>
    <published>2020-09-13T21:57:50.000Z</published>
    <updated>2020-10-24T13:59:30.383Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>本文所涉及的人物为游戏、小说、正史、野史杂糅，对于历史的学习没有多少参考价值。诗词也就是是对个格式，韵脚踩不踩的上全部随缘。各位看官就当打油诗看看。权当图一乐，千万别当真。</p></div><center class="poem"><b><h1>满江红·易季为邦</h1><p>醉吟春秋，且笑我，千秋功过。<br>谁凭案，昔年往事，故纸陈说。<br>会有十四而举鼎，奈何虞兮别江头。<br>转回首，大丈夫如斯，也风流！</p><p>一二子，竞嘲犹；三四者，连声诟。<br>吾季此，兀自同哙饮酒。<br>楚歌四面不绝耳，白蛇赤血未断流。<br>黄口儿，莫当泗水处，唯亭长！</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/YMhE7NwZGlkBmOX.jpg" alt=""></p><p><hr><br><center class="poem"><b><h1>将进酒·侠隐无声剑无形</h1><p>君不见，紫气乘风自东至，仙人一剑寒九洲。<br>君不见，寒意横空山无峭，世间可有烂柯人？<br>金戈铁马诗中过，刀光剑影指尖留。<br>九五之尊如何若，三尺之剑不折身！<br>雏凤枝头餐霞雾，卧龙潭底饮雷鸣。<br>黑白刃，青红灵，扶风柳，烟波亭。<br>邀月弄清影，星月寒萧锋镝音。<br>我有沟壑胸中卧，我有豪情意难平。<br>长弓泣血千军破，侠隐无声剑无形。<br>神来之笔苍生断，且将进酒杯莫停。<br>青莲剑歌千秋在，侠客千里不留行。<br>千年狐，凤凰鸣，<br>锋芒毕露有轻吟，直取西北天狼星！</p></center></p><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/wItFhO28vBCscAX.png" alt=""></p><p><hr><br><center class="poem"><b><h1>满江红·问雌雄</h1><p>兵祸乍然，停机杼、披挂金护。<br>八百里，红颜铁甲，沙场翩舞。<br>刀光剑影英姿飒，千古风流巾帼书。<br>再言犹，谁人道女子，不如男？</p><p>功卓著，执金吾；将临首，拒尚书。<br>还乡梓，对镜又把红妆梳。<br>武可谈笑金戈快，柔可执酒为君沽。<br>且教你，双兔傍地走，雌雄赋！</p></center></p><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/RD8JZxCY2tG4OpM.png" alt=""></p><hr><center class="poem"><b><h1>浪淘沙·楚霸王</h1><p>一江东归去。笑傲平生。<br>十四扛鼎力惊神。<br>烟雨婆娑虞美人，好逑无生。<br>乌骓长嘶啼，征程踏遍，<br>破釜沉舟巨鹿沉。<br>四面楚歌瑟瑟尔，苍天不仁！</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/cHMT7zLqYGBSyFO.png" alt=""></p><hr><center class="poem"><b><h1>八声甘州·笼中雀</h1><p>花翩翩不语君勿牵，妾本阁中鹊。<br>青丝系思弦，谓缘心结，奈何谦谦。<br>珠隐红妆难辨，我为谁人愿？<br>风华绝代舞，尽是昔年。<br>高楼独上无言，烽火对硝烟，乱世佳妍。<br>伊人泪憔悴，万事终随仙。<br>慕将军疆场塞外，别几回、君可在对岸？<br>风恋晚，霜烟袅袅，何日归函？</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/Qpn3Erda7BNe6m9.png" alt=""></p><hr><center class="poem"><b><h1>永遇乐·兵仙奈何问萧何</h1><p>国士轻狂，数千古风流世无双。<br>旌旗帷幄，武克霸王，文可比范张。<br>背水一战，楚歌四面，千军剑指乌江。<br>问昔年，胯下之辱？霎那一笑寒光。<br>明修栈道，暗渡陈仓，胸中自有文章。<br>萧何莫叹，鸟尽弓藏，又有何妨？<br>纵横经纬，马革魂殇，但求国祚绵长。<br>曾记否？一战千里，枯骨成霜。</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/7yNkjrlXJSqAVH1.png" alt=""></p><hr><center class="poem"><b><h1>水调歌头·卧龙</h1><p>先生庐间坐，杯盏与君酌。<br>隆中谈笑分说，三分势在握。<br>纵横山河如棋，羽扇轻摇弈博，纶巾戏金槊。<br>不见卧龙影，空余龙潭卧。<br>战群儒，并蜀吴，何其阔！<br>运筹帷幄，雾隐澜沧任弦拨。<br>三请三戏周瑜，七擒七纵孟获，空城司马挫。<br>烽火连舟锁，高唱东风破！</p></center><center class="poem"><b><h1>破阵子·东风破</h1><p>结庐自在莫若，隆中乾坤定夺。<br>三分天下兴亡事，六出岐山长恨音。<br>羽扇复纶巾。<br>策谋胸中帷幄，八阵一指成郭。<br>东风破袭三千里，与君一盏赤壁灼。<br>七星灯未朔。</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/8GejwiLYsnJZbDA.png" alt=""></p><hr><center class="poem"><b><h1>念奴娇·初嫁了</h1><p>赤壁江畔，闺阁伫、星眸飘渺两顾。<br>长亭西厢，铜雀台、佳人未见曾梳。<br>乱世风云，豪杰魂素，我在亭阁户。<br>一帆远去，愿君凯旋而蹴！<br>也忆红颜昔年，红妆难掩愫，半遮半露。<br>朱唇芳启，周公瑾、亦是那般倾慕。<br>烽火连舟，枭雄又何如、皆我君负。<br>且为都督，绝代风华扇舞！</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/Rx5aVpFPolQThJC.png" alt=""></p><hr><center class="poem"><b><h1>鹧鸪天·问鬼神</h1><p>神机百断千愁案，成竹妙算万般难。<br>新愁旧绪连珠乱，枯骨言休缄默寒。<br>长安久，君王换。将军令曲终弹断。<br>何妨投笔从容判，问声元芳如何看？</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/Jjvd4nGUx5AZH8T.png" alt=""></p><hr><center class="poem"><b><h1>如梦令·忘归</h1><p>闲庭兰溪信步，<br>悠游恰忘归途。<br>似有芝华梦，<br>又引一川幽麓。<br>倾慕，倾慕，<br>北溟沧沧蝶宿。</p></center><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/14/uDE9njeFI5pGfoM.png" alt=""></p>]]></content>
    
    
    <summary type="html">大一时做的一个挑战，根据评论的王者荣耀英雄角色和词牌名写一首角色词，对写的诗词做一下集锦。</summary>
    
    
    
    <category term="🍰Akilarの太妃糖" scheme="https://akilar.top/categories/%F0%9F%8D%B0Akilar%E3%81%AE%E5%A4%AA%E5%A6%83%E7%B3%96/"/>
    
    
    <category term="🔖诗词" scheme="https://akilar.top/tags/%F0%9F%94%96%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>诗词：山鬼辞</title>
    <link href="https://akilar.top/posts/5c4ffad4/"/>
    <id>https://akilar.top/posts/5c4ffad4/</id>
    <published>2020-09-12T01:01:17.000Z</published>
    <updated>2020-10-24T13:59:30.383Z</updated>
    
    <content type="html"><![CDATA[<center class="poem"><b><h1>山鬼辞</h1><p>君不见，武穆风骨凭栏望，当关一夫封居胥。<br>君不见，孔孟诗书传千世，圣人一言澈九州。<br>行文采撷颜如玉，墨香摇曳黄金屋。<br>会有蜀道艰苛路，十年寒窗三秋雾。<br>亦有阳关通天途，朝着凄雨暮华服！<br>侠客行，骚人吟，聊斋赋，游子情。<br>付与酒一壶，王侯将相一抔土。<br>亭台楼阁今安在？歌舞升平复曾枯。<br>红楼不在潇湘畔，洛神已是惊鸿赋。<br>绿蚁新醅红泥炉，何人不是百年渡？<br>添一盏烛青灯古，销一页纸荒唐书。<br>君莫笑，卧沙骨，<br>只恨不是书中人，魑魅魍魉魁魈无！</p></center><p><hr><br><div class="note info flat"><center>这首诗作成于2018年3月16日，原本只想着题目为《千秋书》的，之后又想用《无题》的，但是都觉得不妥，直到今天才算敲定。古往今来千秋功过，书里书外是非对错，与人言无趣，不妨说与山鬼听。</center></div></p>]]></content>
    
    
    <summary type="html">这首诗作成于2018年3月16日，原本只想着题目为《千秋书》的，之后又想用《无题》的，但是都觉得不妥，直到今天才算敲定。古往今来千秋功过，书里书外是非对错，与人言无趣，不妨说与山鬼听。</summary>
    
    
    
    <category term="🍰Akilarの太妃糖" scheme="https://akilar.top/categories/%F0%9F%8D%B0Akilar%E3%81%AE%E5%A4%AA%E5%A6%83%E7%B3%96/"/>
    
    
    <category term="🔖诗词" scheme="https://akilar.top/tags/%F0%9F%94%96%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>基于NDM和TamperMonkey脚本实现高速下载</title>
    <link href="https://akilar.top/posts/e332c532/"/>
    <id>https://akilar.top/posts/e332c532/</id>
    <published>2020-08-23T21:23:31.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>本意是想着在pandownload失效以后，寻找一种新的办法来增加百度网盘下载速度，但是尝试过后，发现效果比预想的还要好，几乎对任何链接都能提供下载。所以特地整理成教程。希望能够帮到那些被龟爬的下载速度折磨的欲仙欲死的人们。教程非常简单，纯粹是安装几个软件就能解决的事情，不涉及任何代码操作，所以就不放图片教程了。</p><h1 id="NDM"><a href="#NDM" class="headerlink" title="NDM"></a><a href="https://www.neatdownloadmanager.com/index.php/en/">NDM</a></h1><p>全称是NeatDownloadManager，感觉上就是模仿IDM的一个下载软件，比IDM还要简洁，简洁到了简陋的地步，优点是完全免费，缺点是不支持BT和磁力链接，但是理论上可以先用磁力链接离线下载到百度网盘上，再用本帖教程所说的方法去下载。NDM直接访问官网下载安装即可。如果有经济能力其实更推荐买个永久版的IDM。<br>为了能够在浏览器上使用它的下载功能，还需要安装NDM的浏览器插件，软件自带Chrome和Firefox的插件链接，如果是Edge用户可能暂时还没法在应用市场搜到，虽然chrome的插件包能够在一定程度上通用，考虑到不是所有人都会科学上网，这里附上插件的链接。<br>蓝奏云：<a href="https://wws.lanzous.com/irb02fyzt7a">https://wws.lanzous.com/irb02fyzt7a</a><br>安装方式是浏览器右上角-&gt;…-&gt;扩展，把插件包拖动到这里就好了。<br><div class="note warning flat"><ul><li>可能出现的bug：包无效:”CRX_HEADER_INVALID”。<br>可以将crx文件后缀改为.zip，解压。然后浏览器右上角…-&gt;扩展-&gt;开发人员模式（左下角）-&gt;加载解压缩的扩展（右上角），选择之前解压的文件夹。</li></ul></div><br>配合插件能够嗅探页面资源。类似一些视频网站，只要播放就可以直接下载视频，对于那些看视频老是卡又不愿意下个客户端来缓存视频的人来说是个福音。</p><h1 id="Tampermonkey插件"><a href="#Tampermonkey插件" class="headerlink" title="Tampermonkey插件"></a>Tampermonkey插件</h1><p>油猴插件配合GreasyFork的庞大脚本资源可以说是神器了，这里需要用到网盘助手这个脚本，油猴插件的安装方式可以参考之前写的<a href="/posts/8c8df126/" title="玩转Microsoft Edge">玩转Microsoft Edge</a>的教程。关于网盘助手的使用方式则是可以看脚本的介绍界面。</p><h1 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h1><p>NDM需要启动才能配合网盘助手以及NDME插件。所以正确顺序是，先打开NDM，然后用网盘助手的直链生成功能获取直链，然后右键，使用NDM下载。个人亲测效果虽然算不上惊艳，但是好歹然原本低于32KB/s的传输速度变成了500KB/s上下。要是在相对好一点的带宽网络下，应该还能进一步提高。</p><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><p>之前已经提到过NDM其实是模仿的IDM，可见IDM在性能上更加的好用。但是电脑版IDM需要收费，白嫖党可以在吾爱破解论坛上搜索一下所谓的激活版，因为激活版往往都是期限性质的，所以我就不放长久链接，单纯指下路。（PS，电脑版IDM依然不支持磁力链接和BT种子，但是可以通过离线下载到百度网盘然后再用类似于以上教程的方式下载）</p><p>手机端还有一个IDM+，是完全免费的，功能与IDM相似，最高支持64线程，而且支持磁力链接和BT种子，同样可以嗅探页面资源。对于一些可以在浏览器上观看却没有提供下载按钮的页面资源非常有效。</p>]]></content>
    
    
    <summary type="html">使用TamperMonkey提供的网盘助手脚本配合NDM下载器，实现一定程度上的下载加速，作为Pandownload失效后的代替品</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="🍨Win10" scheme="https://akilar.top/tags/%F0%9F%8D%A8Win10/"/>
    
    <category term="⏯️百度网盘" scheme="https://akilar.top/tags/%E2%8F%AF%EF%B8%8F%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/"/>
    
    <category term="⏩NDM" scheme="https://akilar.top/tags/%E2%8F%A9NDM/"/>
    
  </entry>
  
  <entry>
    <title>售前工作职责和流程（转）</title>
    <link href="https://akilar.top/posts/72b9592/"/>
    <id>https://akilar.top/posts/72b9592/</id>
    <published>2020-08-18T13:40:49.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>售前人员应该是项目开发人员与业务销售人员的桥梁，<strong>在业务销售人员眼中</strong>，售前人员扮演的是技术人员或技术专家的角色，而<strong>在项目实施中的开发人员</strong>眼中，售前人员是专注技术的销售人员，在<strong>用户</strong>眼中，售前人员，是代表公司技术水平的技术专家。</p></div><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><div class="note primary flat"><p>现在IT公司都经历了原来的产品型到解决方案型，再到IT服务型企业过度的一种转变时期，记得在96年做IT销售的时候，鲜有售前工程师这个职务，大小事情都自己做主，于是出现了一些非常不规范的事情，一个销售可以信口开河地承诺任何事情，包括产品性能、服务、价格等等。呵呵，其实呢，一个销售的目的就是卖产品，那管其他的，于是导致了销售的口碑不好，这个问题IBM销售江月讲的非常有意思，可以去看看他的文章：销售为什么爱“撒谎”。</p></div><h1 id="售前的来历"><a href="#售前的来历" class="headerlink" title="售前的来历"></a>售前的来历</h1><div class="note default no-icon flat"><p>好像在1998年的时候，产品的选择范围也开始比较广泛，出现了货比三家的局面，用户也慢慢进步了，开始有了自己的需求，特别是产品与用户需求相脱节的时候，销售就开始不太好做了，有一天，我在IBM的网站上发现了一个词语：SOLUTION，方案，一下子就明白了一个道理，买产品已经过时了，只有对用户的需求做出反映才是真正的产品，这个时候，国内各种各样的软件公司就如雨后春笋一样开始起来了，产品也越来越个性化，因为用户开始注意到自己的需求，用户是上帝，过去，厂家是上帝，厂家给你什么产品就是什么产品，你就该怎么用，现在是用户提出需求，你来解决，不知不觉我们来到了解决方案的时代，这个时候，销售的能力已经无法满足用户的需求，随着用户要求越来越多，技术也越来越深，市场就出现了PresalesEngineer这个职务。他是专门来负责对用户需求提供建议或帮助用户给出一套解决用户问题的的一个技术职务。哪个时候看到最多的是销售去打单子，左右都跟着一个手提笔记本一样西装革履的年轻人，这个人就是售前，甚至大的项目，跟好几个售前。</p></div><h1 id="售前的过去"><a href="#售前的过去" class="headerlink" title="售前的过去"></a>售前的过去</h1><div class="note default no-icon flat"><p>售前这个职务，一般是公司开发项目的技术人员，也有一些技术背景比较深的销售人员，觉得有意思的是，当时的甲方（用户）也不太成熟，他们对自身的项目和需求并不是很了解，因为上的很多项目，大概都是一个很简单的想法提出的，甚至是领导的拍脑袋工程，比如：一个OA项目，很可能就是领导攀比、或者觉得电子邮件不方便，不安全而提出的一个办公自动化构想，而这个时候，我们厂商还是比用户在业务上、技术上要成熟的，而同时懂的这些技术和业务的公司不太多，因为大家都在成长，这个时候用户的很多需求，都是厂家引导的，所以那个时候，系统集成、MIS项目利润是很高的，你想想，用户需求是你引导的，再傻的售前也会把用户引导在自己公司技术最成熟、实施成本最低，对自己最有利的地方，也就是说你做你最擅长的那部分。做市场的都知道，有利润就有竞争，在竞争中，软件公司在跌打滚爬中成熟起来了，在这里顺带说一个好有意思的例子：还是说OA项目，北京甲公司提出了资产管理模块，没过1个月远在深圳的一家公司也提出了这个模块，又比如：3层构架一提出，没过半年，全国很多软件公司都是3层构架了，为什么会这么快呢，这里有几个因素：用户需求、技术突破两个因素，导致这种局面的传播，另外就是售前工程师的技术传播，起这非常积极的意见，售前工程师起到了一个非常重要的角色。而售前工程师也是许多软件公司的一个主要职位了，许多软件公司和集成商，售前与销售的比例达到3：7，甚至更多。哪个时候听的最多的一些销售声音是：“能给他做的都做上，我们要把客户侃晕了！”，“用户不了解这个，价格往上提”，面对用户的高难度需求，售前总是说：“这个需求，我要跟后端人员说一下，看看能不能做，不过最好我还是推荐我刚才的思路来做会更好一点。”</p></div><h1 id="售前的今天—-混沌与专业共舞"><a href="#售前的今天—-混沌与专业共舞" class="headerlink" title="售前的今天—-混沌与专业共舞"></a>售前的今天—-混沌与专业共舞</h1><div class="note default no-icon flat"><p>在2002年的时候，有些售前工程师是专职的，还有售前工程师是开发人员兼任的，随着，市场竞争的日益激烈，用户经常被对手售前洗脑，售前响应时间也越来越频繁。兼任的售前已经不能满足原来的需求了，于是售前越来越专业了，一旦专业，售前的工作就与销售的工作非常紧密了，售前就成了“上午写方案，下午做演讲，晚上陪吃饭”的3点一线的工作模式了，这样很多销售就与售前开始实现：“捆绑”销售计划，我们经常听到的一些销售声音是：“保证利润的前提下，提供解决方案”，“不管怎么样都给我满足，中了标再说”在2002-2004年，售前工程师竞争也是到了白热化阶段，很多优秀的售前工程师开始露出尖尖角，在众多售前工程师面前有的客户也变得混沌，有的客户变的专业，同时这些客户又去影响影响售前，两股力量纠缠在一起，共同进步，共同升华。售前工程师在客户面前也谦卑了许多，甚至，用户能理直气壮的表述一段不太合理的需求，甚至不可能完成的任务，售前在销售凌厉的眼神下不敢多言半句，每当这个时候，销售会对售前说：“客户怎么说，你都不要当面否定他，这里原因肯定很多，水太深，我们回过头再来研究”，这里的如何研究，我建议还是看看吴柏臣：“关于售前题目(一)的答案。”</p><p>当用户在进步的时候，售前就变的谦虚了许多、低调了许多，这个也是职业法则使然。同时售前也更加在知识面广度上、深度上有一定的超越，比如，随便一个做企业级应用的售前工程师，基本没有不知道市场上各类中间件、工作流的，甚至很专业地对比各类产品的优缺点、价格、以及如何应用。</p><p>在今天市场日益细分、同时用户功能需求也非常细化的情况下，售前工程师也开始了项目方式的运做，以前一个售前能搞定客户的日子已经一去不复返了，在一个投标项目中开始更加注重公司的综合实力，比如：在需求分析方面、各类截然不同的技术实现方面，系统集成能力方面、项目管理与实施服务方面、商务方面都要开始考核，就那技术方面来说：有决策支持数据仓库等BI技术、有GIS、遥感技术、有EAI集成、网络集成、安全设计、还涉及到各方面的业务领域和新兴技术等等。售前工程师也开始走专业化道路，各类售前工程师在标书方案上也开始采用项目管理的方式来作业，每个售前工程师各负其责，最终实现标书的“集成”。</p><p>在售前的发展过程中，从售前工程师到售前咨询师，又是一个大的跨度。现在，在行业内售前咨询师的需求在增大，而售前工程师的需求却并不见得有增长。就个人体会，我简单的说说二者的区别：</p><ol><li><p>售前工程师仅仅是针对用户的需求，提供技术实现的方案。也就是说，在售前工程师工作时，有个前提假设，即用户需求的是已经得到确定或者是已经成型。而售前咨询师的工作大部分是通过对用户当前业务或者管理状况的分析，提出用户信息化的架构和策略，并且，根据此架构和策略，提供一套可以实现此架构和策略的方案。如果我们将投标作为一个临界点，那么售前工程师往往提供给用户的是标书，而售前咨询师提供给用户的一般为两个部分：信息化规划和信息系统建设建议书。</p></li><li><p>售前工程师要求对于技术实现、项目管理的熟悉程度要长于用户业务。因为用户的原始需求具有比较高的确定性，所以，只需要通过原始需求的分析，结合自己的技术知识和项目管理知识，为用户展现公司在某个项目上的技术和项目管理实力。而售前咨询师要求对用户的业务和管理理解程度要更高，即，更多的时候，售前咨询师是在对用户当前的业务状况和管理状况数据进行收集、统计和分析，通过对这些数据的利用，为用户提供一套有理有据有益的信息化策略和投资收益比率报告。</p></li></ol></div><h1 id="售前工程师岗位职责和基本要求"><a href="#售前工程师岗位职责和基本要求" class="headerlink" title="售前工程师岗位职责和基本要求"></a>售前工程师岗位职责和基本要求</h1><div class="note warning no-icon flat"><ol><li><p>负责组织制定系统集成项目的技术方案编写、标书的准备、讲解及用户答疑等工作；</p></li><li><p>配合客户经理完成与用户的技术交流、技术方案宣讲、应用系统演示等工作；</p></li><li><p>配合业务部其它部门做好用户沟通、资料共享、技术协调等工作；</p></li><li><p>配合市场人员完成应用系统演示、产品宣传资料撰写等工作；</p></li><li><p>配合做好与合作伙伴厂商的技术交流。</p></li></ol></div><h1 id="如何做一个售前工程师"><a href="#如何做一个售前工程师" class="headerlink" title="如何做一个售前工程师?"></a>如何做一个售前工程师?</h1><div class="note info flat"><p>在IT界，成功的完成一个项目，需要销售人员、售前人员、项目实施人员（开发人员）、售后服务人员等密切协作。本文从售前技术支持人员的角度，对售前技术支持工作的过程进行了描述，根据作者在售前的经验，提出了各环节的应该注意的要点，希望能对售前人员的工作有一定的帮助。</p></div><h1 id="售前人员需要具备的素质"><a href="#售前人员需要具备的素质" class="headerlink" title="售前人员需要具备的素质"></a>售前人员需要具备的素质</h1><div class="note success no-icon flat"><p>售前人员应该是项目开发人员与业务销售人员的桥梁，在业务销售人员眼中，售前人员扮演的是技术人员或技术专家的角色，而在项目实施中的开发人员眼中，售前人员是专注技术的销售人员，在用户眼中，售前人员，是代表公司技术水平的技术专家。在一个具体的售前技术支持活动中，售前人员协调销售人员、用户、后期开发人员间的关系，将公司的技术实力向用户展现，听取用户的初步需求，与用户讨论项目系统的初步框架，协助销售人员将公司的产品和技术优势推荐给用户，为后期开发人员屏蔽用户不合理的、给项目实施带来技术风险的需求，是项目的技术框架的最初设计者。</p><p>售前人员要求具备一个技术人员和销售人员两方面的素质，具体如下：<br>熟悉自己的产品。</p><ul><li><p>具有比较全面技术专业知识。熟悉当前IT的技术发展方向。</p></li><li><p>对本公司的开发能力、技术优势、劣势有比较清楚的认识。</p></li><li><p>作为行业软件的销售，必须熟悉本行业的业务，对本行业的信息化的现状和发展方向有一定的认识，了解行业中的其它专业软件的基本情况。</p></li><li><p>熟悉本行业的技术和产品动向，了解同类产品及其竞争对手的情况和特点。</p></li><li><p>能力熟练使用文本和图形编辑器进行方案、标书的编写。</p></li><li><p>熟悉项目招投标的一般程序。</p></li><li><p>善于交流，有良好的沟通能力和技巧。</p></li></ul><p>一个人通常不可能具备这么全面的知识和技能，因此，对于大型项目，为了与客户进行全方位的交流，展现公司实力，对系统进行初步的论证和设计，其售前往往是一个团队，这个团队根据项目的需求，可能有行业业务专家，数据库专家、操作系统专家、信息安全专家、网络构架师、软件系统分析员、项目管理专家等角色。</p></div><h1 id="项目招投标活动的过程描述"><a href="#项目招投标活动的过程描述" class="headerlink" title="项目招投标活动的过程描述"></a>项目招投标活动的过程描述</h1><div class="note info no-icon flat"><p>项目从前期跟踪，签单，作为售前人员，需要与销售人员密切合作。通常获得一个项目的前期过程如下：</p><ol><li><p>销售人员拜访用户，了解用户的项目基本情况，向用户介绍公司和公司的产品，与用户建立起良好的关系。</p></li><li><p>销售人员在用户招标前，引入售前技术支持人员，与用户进行技术上的交流和沟通，了解用户在项目上的需求，偏好的技术构架，引导用户到本公司的技术思路上，这个过程可能是需要多次反复。至少要做到用户对公司有一定的兴趣，愿意邀请你参加投标。</p></li><li><p>用户发招标书，售前人员根据招标书的要求，结合前期与用户交流的情况，编写投标书。</p></li><li><p>参加招投标会，进行技术、商务上的讲解和答疑。</p></li><li><p>参加商务和技术的谈判，起草项目商务合同和技术协议书。</p></li><li><p>签订合同，项目实施以及维护。</p></li></ol></div><h2 id="招投标前与用户的接触"><a href="#招投标前与用户的接触" class="headerlink" title="招投标前与用户的接触"></a>招投标前与用户的接触</h2><div class="note info no-icon flat"><p>招投标前与用户接触，了解用户的真实需求和想法，通过交流，了解用户对系统框架、平台、新技术的偏好，使以后在投标中能“投其所好”“命中要害”。介绍公司的技术和产品，使用户在招标前对本公司技术和产品能有比较清楚的认识和了解，将用户的需求引导到本公司的技术和产品的思路上，使用户的在技术上对本公司有一定的偏好。</p><p>交流和需要了解的内容通常包括：</p><ol><li><p>用户的组织机构，信息化的现状，现有的硬件设备、网络情况、正在使用的软件系统情况；</p></li><li><p>新系统的规划、目标、规模，要求等，包括用户对系统的安全性、可靠性、易用性、扩展性的要求；</p></li><li><p>业务内容、业务流程系统的现状，软件功能需求；</p></li><li><p>平台和数据库的选型；</p></li><li><p>信息安全、存储的需求；</p></li><li><p>对软件开发机制的认识；</p></li><li><p>用户感兴趣的热点技术；</p></li></ol><p>交流应该广泛，不要只限于项目的具体负责人，如果有条件，可以拜访更上级的用户，以及各部门的主要负责人或技术权威，尽量了解用户的对项目的认识和想法，交流和拜访中要善于识别用户的身份，抓住对项目有决定权、影响大的用户的想法，同时，可以初步分析哪些用户可能是以后的招标评委，留意他们对项目感兴趣的地方。以便在投标和讲标中有所针对性。</p><p>引导用户向本公司的擅长的技术路线和产品特点上。可以将以往做过项目的情况、功能特点讲给用户，最好是借助演示，这是用户会告诉你哪些是他感兴趣的，哪些是没有意思的，其它对手的产品是什么样的等等。这样便于与用户进行深入的交流，找到与用户相互的共鸣点。</p><p>跟踪和了解对手情况，了解同类产品的现状，这是一个长期积累的过程，分析对手的产品和解决方案可能的特点，找到或提出比对手有新意的、能吸引用户的系统亮点。当然，这些亮点的提出必须先考虑自己的技术实力和项目的投资规模。</p></div><h2 id="投标及投标文件的准备"><a href="#投标及投标文件的准备" class="headerlink" title="投标及投标文件的准备"></a>投标及投标文件的准备</h2><h3 id="成立投标小组"><a href="#成立投标小组" class="headerlink" title="成立投标小组"></a>成立投标小组</h3><div class="note default no-icon flat"><p>成立项目投标小组，投标小组的核心应该是项目的法人代表授权人。根据项目的规模、技术难度和招标时间的要求，制订投标计划，将计划分解到每个人员上，确定每个人工作内容和计划，确定计划的执行的监督人员。</p><p>投标的时间一般都是确定的日期，而且比较短，这也是考验一个公司和团队的响应速度，必须在这个有限的时间内完成投标书的制作，否则，将由于准备不充分而丢标。这需要平时的技术积累，对行业知识的积累，投标书的积累，如有类似的的标书或模版，以及良好的团队合作精神和氛围。</p><p>作为一个行业应用项目，技术部分可能涉及到的人员有：网络规划师、硬件产品经理、软件构架师、行业专家、数据规划专家或数据库专家信息安全专家，以及其它专业领域的专家等。这个团队建立，需要整合公司内部和外部的相关资源，来共同完成。例如，可以临时请专业公司相关的售前支持（HP、IBM等）、相关行业的专家、相关专业的大学教授等来扮演相关的角色。甚至可以考虑与相关的其它公司联合投标。</p><p>在投标小组中，建立保密制度，特别是对于特大型项目，关于报价、核心技术等内容，最好在小范围讨论和确定。必要的情况下可采用封闭开发的方式。</p></div><h3 id="编写投标书"><a href="#编写投标书" class="headerlink" title="编写投标书"></a>编写投标书</h3><div class="note default no-icon flat"><p>用户的招标书通常包括：招标邀请函、商务要求部分、技术要求部分、附件和附图等文档，这些文档是编写投标书的基础。投标小组成员在编写标书前，应该仔细、反复阅读招标书，特别是对投标商的资质要求等内容，投标小组对招标书进行讨论，找出招标书中描述不清楚的地方，根据情况向招标方提出要求解释，确定项目资质情况、投标以及实施的风险、对手情况、投标的优势、劣势等；制订投标策略；确定投标书的内容、投标方式；初步编写投标书的大纲。在投标书编写过程中，应该注意一下几点：</p><ol><li><p>商务投标书应该按照招标书的要求进行严格的应答，应答的顺序和格式最好严格遵循招标书的要求。</p></li><li><p>对于招标书没有要求的内容，特别是商务标书，最好不要画蛇添足，如果希望增加对项目投标有帮助的资质，最好经过慎重的考虑，确保没有漏洞。商务部分主要的目的是展示投标公司的实力，确保参加投标的资格。首要是确保投标有效。注意有些东西可以讲出来，但不是所有可以讲出来的东西都适合写出来。</p></li><li><p>差异表的处理：对于投标文件与招标文件中有差异的部分，通常招标方要求标注在差异表中，在编写投标方案时，应该尽可能的将差异部分找出来，描述清楚，但是，在最后整理、提交差异表时，就需要特别慎重，并不是每个差异都适合在这个正式的场所以正式的方式提出，有些东西需要保持一种模糊的状态，以提高中标的可能性，同时，又可以为商务和技术谈判留下伏笔，便于谈判中的进退。</p></li><li><p>对于报价单的处理：报价单按照正规要求填写、盖章、密封后，最好能有一两套空白的备份，报价单的格式与正式报价单一样，但是价格不填写。因为在正式报价单封装好到递交报价单前的这段时间，销售人员很可能探听到对手的价格或用户对项目整体价格的意见，这是候需要根据项目、市场、对手、用户的情况进行价格调整，这时就可以使用备份的报价单。特别是公司到异地投标，要想重做报价单，时间基本上是不允许的。</p></li><li><p>密封条的处理：在规定的投标文档密封条基础上，一定要多准备几张备用的密封条，当然是盖好章的，特别是公司到异地投标，市场信息千变万化，你不可能保证在投标前不修改你的价格和投标书。</p></li><li><p>商务投标书中的资质和要求公司盖章的部分一定要对照招标书的要求，严格检查，这部分的错误和遗漏将有可能造成废标，因此，最好有两个以上的人员专门检查核对。</p></li><li><p>对于一个集团公司下的多个法人公司之间，可能存在资质共享的情况，这时，应该注意检查哪些资质不是投标法人单位的资质，如果本投标法人单位的资质，应该请资质拥有的法人单位签署授权声明，否则，招标时可能造成“擅用第三方公司的资质欺骗招标单位”的后果而成为废标。</p></li></ol></div><h2 id="参加投标"><a href="#参加投标" class="headerlink" title="参加投标"></a>参加投标</h2><div class="note danger no-icon flat"><p>对于比较大的项目，参加投标的团队的人员合理分配是很重要的，根据项目具体情况，可将投标人员按照编写标书分工的情况分为：商务人员、技术人员。继续细分为商务联系人员、商务投标人员、技术部分可以分为负责网络部分的、体系结构的、应用系统功能的人员等。</p><p>参加投标人员应该统一服饰，穿统一的职业装，佩戴公司的标志，自信、自然，给招标评委一个良好的整体形象。严格遵循招标纪律。</p><p>通常情况下，不要过多的对熟悉的评委交流。尽管前期与用户有充分的接触，可能与一些评委熟悉并有良好的关系，但是，在招标的正式场所，通常是礼貌的打一下招呼，寒喧一下即可，不易与用户有太多的交流和亲密交谈，这些举动可能会造成其它评委的误会，也可能会给对手“授之以柄”。除非你是专门的、有特殊目的的行为，例如，在有些情况下，与招标中的最好领导或核心人员表现出亲密的关系，可以给其它评委造成“某某人可能已经偏向某公司了，我也应该顺势而为”的误导，同时，给对手造成更大的心理压力和负担。但这种方式有很多风险，要非常。慎重。</p><p>在投标前，讲标的每一部分应该准备好相应的幻灯片，幻灯片的作用有两个，一是通过文字、图片、动画等多种方式，比较直观的向评委传达信息，便于评委对讲解内容的理解，二是通过幻灯片，帮助讲标人自己规范思路，不至于跑题。因此，幻灯片制作，要以这两个作用为目标。每张幻灯片讲些什么内容，讲多长时间，都要做到心中有数。</p><p>最好有实际的演示，结合演示讲标。作为行业应用软件的用户，比较重视投标厂商以往同类系统的业绩，如果能向用户展示同类的应用系统，结合实例演示来讲解系统的体系结构、功能特点，通常会取得较好的效果。但是，在展示以往系统的时候，要注意扬长避短，屏蔽掉一些系统的弱点和缺陷，同时要注意演示的时间控制。</p><p>对投标中使用的设备要主要保护，投标中使用的笔记本电脑，在安装好演示系统和幻灯片后，要对设备慎重使用，防止设备的意外损坏导致投标中的设备异常，例如，注意防病毒、防止意外碰坏，不要在投标出差期间用笔记本电脑到网吧上网，在宾馆中防止电脑进水、摔坏，不要轻易整理计算机系统的文件，可能因为不小心删除某文件造成系统不能正常启动。最好在投标出差前将系统的安装盘，应用系统的安装盘等备份好，有条件的可以采用两套笔记本电脑安装。</p><p>适当的与参加投标的对手交谈，也许下次你们还会在另外一次投标中对阵，也许下次他与你并肩战斗，通过交谈，你也可以意外的获得一些有用的信息。</p></div><h3 id="讲标"><a href="#讲标" class="headerlink" title="讲标"></a>讲标</h3><div class="note danger no-icon flat"><p>讲标应该有既要有重点，又要覆盖到各项内容，突出公司特点和优势、突出技术优势和特点。内容要尽量照顾到每个评委。</p><p>讲标通常都有时间限制的，在这个时间段内，如何将公司介绍、商务介绍、技术介绍、项目实施、技术支持与服务等内容的时间合理分配，需要在讲标前仔细斟酌。时间和内容的分配主要根据以下情况来调整：</p></div><h4 id="本公司和技术上的优势和特点。"><a href="#本公司和技术上的优势和特点。" class="headerlink" title="本公司和技术上的优势和特点。"></a>本公司和技术上的优势和特点。</h4><div class="note info no-icon flat"><p>讲标中，特别是讲标的顺序排在后面的时候，对于一些共性的东西，评委已经比较清楚了，也没有兴趣听你重复，他关心的是你与其它对手相比的特点</p></div><h4 id="招标评委的组成和特点。"><a href="#招标评委的组成和特点。" class="headerlink" title="招标评委的组成和特点。"></a>招标评委的组成和特点。</h4><div class="note primary no-icon flat"><p>要力所能及的分析招标评委的组成情况，高层领导、技术专家、部门业务专家等角色的人员组成和数量。通常高层领导对IT技术不熟悉，他评判的主要依据更多的是公司规模、资质、实力、售后服务、价格等非技术性指标，技术专家评判的主要依据是系统体系、采用的新技术、安全性、扩展性、软件开发管理机制等技术指标，而部门业务专家更关心软件的功能、易用性、与现有系统的接口等问题。</p><p>讲标的过程中要注意观察评委的表情、态度，及时调整内容的深度。</p></div><h4 id="对手讲标后的情况和弱点。"><a href="#对手讲标后的情况和弱点。" class="headerlink" title="对手讲标后的情况和弱点。"></a>对手讲标后的情况和弱点。</h4><div class="note info no-icon flat"><p>针对对手讲标后评委普遍反映的问题进行重点阐述，例如，评委认为系统的安全性和项目开发的规范性很重要，但其它讲过标的对手都没重视，这时，你需要及时调整内容，将安全性和项目开发机制做重点来阐述。</p><p>另外，不要轻易攻击对手，可能有些评委对你的对手有好感，你对对手的直接攻击，会引起他的反感而刻意打压你。攻击对手的方法是突出自己的优势。</p><p>讲标中可能由几个人分工，讲不同的内容，但要注意整体的逻辑上要严密。可以先由一个人将讲标的全部内容安排做一个介绍，然后在每个人讲完自己部分后，简单介绍下部分的内容，引入下个讲解人员。使整个讲标连贯统一。</p><p>讲标前要调整好自己的状态和心态，讲标过程中要放松，不要报着“上考场考”、“被人评判审核”这样的心态，这样会使你陷入一种紧张、诚惶诚恐的状态。当你上到讲标台上，看见评标的人很多，你会更加紧张，越容易出错。你应该对自己方案和产品充满信心，你就是专家，报着“咳！让我给大家介绍一下我们的好东西，绝对能解决你们现在的问题！”的心态，你应该有一种急于向外人展现你的得意作品的冲动，人越多，你越得意、越兴奋，这时，你最好的状态来了！</p></div><h3 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h3><div class="note warning no-icon flat"><p>回答讲标和提问时，掌握的原则是：讲不清楚没关系（模临两可），但决不能错！</p><p>不能与评委发生争论。</p><p>不能对评委的问题表示轻视。</p><p>回答不了的问题的答疑的人员要相互配合。当你发现你的同伴被问住的时候，如果你能协助他回答最好，你也不能回答的，你应该迅速想到一个方法，从另外一个角度的回答这个问题，从而逐渐将话题引开，避免尴尬。</p></div><h2 id="商务和技术谈判"><a href="#商务和技术谈判" class="headerlink" title="商务和技术谈判"></a>商务和技术谈判</h2><div class="note info no-icon flat"><p>在预中标后，将会进行商务和技术谈判，售前技术支持人员主要参加技术协议的谈判和起草。</p><p>技术协议的谈判是降低项目风险的关键过程，谈判的成果－技术协议书通常会作为合同的附件，直接影响到项目实施的难度和风险。因此，一定要耐心、细致，不能为了尽快签合同，就草草了事。</p><p>技术协议目的是界定好功能边界和深度。特别是在行业应用软件中，投标文件和讲标中，通常会有忽略一个“度”。如应用系统的深度、功能的具体边界、新技术采用的程度等问题，往往是比较模糊的，很大的可能性是双方在这些方面的认识存在着较大的差异，这些差异的会给后续的项目实施带来风险。技术协议的谈判就是要对这些“度”进行控制，对敏感问题和技术难点要进行沟通，达成共识，注意不能在技术协议中出现“全面解决某某问题”、“完全解决”等模糊的字眼，这种模糊的界定会给项目开发带来很大的风险，都必须讨论清楚，将完成的深度和采用的技术手段写入技术协议中，使项目风险在项目实施前就得到充分的展示和控制。</p></div><h1 id="投标文件的编写"><a href="#投标文件的编写" class="headerlink" title="投标文件的编写"></a>投标文件的编写</h1><div class="note default no-icon flat"><p>投标书的编写最核心的要点是要逐条响应招标书，不能有遗漏。</p><p>作为一个大的公司或集团，需要也应该制定统一的《投标标书编写规范与指南》，通过积累，建立一个投标书模版库，以保证投标书的质量、缩短投标书的编写周期。</p><p>关于投标的文件的具体编写，有许多文章都有较好的描述。在此不再赘述。</p><p>首先要纠正一个错误的观点：售前的技术要求不高。售前在用户看来是代表着一个公司的技术水平的市场技术人员，第一个定语是“市场”说明售前需要了解市场需求和发展趋势、行业格局和竞争优劣势等市场信息，第二个定语是“技术”说明根本上还是一个技术人员。与售后不同的工作重点是：售前是推销产品技术的，售后是实施产品技术的，但这绝对不是说售前就不需要关心产品技术的实施。你不懂产品技术怎么去卖产品技术！好的售前都是要有扎实的理论基础以及丰富的实施经验，加上敏锐的市场嗅觉才能“吹嘘”出好的产品技术解决方案和卖点。销售关注客户关系和市场需求，售后关注技术实施，售前是对两者在一定程度上的综合。我对一个好的售前是这样定义的：销售型的技术人员。我见过的最好的售前可以把对手产品技术的明显优势说成很普通，普通说成很差，而且都言之成理，将技术销售的能力发挥到了极致。有好的人脉关系可以做好售前，但是没有好的技术能力一定做不了好的售前。售前是很有技术含量的，只是目前太多的售前并没有达到这样的要求，但不能说明售前只是懂一点技术的销售人员。</p></div>]]></content>
    
    
    <summary type="html">关于售前工程师的工作职责和流程，精细到堪称论文了。全文转载自网络，因为转载的人太多，我也不清楚原作者是谁了。</summary>
    
    
    
    <category term="🍬Akilarの泡泡糖" scheme="https://akilar.top/categories/%F0%9F%8D%ACAkilar%E3%81%AE%E6%B3%A1%E6%B3%A1%E7%B3%96/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo-neat插件对网页进行压缩</title>
    <link href="https://akilar.top/posts/d1f227cc/"/>
    <id>https://akilar.top/posts/d1f227cc/</id>
    <published>2020-08-12T15:37:59.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>如果使用的是butterfly主题，hexo-neat可能会与主题的各类配置本身起冲突，如果有压缩静态页面资源的需要，可以参考<a href="https://demo.jerryc.me/posts/4073eda/#Gulp%E5%A3%93%E7%B8%AE">butterfly主题文档中关于gulp插件</a>的相关内容。</p></div><h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>这里不写前言，直接交代结论，用hexo-neat插件压缩静态页面，来提高响应速度，具体内容可以参考相应教程。</p><ul><li><a href="https://blog.csdn.net/lewky_liu/article/details/82432003">Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源</a></li><li><a href="https://ilxx.gitee.io/hexo_liu_yasuo.html">hexo next主题深度优化(六)，使用hexo-neat插件压缩页面，大幅度提升页面性能和响应速度</a></li></ul><p>以下内容基本为对第二条教程贴的搬运，可以直接查看第二条教程了解更多细节内容。</p><h1 id="安装Hexo-neat插件"><a href="#安装Hexo-neat插件" class="headerlink" title="安装Hexo-neat插件"></a>安装Hexo-neat插件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在~/Hexo/_config.yml文件添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#39;**&#x2F;*.min.css&#39;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#39;**&#x2F;*.min.js&#39;</span><br><span class="line">    - &#39;**&#x2F;jquery.fancybox.pack.js&#39;</span><br><span class="line">    - &#39;**&#x2F;index.js&#39;</span><br></pre></td></tr></table></figure></p><h1 id="可能的报错"><a href="#可能的报错" class="headerlink" title="可能的报错"></a>可能的报错</h1><h2 id="桃心的点击效果消失"><a href="#桃心的点击效果消失" class="headerlink" title="桃心的点击效果消失"></a>桃心的点击效果消失</h2><p>如果参考过其他的美化教程，可能你的桃心点击效果消失了<br>需要在配置项的相应位置添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#39;**&#x2F;*.min.js&#39;</span><br><span class="line">    - &#39;**&#x2F;jquery.fancybox.pack.js&#39;</span><br><span class="line">    - &#39;**&#x2F;index.js&#39;  </span><br><span class="line">    - &#39;**&#x2F;love.js&#39;</span><br></pre></td></tr></table></figure></p><h2 id="gitalk-js文件报错"><a href="#gitalk-js文件报错" class="headerlink" title="gitalk.js文件报错"></a>gitalk.js文件报错</h2><p>接着在压缩js的配置项<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- &#39;**&#x2F;comments.gitalk.js&#39;</span><br></pre></td></tr></table></figure><br>总之就是那里报错添哪里。</p><h2 id="压缩html时不要跳过-md文件"><a href="#压缩html时不要跳过-md文件" class="headerlink" title="压缩html时不要跳过.md文件"></a>压缩html时不要跳过.md文件</h2><p>.md文件就是我们写文章时的markdown文件，如果跳过压缩.md文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。（教程原话）</p><h2 id="压缩html时不要跳过-swig文件"><a href="#压缩html时不要跳过-swig文件" class="headerlink" title="压缩html时不要跳过.swig文件"></a>压缩html时不要跳过.swig文件</h2><p>.swig文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。（教程原话）</p><h1 id="那么古尔丹，代价是什么？"><a href="#那么古尔丹，代价是什么？" class="headerlink" title="那么古尔丹，代价是什么？"></a>那么古尔丹，代价是什么？</h1><p>压缩的过程会极大的延长页面编译和部署的时间，说的通俗点，在你使用<code>hexo generate</code>指令的时候，为了压缩静态页面，编译时间被大大延长了。这也是某种意义上的等价交换吧，以我为例，我现在都不怎么敢用<code>hexo clean</code>指令，因为文章已经接近400篇，每次重新部署需要10分钟乃至更久。</p>]]></content>
    
    
    <summary type="html">使用Hexo-neat可以快速压缩静态页面的各种资源，例如取出css和js文件中的空格，注释等等，挺高页面运行速度。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
  </entry>
  
  <entry>
    <title>给博客添加一个会说话能换装的live2d看板娘</title>
    <link href="https://akilar.top/posts/5b8f515f/"/>
    <id>https://akilar.top/posts/5b8f515f/</id>
    <published>2020-08-12T14:10:43.000Z</published>
    <updated>2020-10-24T13:59:30.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>最早的时候看别人的博客很多都有一个可爱的看板娘，然后就找了教程给自己也整了一个。因为找到的教程都是稂莠不齐的，原作者自己说的也略显含糊（其实是我自己看不懂）。总之秉承着一如既往的小白风格。把网上的教程做个整合。</p><h1 id="Hexo自带看板娘（不会说话，不能换装）"><a href="#Hexo自带看板娘（不会说话，不能换装）" class="headerlink" title="Hexo自带看板娘（不会说话，不能换装）"></a>Hexo自带看板娘（不会说话，不能换装）</h1><p>首先是博客自带的看板娘，这孩子不会说话也不能换装，只会跟着你的鼠标晃动脑袋，不过有几款超可爱。<br>先放一下出处</p><ul><li><a href="https://github.com/xiazeyu/live2d-widget-models">作者的github</a></li><li><a href="https://huaji8.top/post/live2d-plugin-2.0/">模型预览</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在Hexo根目录下打开终端，输入以下指令安装必要插件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开hexo站点配置文件（~Hexo/_config.yml)<br>搜索live2d,按照如下注释内容指示进行操作。<br>如果没有搜到live2d的配置项，就直接把以下内容复制到最底部。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https:&#x2F;&#x2F;github.com&#x2F;EYHN&#x2F;hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  # enable: false</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw&#x2F; # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib&#x2F; # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets&#x2F; # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget@3.x&#x2F;lib&#x2F;L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录&#x2F;live2d_models&#x2F; 下的目录名</span><br><span class="line">    # use: .&#x2F;wives&#x2F;wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget-model-wanko@1.0.5&#x2F;assets&#x2F;wanko.model.json # 你的自定义 url</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true # 手机中是否展示</span><br></pre></td></tr></table></figure><br>完成后保存修改，在Hexo根目录下运行指令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>之所以必须要使用hexo clean是因为我们需要清空缓存重新生成静态页面，不然看板娘没被加入生成的静态页面里，是不会出现的。</p><h2 id="更换看板娘"><a href="#更换看板娘" class="headerlink" title="更换看板娘"></a>更换看板娘</h2><p>同样是在Hexo根目录下，打开终端，选择想要的看板娘进行安装，例如我这里用到的是 <strong>live2d-widget-model-koharu</strong>，一个Q版小正太。<br>（其他的模型也可以在<a href="https://huaji8.top/post/live2d-plugin-2.0/">模型预览</a>里查看以供选择。<br>输入指令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-koharu</span><br></pre></td></tr></table></figure><br>然后在配置文件里找到model项修改为期望的模型。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model:</span><br><span class="line">  use: live2d-widget-model-koharu</span><br><span class="line">  # 默认为live2d-widget-model-wanko</span><br></pre></td></tr></table></figure><br>之后按部就班的运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>就能在localhost:4000上查看效果了。</p><h2 id="卸载看板娘"><a href="#卸载看板娘" class="headerlink" title="卸载看板娘"></a>卸载看板娘</h2><p>卸载插件和卸载模型的指令都是通过npm进行操作的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br><span class="line">npm uninstall live2d-widget-model-modelname</span><br></pre></td></tr></table></figure><br>卸载后为了保证配置项不出错，记得把<strong>~Hexo/_config.yml</strong>里的配置项给注释或者删除掉。</p><h1 id="大神魔改看板娘（会说话，能换装）"><a href="#大神魔改看板娘（会说话，能换装）" class="headerlink" title="大神魔改看板娘（会说话，能换装）"></a>大神魔改看板娘（会说话，能换装）</h1><p><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/pangao1990/pangao1990.github.io/pic/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E6%96%B0%E5%A2%9E%E7%9C%8B%E6%9D%BF%E5%A8%98-1.gif" alt=""><br>照例先放</p><ul><li><a href="https://github.com/stevenjoezhang/live2d-widget">作者的github</a></li><li><a href="https://mi.js.org/live2d-widget/demo/demo.html">预览效果</a></li><li><a href="https://blog.csdn.net/qq_39610915/article/details/90679768?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">参考教程</a></li></ul><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><div class="tabs" id="看板娘配置"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#看板娘配置-1">💫next主题</button></li><li class="tab"><button type="button" data-href="#看板娘配置-2">🦋butterfly主题</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="看板娘配置-1"><p>在next主题的source目录下（~Hexo/themes/next/source/)打开终端,输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git live2d-widget</span><br></pre></td></tr></table></figure><br>这行指令的意思就是clone这个项目到source路径下并重命名为live2d-widget。<del>emm，貌似本来就叫live2d-widget。反正算是一个踩坑点。</del>如果是用下载项目压缩包，解压后放到这里的，也记得把文件夹<strong>更名为live2d-widget</strong>。</p><ol><li>第一步<br>找到路径~Hexo\themes\next\source\live2d-widget\autoload.js，打开<strong>autoload.js</strong>，<br>找到<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure>修改为<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><p><del>引用一下教程原话：autoload.js中的注释的绝对地址指的是，将资源打包放到hexo/theme/next/source中后，**以hexo/theme/next/source为根目录（/）的绝对路径</del></p><ol><li>第二步</li></ol><p>在/themes/next/layout/_layout.swing中,</p><p>在&lt; head &gt;标签中添加如下内容以增加jQuery和font-awesome依赖。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BC%9A%E8%AF%B4%E8%AF%9D%E8%83%BD%E6%8D%A2%E8%A3%85%E7%9A%84live2d%E7%9C%8B%E6%9D%BF%E5%A8%98/20200812030316962.png" alt=""></p><p>在&lt; body &gt;标签中新增如下内容，<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BC%9A%E8%AF%B4%E8%AF%9D%E8%83%BD%E6%8D%A2%E8%A3%85%E7%9A%84live2d%E7%9C%8B%E6%9D%BF%E5%A8%98/20200812025853981.png" alt=""></p><ol><li>第三步</li></ol><p>在<strong>主题配置文件~/Hexo/themes/next/_config.yml</strong>底部添加如下内容<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>保存所有文件的修改，然后照例执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>就能在localhost:4000看到预览了。</p><ol><li>自定义修改<br>有一定前端基础的小伙伴可以通过修改~Hexo\themes\next\source\live2d-widget路径下的</li></ol><ul><li>waifu-tips.js 包含了按钮和对话框的逻辑</li><li>waifu-tips.json 中定义了触发条件（selector，CSS 选择器）和触发时显示的文字（text）；</li><li>waifu.css 是看板娘的样式表。<br>对看板娘的位置布局等做自定义修改。</li></ul><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="看板娘配置-2"><p>在butterfly主题的source目录下（~Hexo/themes/butterfly/source/)打开终端,输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git live2d-widget</span><br></pre></td></tr></table></figure><br>这行指令的意思就是clone这个项目到source路径下并重命名为live2d-widget。<del>emm，貌似本来就叫live2d-widget。反正算是一个踩坑点。</del>如果是用下载项目压缩包，解压后放到这里的，也记得把文件夹<strong>更名为live2d-widget</strong>。</p><ol><li><p>第一步<br>找到路径~Hexo\themes\butterfly\source\live2d-widget\autoload.js，打开<strong>autoload.js</strong>，<br>找到</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure><p><del>引用一下教程原话：autoload.js中的注释的绝对地址指的是，将资源打包放到hexo/theme/butterfly/source中后，**以hexo/theme/butterfly/source为根目录（/）的绝对路径</del></p></li><li><p>第二步</p></li></ol><p>在butterfly的主题配置文件_config.butterfly.yml中,<br>找到inject，添加如下内容以增加jQuery和font-awesome依赖。<br>然后引入live2d-widget的autoload.js。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line"><span class="addition">+   - &lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+   - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt;</span></span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br><span class="line"><span class="addition">+   - &lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ol><li>第三步</li></ol><p>在<strong>butterfly主题配置文件_config.butterfly.yml</strong>的底部添加如下内容<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>保存所有文件的修改，然后照例执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>就能在localhost:4000看到预览了。</p><ol><li>自定义修改<br>有一定前端基础的小伙伴可以通过修改~Hexo\themes\butterfly\source\live2d-widget路径下的</li></ol><ul><li>waifu-tips.js 包含了按钮和对话框的逻辑</li><li>waifu-tips.json 中定义了触发条件（selector，CSS 选择器）和触发时显示的文字（text）；</li><li>waifu.css 是看板娘的样式表。<br>对看板娘的位置布局等做自定义修改。</li></ul><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>站点配置文件（Hexo自带看板娘）和主题配置文件（张书樵大神魔改看板娘）的live2d理论上可以共存，但是不建议这么做，只保留一个就好。也不用卸载哪个，只要把配置文件中的<code>enable: true</code>改为<code>enable: false</code>即可。</p><p>这个看板娘的API貌似随时会到期，作者发布了API的迁移公告以及部署教程:<a href="https://www.fghrsh.net/post/170.html">Live2D 看板娘 API 迁移公告</a><br>自建API需要用到自己的服务器，PHP服务器部署有一键安装脚本，自搜。</p><h1 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h1><ol><li><a href="https://mx.paul.ren/">梦象，一个专注于 Live2D 模型的资源站</a>,从这里可以找到其他的live_2d模型。</li><li><a href="https://mx.paul.ren/course/how-to-use-models.html">如何在网站上使用梦象上的模型</a>，这里是针对上一条模型的安装教程。</li></ol><h1 id="bug归纳"><a href="#bug归纳" class="headerlink" title="bug归纳"></a>bug归纳</h1><div class="note danger flat"><ol><li>在配置了gulp和pwa之后，看板娘消失。</li></ol></div><p>解决思路：一开始博主通过在gulpfile.js里添加屏蔽配置，让gulp不要压缩看板娘的静态资源，但是似乎是因为pwa的缘故，在本地预览重新出现的看板娘在部署到网页以后依然不出现。<br>解决方案：博主采用了最粗暴的解决方案，直接把看板娘提取出来作为单独的项目，然后借助jsdelivr引用相应的静态资源。live2d-widget文件夹不放在博客的source目录中，而是存在独立的github仓库里。这样gulp怎么也压缩不到。而且得益于jsdelivr，看板娘的加载速度也有所提高。配置方法是将<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>项目fork到自己的仓库（用原项目也可以，但是那样不方便更改样式啊），然后修改autoload.js里的路径为你自己的仓库名。<br><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;;</span></span><br><span class="line"><span class="addition">+ const live2d_path = &quot;https://cdn.jsdelivr.net/gh/yourname/live2d-widget/&quot;;</span></span><br></pre></td></tr></table></figure><br>而在主题配置项里也可以使用<code>https://cdn.jsdelivr.net/gh/yourname/live2d-widget/autoload.js</code>来引入。</p><h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h1><ul><li><a href="https://github.com/panedioic/live2d_demo_without_api">本地化 API 版本</a></li><li><a href="https://github.com/fghrsh/live2d_api">原后端API源码</a></li><li>将API转为本地化，增改模型。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h1&gt;&lt;p&gt;最早的时候看别人的博客很多都有一个可爱的看板娘，然后就找了教程给自己也整了一个。因为找到的教程都是稂莠不齐的，原作者自己说的</summary>
      
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="💃看板娘" scheme="https://akilar.top/tags/%F0%9F%92%83%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    
    <category term="🧚‍♀️live2d" scheme="https://akilar.top/tags/%F0%9F%A7%9A%E2%80%8D%E2%99%80%EF%B8%8Flive2d/"/>
    
  </entry>
  
  <entry>
    <title>玩转Microsoft Edge</title>
    <link href="https://akilar.top/posts/8c8df126/"/>
    <id>https://akilar.top/posts/8c8df126/</id>
    <published>2020-08-10T15:14:47.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>无聊的碎碎念不看也罢</span></div>    <div class="hide-content"><p>最早是在楠皮教会我怎么用谷歌浏览器的时候接触到浏览器插件这种东西，要不怎么说天下浏览器出谷歌呢，国内好多打着自主研发幌子的浏览器，一看内核，都是chromium，具体就不点名了。<br>然后，Microsoft Edge（以下简称Edge）在升级到新版以后活脱脱就是个Chrome的翻版，因为用的就是谷歌的内核，Edge也有自己的插件市场，所以，在导入了Chrome的配置之后，我得以完美的从Chrome过度到Edge。</p></div></div><h1 id="升级新版Edge"><a href="#升级新版Edge" class="headerlink" title="升级新版Edge"></a>升级新版Edge</h1><p>这个非常简单，目前能找到的最新版Win10的iso镜像自带的浏览器依然是老版本Edge，但是打开以后就会提示是否升级，当然也可以主动访问<a href="https://www.microsoft.com/zh-cn/Edge">新版Edge的官方网页</a>进行下载。<br><div class="note info flat"><p>安装完成后，如果你之前用的是Chrome，那你可以直接导入Chrome的使用数据。点击<a href="edge://settings/profiles">Edge浏览器右上角的 。。。-&gt;设置-&gt;个人资料</a>-&gt;导入浏览器数据，导入位置选择Chrome或者firefox或者任何你想要的浏览器。会把Chrome的插件、密码存储等等内容统统转移过来，所以要小心密码被盗。不要随意在非私人电脑上做这些操作。</p></div></p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>以下是我根据自己的日常体验保留的几个很不错的插件，你也可以自己在Microsoft Edge的扩展市场中通过搜索插件名找到他们。</p><ol><li>直接访问<a href="https://microsoftEdge.microsoft.com/addons?hl=zh-CN">Microsoft Edge的扩展</a></li><li><a href="edge://extensions/">浏览器右上角…-&gt;扩展-&gt;</a>获取 Microsoft Edge 扩展<div class="note warning flat"><p>可能出现的bug：<strong>包无效:”CRX_HEADER_INVALID”</strong>。<br>可以将crx文件后缀改为.zip，解压。然后<a href="edge://extensions/">浏览器右上角…-&gt;扩展-&gt;</a>开发人员模式（左下角）-&gt;加载解压缩的扩展（右上角），选择之前解压的文件夹。</p></div></li></ol><h2 id="iGG谷歌访问助手"><a href="#iGG谷歌访问助手" class="headerlink" title="iGG谷歌访问助手"></a><a href="https://microsoftEdge.microsoft.com/addons/detail/igg%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/mchibleoefileemjfghfejaggonplmmg">iGG谷歌访问助手</a></h2><p>IGG谷歌访问助手会提供一条免费的线路，使用它代理，可以访问大部分google产品，最新版甚至支持加速OneDrive，偶尔可以查看谷歌学术，但谈不上稳定，YouTube和 GDriver暂时无法访问。最关键的是，安装它之后我们就可以访问Google Web Store了，因为Edge和Chrome都是chromium内核，所以插件是可以互通的，而且Edge也支持直接从Google  Web Store安装插件。</p><h2 id="Adguard广告拦截器"><a href="#Adguard广告拦截器" class="headerlink" title="Adguard广告拦截器"></a><a href="https://microsoftEdge.microsoft.com/addons/detail/adguard-%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/pdffkfellgipmhklpdmokmckkkfcopbh?hl=zh-CN">Adguard广告拦截器</a></h2><p>顾名思义，能够拦截大部分垃圾广告，支持自定义添加内容。安装好以后还会自动根据用户使用习惯优化拦截规则。</p><h2 id="Dark-mode"><a href="#Dark-mode" class="headerlink" title="Dark mode"></a><a href="https://microsoftEdge.microsoft.com/addons/detail/dark-mode/boldmdfoencgjfblcelefkjfafmpiahm?hl=zh-CN">Dark mode</a></h2><p>说白了就是浏览器夜间模式，不过我使用下来有些鸡肋，国内很多视频网站都做了关灯功能，腾讯视频干脆就是暗色调配色。而且和BBS论坛的刷新有冲突，安装了Dark Mode以后，在BBS论坛评论了不会自动刷新，严重影响体验。</p><h2 id="Undo-Closed-Tabs-Button"><a href="#Undo-Closed-Tabs-Button" class="headerlink" title="Undo Closed Tabs Button"></a><a href="https://microsoftEdge.microsoft.com/addons/detail/undo-closed-tabs-button/hfigadnahbppkfoomjopnladdokbmnkc?hl=zh-CN">Undo Closed Tabs Button</a></h2><p>诚如首页第一条评论所言，给残废的Edge添加了一些功能。能够恢复刚刚关闭的页面。想必这是用惯了国产浏览器的用户迫切需要的功能。</p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a><a href="https://microsoftEdge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey</a></h2><p>油猴插件是一个用户脚本管理插件，单纯的安装它并没有什么用处，但是配合广大开发者提供的脚本，这就是神器了，有了它们，你可以在B站解除港澳台地区限制，曲线救国看新番顺便学习繁体字，也可以破解大部分视频网站的vip限制（虽然清晰度差强人意）。<br><div class="note primary flat"><p>脚本推荐在<a href="https://greasyfork.org/zh-CN/scripts">Greasyfork</a>找。这是一个完全免费的插件分享网站。</p></div><br><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>顺便分享一下我常用的几个脚本。</span></div>    <div class="hide-content"><p><div class="note warning flat"><p>以下几个脚本需要通过Tampermonkey来管理，所以<strong>务必先安装Tampermonkey</strong>。</p></div></p><h3 id="AC-baidu-重定向优化百度搜狗谷歌必应搜索favicon双列"><a href="#AC-baidu-重定向优化百度搜狗谷歌必应搜索favicon双列" class="headerlink" title="AC-baidu:重定向优化百度搜狗谷歌必应搜索favicon双列"></a><a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97">AC-baidu:重定向优化百度搜狗谷歌必应搜索<em>favicon</em>双列</a></h3><p>脚本的作者更新非常积极，基本上三天两头一个小版本更新。这个脚本能够实现对大多数网页的页面重构，重定向。屏蔽广告，同时最新版本还增加了页面css自定义，美化过后的百度主页相当好看。当然高手玩家还能自己写更漂亮的网页界面。</p><h3 id="网盘助手"><a href="#网盘助手" class="headerlink" title="网盘助手"></a><a href="https://greasyfork.org/zh-CN/scripts/378301-%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B">网盘助手</a></h3><p>网盘助手的功能包括自动输入百度网盘提取码，生成直链，配合多线程下载工具使用可以显著改善百度网盘让人捉急的下载速度。多线程下载工具可以参考这篇教程:<a href="/posts/e332c532/" title="基于NDM和TamperMonkey脚本实现高速下载">基于NDM和TamperMonkey脚本实现高速下载</a></p><h3 id="百度文库下载"><a href="#百度文库下载" class="headerlink" title="百度文库下载"></a><a href="https://greasyfork.org/zh-CN/scripts/388805-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD">百度文库下载</a></h3><p>这个脚本在百度文库页面左上角加了一个下载按钮，点击后会自动跳转到别人提供的接口页面，因为接口是需要开发者自己付费建设的，所以大概会有关注公众号或者加群之类的推广要求。而且API生命周期完全取决于开发者意愿，好在这样的脚本还是非常多的，在<a href="https://greasyfork.org/zh-CN/scripts">Greasyfork</a>首页随意翻找就能找到替代品。</p><p><div class="note info flat"><p>个人认为单纯就非付费文档下载来说，直接使用<a href="https://www.bingdian001.com/?p=30">冰点下载器</a>下载后pdf转word可能还容易些。</p></div></p><h3 id="My-Novel-Reader"><a href="#My-Novel-Reader" class="headerlink" title="My Novel Reader"></a><a href="https://greasyfork.org/zh-CN/scripts/292-my-novel-reader">My Novel Reader</a></h3><p>小说阅读脚本，统一阅读样式，内容去广告、修正拼音字、段落整理，自动下一页。（直接复制粘贴了，在用网页看轻小说的时候很好用。</p><p><div class="note info flat"><p>至于手机阅读推荐下载<a href="http://www.legado.top/MyBookshelf/">“阅读APP”</a>，一个开源的阅读软件，书源导入教程可以查看这个<a href="https://github.com/XIU2/Yuedu">书源导入</a>,也可以在酷安的该软件评论区找到用户分享的书源。</p></div></p><h3 id="解除B站区域限制"><a href="#解除B站区域限制" class="headerlink" title="解除B站区域限制"></a><a href="https://greasyfork.org/zh-CN/scripts/25718-%E8%A7%A3%E9%99%A4b%E7%AB%99%E5%8C%BA%E5%9F%9F%E9%99%90%E5%88%B6">解除B站区域限制</a></h3><p>所以说港澳台大陆本就是一家嘛。</p></div></div></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>在<a href="/posts/498e6e74/" title="Atom的配置教程">Atom的配置教程</a>里就有提过，插件和脚本的探索是无止境的，只要还有富有想象力的开发者在就会有无数种脚本和插件，所以尽量朝着把浏览器配置的更加方便的方向走就好，可不要为了追求花里胡哨而安装一大堆无用的装饰品来拖慢运行速度，那就得不偿失了。以上，祝各位在应用市场和插件市场里玩的愉快。</p>]]></content>
    
    
    <summary type="html">新版Edge由于采用了Chromium内核，插件与Chrome通用，功能在一定程度上可以媲美Chrome，安装iGuge或者GoogleHelper以后，还可以直接访问google插件市场。</summary>
    
    
    
    <category term="🍨Akilarの棉花糖" scheme="https://akilar.top/categories/%F0%9F%8D%A8Akilar%E3%81%AE%E6%A3%89%E8%8A%B1%E7%B3%96/"/>
    
    
    <category term="🍨Win10" scheme="https://akilar.top/tags/%F0%9F%8D%A8Win10/"/>
    
  </entry>
  
  <entry>
    <title>20200731</title>
    <link href="https://akilar.top/posts/96805ea5/"/>
    <id>https://akilar.top/posts/96805ea5/</id>
    <published>2020-07-31T09:10:35.000Z</published>
    <updated>2020-10-24T13:59:30.375Z</updated>
    
    <content type="html"><![CDATA[<p>7月31日 星期五 阴转多云</p><p>感觉已经很久没有写日记了，这个月是实习转试用的第一个月，时间过得还算是相当快了。</p><p>月初的时候因为毕业那天拍毕业照把腰扭了，怎么说呢，这个应该算是旧伤，一方面是疫情期间呆在家里光吃了，体重水涨船高，肌肉力道反而往下掉。然后是总是心血来潮跟着老爹上山采药（emmm，这个好像和前半段说光顾着吃有点矛盾，反正还是缺乏锻炼），然后七拐八拐的走几十里山路，腰就应力性扭伤了，所以有旧疾就容易二次创伤嘛。</p><p>然后第一天还没感觉，但到了第二天就疼的受不了了，毕竟是腰伤，不是小事，赶紧请了半天假去医院。拍了个X光片，骨头没问题，也没有啥扭曲啊，突出啊，就是普通的腰肌劳损。吃药贴伤膏就过去了。</p><p>结果并没有，久坐大概会一直压迫坐骨神经，反正我只觉得一直腰疼。</p><p>兄弟买了瑜伽垫，只看他头两天在上面做仰卧起坐来着。之后，哈哈哈，连着三周大鱼大肉，所以锻炼是为了啥啊。</p><p>因为腰伤吃药，担心体检血检不正常，就推迟了半个月的体检日期，所以体检报告一致到20号才到手，连带着一系列转正手续都推到这么晚。</p><p>单位的设备供应很差劲，其他人原来一直以为我的电脑还有显示器是公司发的，可那是我从实习开始就一直自带的。而单位发的只有一台配置差的可怜的台式机，还只能接单屏，显示器也小小的，总之相当不愉快。</p><p>玲一直想着要聚会一次，但是甬哥的工作实在是忙碌，空余时间都由薛定谔说了算，眼看着一个个周末的可能性都被否定了，我们愉快的决定，不带他玩。（并没有啦，至少晚饭还是有叫他一起吃的）。</p><p>灵隐寺飞来峰原来是要先买飞来峰的套票，然后进去再买灵隐寺的香券才行。不过我们并不清楚灵隐寺在哪。懵懵懂懂的看到有几个溶洞，跟着别的游客就钻进去了。</p><p>玲在前面带路，然而她也不知道灵隐寺在哪。还带歪了一大批后面的游客，哈哈哈。</p><p>天还下着雨，寺里又有不少地方游客止步，本该很不错的避暑胜地一下子就变成了活受罪的长途跋涉。这让提议来此游玩的我感到相当内疚。甬哥这时候还在家里加班。</p><p>已经能够想象他晚饭时会说些什么。比如“傻了吧这天气跑去西湖逛，有这钱买门票活受罪，晚饭的时候海底捞点份排骨他不香吗？”嗯，如果是甬哥的话，他绝对会这么说的。</p><p>“哇塞你学的好像哦”，晨对此表示肯定。</p><p>妹妹到现在还在惊讶于小海的美容美发专业。话说玲时不时话痨的性格以前怎么没感受到。看妹妹对姐姐那样的无语表情，话痨应该不是刚出现的习惯。</p><p>海底捞没有我们想的那么夸张，就是服务相对周到的火锅店，而且服务员无时无刻不在续杯饮料的行为让我很不习惯。</p><p>倒放挑战这个游戏挺有意思的。玲和妹妹在模仿倒放时都会忍不住笑场，听自己声音的倒放时也会笑场，亲姐妹没错了，有时候我也想有个亲生的兄弟姐妹，虽然按我小时候的性格，大概是会变成天天打架的场面吧，emmm，要是差的年纪大太多倒是不会如此了，只是那样好古怪。我发现我对妻子的概念无甚追求，但是对于孩子却有很多期待与构想。但仔细思考就会发现我只是在构思一个新的童年，对自己儿时的很多幼稚行为感到后悔而想着补救罢了。</p><p>该死，不是每天一写而是月底一写果然还是会出现思绪乱飘的情况，大概除了这个时刻的我，其他人，包括明天的我也看不懂这篇写了些啥吧。</p><p>月中的兵检时，医生说我左心尖有杂音，18号体检时也是左心室高电压，然后老爹说我刚出生时因为早产所以心脏就没长好，嗯，后来是有长好的吧，不过血管和瓣膜还是会比正常人弱一点，所以原来小时候老爹让我多吃猪心说的并不是哄小孩的假话吗？我是真的需要缺啥补啥。总结一下就是原本能够正常运作的心脏因为体重增加，而心脏偏弱，所以有些隐患。啊，总之确实需要减肥了。</p><p>买了小米体重秤，和APP绑定的时候跳出来三年前的体重，比现在轻10公斤，联系心脏开始不对头的情况，额，我是真的拼了命在长肉。</p><p>锻炼锻炼的口号喊了一周，只做了一次有氧运动，然后出汗量超恐怖。可是腰伤又出来搅局了。甬哥帮我抹红花油的时候顺带说我肩颈背的肌肉都僵硬的不像话，啊，体质差的不像话。Kevin还想着高考结束来找我玩，到时候看到一个肥宅岂不是超级幻灭。嗯，我身边的人都是看着我长成肥宅的，大概不会幻灭。</p><p>题外话</p><p>全篇写了些什么玩意儿！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;7月31日 星期五 阴转多云&lt;/p&gt;
&lt;p&gt;感觉已经很久没有写日记了，这个月是实习转试用的第一个月，时间过得还算是相当快了。&lt;/p&gt;
&lt;p&gt;月初的时候因为毕业那天拍毕业照把腰扭了，怎么说呢，这个应该算是旧伤，一方面是疫情期间呆在家里光吃了，体重水涨船高，肌肉力道反而往下掉。</summary>
      
    
    
    
    <category term="🍬Akilarの泡泡糖" scheme="https://akilar.top/categories/%F0%9F%8D%ACAkilar%E3%81%AE%E6%B3%A1%E6%B3%A1%E7%B3%96/"/>
    
    
  </entry>
  
  <entry>
    <title>访问github或部署在gitpage上的网站过慢的解决方案</title>
    <link href="https://akilar.top/posts/61b3e163/"/>
    <id>https://akilar.top/posts/61b3e163/</id>
    <published>2020-07-29T15:53:50.000Z</published>
    <updated>2020-10-24T13:59:30.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>Github时不时抽风，老是访问不了，诚然，用科学上网能解决一切这类问题，但是，能不翻墙还是不要翻墙的好。这里采用的是通过修改本地hosts，配置域名和IP映射关系，这样一来，当我们访问github时，这些域名可以直接从本地hosts文件中获取IP，而不需要再去DNS服务器上询问一圈。从而提高访问速度。</p><h1 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h1><p>以Windows系统为例，<br>hosts的路径是<strong>C:\Windows\System32\drivers\etc</strong>，<br>打开后将以下内容复制到文件最下方。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">185.199.108.154               github.githubassets.com</span><br><span class="line">199.232.68.133                camo.githubusercontent.com</span><br><span class="line">199.232.68.133                github.map.fastly.net</span><br><span class="line">199.232.69.194                github.global.ssl.fastly.net</span><br><span class="line">140.82.113.3                  gist.github.com <span class="comment">#gist现在被墙的很彻底，就算添加进hosts也访问不了。</span></span><br><span class="line">185.199.108.153               github.io</span><br><span class="line">140.82.113.4                  github.com</span><br><span class="line">140.82.114.5                  api.github.com</span><br><span class="line">199.232.68.133                raw.githubusercontent.com</span><br><span class="line">199.232.68.133                user-images.githubusercontent.com</span><br><span class="line">199.232.68.133                favicons.githubusercontent.com</span><br><span class="line">199.232.68.133                avatars5.githubusercontent.com</span><br><span class="line">199.232.68.133                avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133                avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133                avatars2.githubusercontent.com</span><br><span class="line">199.232.68.133                avatars1.githubusercontent.com</span><br><span class="line">199.232.68.133                avatars0.githubusercontent.com</span><br><span class="line">140.82.114.9                  codeload.github.com</span><br><span class="line">52.217.83.84                  github-cloud.s3.amazonaws.com</span><br><span class="line">52.216.229.155                github-com.s3.amazonaws.com</span><br><span class="line">52.216.30.60                  github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">52.216.17.0                   github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">52.216.236.43                 github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br></pre></td></tr></table></figure><br>保存后，<kbd>win</kbd>+<kbd>X</kbd>，按<kbd>A</kbd>，以管理员权限启动powershell，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></p><p>刷新DNS缓存。之后就能变快了……<br><div class="note info flat"><p>才怪嘞，因为上述域名的IP是不停在变的，这一串映射仅仅适用于今天而已，到了明天，ip一变动，又登不上了，我总不可能天天来更新吧？</p></div></p><h1 id="使用爬虫脚本实时获取最新ip"><a href="#使用爬虫脚本实时获取最新ip" class="headerlink" title="使用爬虫脚本实时获取最新ip"></a>使用爬虫脚本实时获取最新ip</h1><div class="note primary flat"><p>转载自<a href="https://www.cnblogs.com/weiyinfu/p/6376420.html">weiyinfu的博客园</a>。以下脚本为weiyinfu所原创，笔者仅做转载</p></div><p>需要查询ip地址的域名有这么多。手动添加肯定是不乐意的了。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github.githubassets.com</span><br><span class="line">camo.githubusercontent.com</span><br><span class="line">github.map.fastly.net</span><br><span class="line">github.global.ssl.fastly.net</span><br><span class="line">gist.github.com  <span class="comment">#gist现在被墙的很彻底，加进hosts也无济于事</span></span><br><span class="line">github.io</span><br><span class="line">github.com</span><br><span class="line">api.github.com</span><br><span class="line">raw.githubusercontent.com</span><br><span class="line">user-images.githubusercontent.com</span><br><span class="line">favicons.githubusercontent.com</span><br><span class="line">avatars5.githubusercontent.com</span><br><span class="line">avatars4.githubusercontent.com</span><br><span class="line">avatars3.githubusercontent.com</span><br><span class="line">avatars2.githubusercontent.com</span><br><span class="line">avatars1.githubusercontent.com</span><br><span class="line">avatars0.githubusercontent.com</span><br><span class="line">codeload.github.com</span><br><span class="line">github-cloud.s3.amazonaws.com</span><br><span class="line">github-com.s3.amazonaws.com</span><br><span class="line">github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br></pre></td></tr></table></figure></p><p>因为github相关的诸多域名的ip是在变动的，为了能够实时获取最新的ip，我们可以使用爬虫来从<a href="https://ip.chinaz.com/">站长之家</a>或其余ip查询网站上爬取最新ip。</p><p>这里要用到python，<strong>安装推荐使用Anaconda</strong>，Anaconda安装方式推荐参看<a href="/posts/29cf4234/" title="Win10重装日记">Win10重装日记</a>的3.2章节。根据Anaconda版本与python版本的对照选择自己需要的Anaconda安装包，然后直接安装即可，路径建议修改为非系统盘，同时<strong>务必勾选将python路径加入到环境变量</strong>的选项。</p><p>新建一个python脚本——githosts.py（最简单的方法，新建一个txt文本文件，把下面的代码粘贴进去以后，修改后缀为.py）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要添加的域名</span></span><br><span class="line">s = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">github.githubassets.com</span></span><br><span class="line"><span class="string">camo.githubusercontent.com</span></span><br><span class="line"><span class="string">github.map.fastly.net</span></span><br><span class="line"><span class="string">github.global.ssl.fastly.net</span></span><br><span class="line"><span class="string">gist.github.com</span></span><br><span class="line"><span class="string">github.io</span></span><br><span class="line"><span class="string">github.com</span></span><br><span class="line"><span class="string">api.github.com</span></span><br><span class="line"><span class="string">raw.githubusercontent.com</span></span><br><span class="line"><span class="string">user-images.githubusercontent.com</span></span><br><span class="line"><span class="string">favicons.githubusercontent.com</span></span><br><span class="line"><span class="string">avatars5.githubusercontent.com</span></span><br><span class="line"><span class="string">avatars4.githubusercontent.com</span></span><br><span class="line"><span class="string">avatars3.githubusercontent.com</span></span><br><span class="line"><span class="string">avatars2.githubusercontent.com</span></span><br><span class="line"><span class="string">avatars1.githubusercontent.com</span></span><br><span class="line"><span class="string">avatars0.githubusercontent.com</span></span><br><span class="line"><span class="string">codeload.github.com</span></span><br><span class="line"><span class="string">github-cloud.s3.amazonaws.com</span></span><br><span class="line"><span class="string">github-com.s3.amazonaws.com</span></span><br><span class="line"><span class="string">github-production-release-asset-2e65be.s3.amazonaws.com</span></span><br><span class="line"><span class="string">github-production-user-asset-6210df.s3.amazonaws.com</span></span><br><span class="line"><span class="string">github-production-repository-file-5c1aeb.s3.amazonaws.com</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 引入必要的包库</span></span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.split():</span><br><span class="line">    url = <span class="string">&quot;https://ip.tool.chinaz.com/&quot;</span> + i.strip() <span class="comment">#组装待查询IP的URL</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(resp.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    x = soup.find(class_=<span class="string">&quot;IcpMain02&quot;</span>)</span><br><span class="line">    x = x.find_all(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;Whwtdhalf&quot;</span>) <span class="comment">#爬取IP</span></span><br><span class="line">    x = <span class="string">&quot;%s %s&quot;</span> % (x[5].string.strip(), i.strip()) <span class="comment">#将各组IP组合成最终结果。</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    ans.append(x)</span><br><span class="line"><span class="comment"># 将结果写入hosts</span></span><br><span class="line">hosts = r<span class="string">&quot;C:\Windows\System32\drivers\etc\hosts&quot;</span></span><br><span class="line">with open(hosts, <span class="string">&quot;r&quot;</span>) as f:</span><br><span class="line">    content = [i <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines() <span class="keyword">if</span> i.startswith(<span class="string">&quot;#&quot;</span>)]</span><br><span class="line">    content.extend(ans)</span><br><span class="line">with open(hosts, <span class="string">&quot;w&quot;</span>) as f:</span><br><span class="line">    f.write(<span class="string">&quot;\n&quot;</span>.join(content))</span><br></pre></td></tr></table></figure><p>然后把<code>githosts.py</code>放到<code>C:\Windows\System32</code>目录下（不放其实也可以，只是这样一来每次都要自己cd路径。）<br><kbd>win</kbd>+<kbd>X</kbd>，按<kbd>A</kbd>，<strong>以管理员权限启动</strong>Powershell，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python githosts.py</span><br></pre></td></tr></table></figure><br>然后脚本就会自动爬取最新的IP与域名到你的hosts文件中了。</p><h1 id="可能遇到的bug"><a href="#可能遇到的bug" class="headerlink" title="可能遇到的bug"></a>可能遇到的bug</h1><p>老老实实按照上面说的来，看仔细加粗的地方，就不会有下面的bug。</p><h2 id="没有权限修改hosts"><a href="#没有权限修改hosts" class="headerlink" title="没有权限修改hosts"></a>没有权限修改hosts</h2><p>这个应该是windows用户才会遇到，如果是脚本改写，那一定是没有用管理员权限启动Powershell，如果只是单纯手动添加hosts，那么可以直接复制hosts文件到有权限修改的目录下，然后把IP复制进去，接着再复制回原hosts路径，覆盖掉当前hosts。也可以考虑使用火绒安全管家，它的工具箱里有提供直接修改hosts的功能。</p><h2 id="python的环境变量没添加"><a href="#python的环境变量没添加" class="headerlink" title="python的环境变量没添加"></a>python的环境变量没添加</h2><p>那就是安装的时候没勾选，找到Anaconda的安装目录，在根目录里有python.exe文件，至于怎么添加还请自行百度。（其实卸载了Anaconda以后重新安装，这次记得勾选添加到环境变量也可以。顺带一提，卸载很慢哦，还不如老老实实自己添加一下）</p><h2 id="缺少requests包"><a href="#缺少requests包" class="headerlink" title="缺少requests包"></a>缺少requests包</h2><p>一般Anaconda是自带一些基础包库的，没有这个包说明你是从python官网下载的python安装包。不过就算缺少，也可以通过<code>pip install [packages]</code>来安装。遇到安装速度慢的情况，就去自行百度<strong>“pip install 换清华源”</strong>。</p><h2 id="报错“NoneType’-object-has-no-attribute-‘find-all”"><a href="#报错“NoneType’-object-has-no-attribute-‘find-all”" class="headerlink" title="报错“NoneType’ object has no attribute ‘find_all”"></a>报错“NoneType’ object has no attribute ‘find_all”</h2><p>该报错有两种情况。</p><p>最有可能是站长之家的域名网址变动，例如从ip.chinaz.com变为ip.tool.chinaz.com,将源代码中<code>url = &quot;https://ip.tool.chinaz.com/&quot; + i.strip()</code>里的域名改为现行网址即可。</p><p>如果是页面元素结构变化则需要通过F12查看原网页元素id或者class来确定元素位置重新改写源代码<code>x = x.find_all(&quot;span&quot;, class_=&quot;Whwtdhalf&quot;)</code>中需要find_all的元素（也即是我们需要的ip查询结果）</p><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><div class="note primary flat"><ol><li><a href="https://www.cnblogs.com/weiyinfu/p/6376420.html">github访问太慢解决方案</a>:脚本原作者。</li><li><a href="https://github.com/521xueweihan/GitHub520">GitHub520开源项目</a>:值得添加IP的域名参考。</li></ol></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h1&gt;&lt;p&gt;Github时不时抽风，老是访问不了，诚然，用科学上网能解决一切这类问题，但是，能不翻墙还是不要翻墙的好。这里采用的是通过修</summary>
      
    
    
    
    <category term="🍨Akilarの棉花糖" scheme="https://akilar.top/categories/%F0%9F%8D%A8Akilar%E3%81%AE%E6%A3%89%E8%8A%B1%E7%B3%96/"/>
    
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>从github下载release速度过慢的解决方案</title>
    <link href="https://akilar.top/posts/7357e481/"/>
    <id>https://akilar.top/posts/7357e481/</id>
    <published>2020-07-29T10:09:23.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>昨天刚学会了git clone的加速方式，正得意满满的时候发现直接fork仓库并不会把人家的release带过来，要下载release中的各种安装包，还是得老老实实的去原来的仓库找，而github中的release托管在amazon上，从国内访问时断时续的，虽说依靠wget或者curl可以解决断点续传的问题，但是依然无益于提高那慢的可怜的下载速度。虽然科学上网就能直接解决这一方案，但是在疫情期间见识到<strong>外国黑客组织举世攻华</strong>的场面以后，我总算明白大学时老师对我们说的建长城是为了保护我们的话了，基于这一理由，我暂时不建议各位翻墙了。这里提供两种不用翻墙的方案。</p><h1 id="使用Free-Download-Manager"><a href="#使用Free-Download-Manager" class="headerlink" title="使用Free Download Manager"></a>使用Free Download Manager</h1><p>找到需要下载的release中的安装包，右键，复制链接，粘贴到<a href="https://d.serctl.com/?dl_start">Free Download Manager</a>中，提交，稍等片刻后从它这里下载即可。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BDrelease%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200729101743352.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BDrelease%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200729101822410.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BDrelease%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200729101901681.png" alt=""></p><h1 id="使用芒果Geek开发的代下载服务"><a href="#使用芒果Geek开发的代下载服务" class="headerlink" title="使用芒果Geek开发的代下载服务"></a>使用芒果Geek开发的代下载服务</h1><p>这个是芒果Geek大神开发的代下载服务网站，操作方式和上述方案基本一致。<br>找到需要下载的release中的安装包，右键，复制链接，粘贴到<a href="https://g.widora.cn/">Github代下载服务</a>网站中，输入验证码，等待压缩完成后下载即可，体验上比Free Download Manager还要快一些。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BDrelease%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200729101743352.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/%E4%BB%8Egithub%E4%B8%8B%E8%BD%BDrelease%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200729102554936.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h1&gt;&lt;p&gt;昨天刚学会了git clone的加速方式，正得意满满的时候发现直接fork仓库并不会把人家的release带过来，要下载re</summary>
      
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>git clone过慢解决方案</title>
    <link href="https://akilar.top/posts/24a51aa5/"/>
    <id>https://akilar.top/posts/24a51aa5/</id>
    <published>2020-07-28T17:12:56.000Z</published>
    <updated>2020-10-24T13:59:30.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>git算得上是最舒适的版本控制软件了，但是因为各种各样的原因，git clone的时候往往只有几K每秒的速度，这对于急切的需要下载项目的我们来说无疑是无法接受的。其实通过一个很简单的方式就可以实现快速加载，虽然会有一些中间步骤，但是与等待几K每秒的龟爬下载比起来，这些中间步骤毫无疑问是可以接受的。</p><h1 id="注册码云"><a href="#注册码云" class="headerlink" title="注册码云"></a>注册码云</h1><p><a href="https://gitee.com/">码云</a>也是一个基于git的代码托管平台，而且由于是国内的服务器，所以下载速度还算令人满意（这里我真的很想说差强人意的，但是又怕被批我舞文弄墨）</p><h1 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h1><p>注册完毕后，在首页右上角的找到<strong>从Github/GitLab导入仓库</strong>选项。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/git-clone%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200728052051207.png" alt=""><br>然后在github那边找到我们要导入的仓库地址。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/git-clone%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200728052317216.png" alt=""><br>把它粘贴到码云的<strong>Git仓库URL</strong>栏中。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/git-clone%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200728052501594.png" alt=""><br>如果没兴趣在码云也配置一遍SSH keys的话，记得拉到下面<strong>点选公开</strong>。然后导入即可。</p><h1 id="直接从github导入"><a href="#直接从github导入" class="headerlink" title="直接从github导入"></a>直接从github导入</h1><p>用github授权以后可以直接从github导入已有仓库。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/git-clone%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200728052745339.png" alt=""></p><h1 id="从码云获得git-clone-url"><a href="#从码云获得git-clone-url" class="headerlink" title="从码云获得git clone url"></a>从码云获得git clone url</h1><p>进入码云的仓库，获取url，再用它来clone就快多了。<br><img src= "https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io@v2.1/img/loading.gif" data-lazy-src="https://akilar-1259097125.cos.ap-shanghai.myqcloud.com/git-clone%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/20200728053033220.png" alt=""></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>如果只是为了git别人的开源库，那么只看上文即可。如果是涉及到博客或者gitpages，也就是要git clone的是username.github.io这个仓库的时候，就要记得更换git remote origin，不然会提交到码云的仓库，那样对github那边是不会有任何修改的。</p><p>(其他涉及提交到github的仓库也是同样的操作）</p><p>在git clone下来的username.github.io里打开终端。输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote get-url origin</span><br><span class="line">&#x2F;&#x2F;输出的是https:&#x2F;&#x2F;gitee.com&#x2F;username&#x2F;username.github.io</span><br><span class="line">&#x2F;&#x2F;重新修改为github的远程仓库地址</span><br><span class="line"> git remote set-url origin https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git</span><br><span class="line"> &#x2F;&#x2F;如此一来就和从github上clone下来的一样了</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h1&gt;&lt;p&gt;git算得上是最舒适的版本控制软件了，但是因为各种各样的原因，git clone的时候往往只有几K每秒的速度，这对于急切的需</summary>
      
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="💻git" scheme="https://akilar.top/tags/%F0%9F%92%BBgit/"/>
    
  </entry>
  
  <entry>
    <title>20200630</title>
    <link href="https://akilar.top/posts/e0450404/"/>
    <id>https://akilar.top/posts/e0450404/</id>
    <published>2020-06-30T10:51:47.000Z</published>
    <updated>2020-10-24T13:59:30.375Z</updated>
    
    <content type="html"><![CDATA[<p>2020年6月30日 星期二 阴转多云</p><p>今天算是个特殊的日子，特地请了假回去参加毕业典礼·伪。真正的毕业典礼昨天晚上线上举行掉了，鉴于直播信号不好，所以我完全没有观礼的兴趣。</p><p>虽然昨天信誓旦旦的说要照常6：20起床，结果就是5：10的时候醒过来一次，看了下，闹钟君还没醒，那我再睡会。然后6:20把闹钟君一顿暴揍，结果它就撂挑子了，直到7:45左右才被兄弟窸窸窣窣的起床动静吵醒。单位离得近真好，天天可以睡到这么晚。</p><p>草草洗漱了一下直接出门了，坐电梯到楼下想起来没带伞然后又回去，到家时兄弟居然已经出门了，现在大概正在骑着电动滑板呲溜呲溜的出东北门了。</p><p>等我拿完长柄伞下楼呢，又想起来手机没带，这可不得了，本体落家里了，一着急转身时动作大了点，然后就听到啪嗒一声，我的<strong>折叠伞</strong>从单肩包的侧边包里掉了出来……人生如剧，我浑身是戏啊。</p><p>等我大摇大摆的戴好口罩来到小区门口等车的时候，公交车姗姗来迟，虽然是早高峰，但是还有空位，lucky。</p><p>错误的估计了早高峰的战力，车还没开出一站，就在狭窄的县道路段堵了20分钟，对面的老哥暴脾气上来了，要司机给他开门放他下去，扬言走路都比这快。然后……他一下车道路就通了。嗯，今个儿随机抽取一位幸运观众享受步行上班的快乐。</p><p>后面几站上车的都是出门的老人家，眼看着爱心专座已经被让完了，旁边有位白发苍苍的老奶奶，吾辈欣然让出座位，（比个大拇指，老铁们我做的对么？）奶奶人很好，下车前拉着我说她还有一站就到了，要把座位还我，哎呀这怎么好意思，再说旁边那位虎视眈眈的大妈可没有准备放过空位的打算，嘛，这次我不坐到终点站，就继续站着吧。</p><p>以往6:30的班次原来已经算畅通了，8点以后的班次是真的堵啊，不知道之前下车走路的那位老哥追上来了没有。千辛万苦的终于是到了换乘站，下车时被为了占座，手脚没个轻重的大叔刮到了眼眶，疼了好一会。</p><p>等到学校，手机只剩23%的电了，早高峰真耗电。楠皮吉皮赵皮们已经退完了空调、钥匙、水卡，施施然的去C区领毕业证书了，虽然我很想先去寝室充个电，但是果然还是先把钥匙退了然后赶紧追去C区吧。路上遇到骑着共享单车的波皮。</p><p>L：可惜没有后座。<br>B：你可以坐在轮胎上。</p><p>波特，你竟敢用我的魔法来对付我！</p><p>学校这边相对平缓的路面让我后悔没把大鱼板带来，原来的双翘板不适合在这种路面滑行，但是大鱼板毫无压力啊，说起来我也就买来的头个礼拜上下班用过，后来发现每次过路口就要停下来，而且还要提防电动车就不敢滑了。</p><p>终于杀到C区，从吉皮那里拿到了学士服，变身，今天不穿法师袍的都是麻瓜。早知道路上捡根树枝来也好啊。让我想想有没有什么可以让人开心的咒语。</p><p>拿到了心心念念的毕业证和学位证书，信息学院这边能拿走录取通知书做纪念，我是转专业的，录取通知书要回建工学院拿，好在就在楼上。</p><p>收回前言，貌似除了信息学院有这份心，其他学院都没有发还录取通知书留作纪念的意思。</p><p>楠皮吉皮面子大，副院长主动过来合影，咱也蹭一蹭合影。学士帽带上去以后显得我越发大饼脸，最近伙食太好了，自己做饭，餐餐不剩，1703养猪场实锤了。</p><p>然后就是党员与会，其实就是讲党组织关系转移，和楠皮吉皮几个霸占了空调前面的位置，把空调挡的严严实实，一夫当关，万夫莫开。</p><p>遇到一个小哥问我们学士服在哪里领，这个问题问得好，一看小哥就是赶回来领毕业证，对各种状况不了解的样子，那就好办了。</p><p>L：这个学士服啊，就每个班开学会发一颗种子，然后种在那边，……<br>J：又在皮了！</p><p>真的很佩服我自己，能够一本正经的和人家讲这样的事情。</p><p>然后就是拍照了，虽然来时路上已经看到很多很多毕业生在拍照了，但是呢，真的到自己拍照时果然是不一样啊，辅导员非常忙，但是楠皮还是把他拉过来了，楠皮面子果然大，我大概要把自己的千层下巴擀平才能在面子上与他一较高下。</p><p>校门口，图书馆，水晶剧院统统打卡，遗憾的是没去教学区打卡，A区后面的那个茶馆本该是最好的拍照地点的。</p><p>寝室的合照算是在这次拍了个痛快，在这之前，同时有我们寝室四个人存在的照片只有一张，然后我又被拍成了表情包。唉，报应不爽啊，平时都是我做其他人的表情包的。屠魔的少年终究成魔x2。</p><p>拍照的时候有几个圈子一直跟着我们一行人，大家互相帮忙拍照，等我开始感慨素不相识也能如此互帮互助的时候，他们说都是一个专业的，应该的。我……我承认我哪怕到毕业这天还是没记住同班同学的脸。</p><p>班级大合照时，2班的同学没来齐，这是理所当然的吧，2班的凝聚力全靠咱617二班行政活动中心吊着命。宇来老师打着遮阳伞过来了，真遗憾，我本来还想着跑去A区办公室把他抓过来的，想想老师不舍得学生，怕伤感不愿来拍照，然后学生把老师绑过来的画面才是我想要的那种毕业氛围啊。</p><p>被太阳暴晒，楠皮吉皮跑去参加副院长的饭局了，大合照没有他们，以后同学会再聚首，一定要好好笑话一番。</p><p>等到校门口大合照也拍完了，在那之前先吐槽一波，校门口那个名碑上面是真的烫啊，铁板烧，卖铁板烧。</p><p>烙完了屁股总算是能回去了，什么？还有图书馆？抱歉，不想去了。我要喝水。路上遇到了骑着共享电瓶车匆匆赶往图书馆拍大合照的楠皮和吉皮，毫无理由的就想起了饭卡里还有好些钱没花，我也不知道怎么就把这两件事联系到一起了，总之报复性消费走起，结果到了超市只是买了一瓶快乐水。</p><p>回寝室才充了几分钟的电，昊昊发来消息，邀请我一点半去图书馆拍照，额，话说之前从校门口跳下来的时候好些扭到腰了，祈祷千万别是腰伤复发啊。</p><p>堪堪充电到30%，再怎么快充也架不住没时间给我啊。不过大一室友情还是要顾一顾的，老潘也来，大家一起久违的调侃龙哥吧。</p><p>啊，是活的龙哥，会动的！之前只能在朋友圈里见到照片上的龙哥，怎么说也是252的浪里小白龙啊，就是感觉龙哥的发际线又高了不少。</p><p>信息学院和建工学院的学士服都是明黄色领巾，在下混入其中毫无违和感。老潘的领巾是灰色的，嗯，违和感拉满。</p><p>龙：我觉得老潘这个应该给辉辉穿。<br>辉：为什么嘞？<br>龙：你看你名字里有个辉，老潘这个是灰色。<br>昊：好冷的笑话。</p><p>龙哥，求你了，你真的没有幽默的天赋。再说我名字的辉就该是指明黄色吧！</p><p>陆陆续续的见到了大一原专业的同学，结果他们的名字我都叫的上来。看来归属感这个东西比较先入为主啊。</p><p>nice，早上软工专业的图书馆大合照没凑上，下午跑回给排水来蹭个打卡。然后继续在校门口打卡。铁板烧，卖铁板烧x2。真的很喜欢这边的班级氛围。</p><p>回去时就剩楠皮和赵皮了，吉皮早早的跑去赶动车了。于是就到今天的重磅环节了。之前宿管在离校之前露出了獠牙，因为吉皮不愿意把不要的教材低价卖给他，他就一路追到寝室来，寝室门关上了还要跑回楼下来拿了备用钥匙强行闯入，进来就大骂吉皮不懂规矩，说什么他在学校十多年了，这的书都归他卖云云，还勒令吉皮把寝室当初装修贴的墙纸统统撕掉，说什么这个是垃圾。</p><p>我那个暴脾气哦，当时那是我不在，想我正面硬刚马伟峰，阴阳怪气王建芬，中期答辩怼徐昶，毕设调侃程志刚……今天，我刘怼怼就要，钓！鱼！执！法！</p><p>首先，把楠皮不要的书和赵皮不要的书堆成三份，嗯，612还有一堆书，等会下楼大摇大摆的从宿管面前走过，看他拦不拦我。</p><p>第一次，宿管忙着拦别人，我真就大摇大摆从门前过，书卖了11块钱。额，这次钓鱼失败，再来，一定是书不够多。</p><p>第二次，把两摞书叠起来，大摇大摆从门前过，宿管忙着拦那个拿推车往外运书的哥们……我，我连钓鱼执法的实力都不如人家啊！嗯，第二次卖书卖了15块钱，美滋滋。不对，调整心情，三，二，一，吉皮啊！我对不起你啊！是我没用，连钓鱼执法给你报仇都做不到啊，5555！噫~太浮夸了。</p><p>叫了一辆货拉拉，把寝室搬空掉，有对面寝室的同学帮忙，总算是赶在5点前搬空了寝室。哼，贪得无厌的宿管，让你惦记咱们寝室的东西，我搬空了也不给你留一样值钱玩意儿。然后波皮表示612的东西留下的也不要了，哈哈哈哈，搬仓鼠过境，值钱玩意儿都扫走，我感觉此刻的我就是个贼偷，还是最低级的那种，见啥玩意儿都想抄走，毫无追求。</p><p>货拉拉的司机师傅很有意思，他之前是开公交车的，现在在屏峰上班，开货拉拉是兼职，因为我预约的时间很晚，刚好在他下班以后，正好可以让他挣个外快，所以我得以享受一位拿着A3驾照的司机来为我开搬家货车的至尊服务，回去的路上晚高峰，师傅反手窜进一个小道，一路畅通无阻的开到目的地，期间我又知道他以前还开过公务车，洒家今个儿算是值回票价了。</p><p>幸好卸货的地方里货梯不远，一趟搬完，腰伤确定是复发了，说起来在612淘到了一盒伤膏，洗完澡就去贴上。</p><p>晚饭蒙兄弟照顾，炒了个辣味鸡块。抱歉我实在没法昧着良心说这个是辣子鸡丁。不过好歹很下饭。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020年6月30日 星期二 阴转多云&lt;/p&gt;
&lt;p&gt;今天算是个特殊的日子，特地请了假回去参加毕业典礼·伪。真正的毕业典礼昨天晚上线上举行掉了，鉴于直播信号不好，所以我完全没有观礼的兴趣。&lt;/p&gt;
&lt;p&gt;虽然昨天信誓旦旦的说要照常6：20起床，结果就是5：10的时候醒过来一</summary>
      
    
    
    
    <category term="🍬Akilarの泡泡糖" scheme="https://akilar.top/categories/%F0%9F%8D%ACAkilar%E3%81%AE%E6%B3%A1%E6%B3%A1%E7%B3%96/"/>
    
    
    <category term="🎓毕业" scheme="https://akilar.top/tags/%F0%9F%8E%93%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
</feed>
