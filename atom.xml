<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akilarの糖果屋</title>
  
  <subtitle>Akilar.top</subtitle>
  <link href="https://akilar.top/atom.xml" rel="self"/>
  
  <link href="https://akilar.top/"/>
  <updated>2021-06-30T15:51:41.000Z</updated>
  <id>https://akilar.top/</id>
  
  <author>
    <name>Akilar</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NPM插件的开发</title>
    <link href="https://akilar.top/posts/e44fb560/"/>
    <id>https://akilar.top/posts/e44fb560/</id>
    <published>2021-06-30T15:51:41.000Z</published>
    <updated>2021-06-30T15:51:41.000Z</updated>
    
    <content type="html"><![CDATA[<details cyan><summary> 点击查看更新记录 </summary>              <div class='content'>              <div class="timeline"><p class='p h2'>更新记录</p><div class="timenode"><div class="meta"><p><p>2021-06-30:初步讲解可能用到的api</p></p></div><div class="body"><ol><li>hexo过滤器（Filter）API用法</li><li>hexo生成器（Generator）API用法</li><li>hexo注入器（Injector）API用法</li><li>hexo辅助函数（Helper）API简单用法</li></ol></div></div></div>              </div>            </details><details yellow><summary> 点击查看参考教程 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参考方向</th><th style="text-align:left">教程原贴</th></tr></thead><tbody><tr><td style="text-align:left">高情商：有效治疗低血压患者</td><td style="text-align:left"><a href="https://hexo.io/zh-cn/api/">Hexo API文档</a></td></tr><tr><td style="text-align:left">参考了页面生成插件的写法</td><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jerryc127/butterfly-plugins"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jerryc127&repo=butterfly-plugins&show_owner=true"/></a></td></tr><tr><td style="text-align:left">参考了页面植入式插件的写法，以及hexo api的具体应用</td><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Zfour/hexo-swiper-bar"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Zfour&repo=hexo-swiper-bar&show_owner=true"/></a></td></tr><tr><td style="text-align:left">编译stylus文件</td><td style="text-align:left"><a href="https://www.stylus-lang.cn/">stylus官方文档</a></td></tr><tr><td style="text-align:left">编译pug文件</td><td style="text-align:left"><a href="https://www.npmjs.com/package/pug">PUG官方文档</a></td></tr></tbody></table></div>              </div>            </details><details red><summary> 店长的碎碎念 </summary>              <div class='content'>              <p>本文讨论的npm插件化，针对的是那种可以放在单独的页面魔改，或者代码可以剥离出来，通过某个特定的页面容器进行挂载的植入式魔改方案。</p><p>例如糖果屋的gitcalendar，页面轮播图，以及所有的侧栏魔改就是植入式插件。而信封式留言板，朋友圈前端页面则是页面式插件。<del>糖果屋微调合集基本上是不可能写成插件了。倒不是说理论上不可行。而是时间成本不对等。毕竟改10行代码的事情非要去写几十行的插件，得不偿失。</del></p><p>它们的共同特点就是<span class='nota' data-nota='高内聚低耦合，是软件工程中的概念，是判断软件设计好坏的标准，主要用于程序的面向对象的设计，主要看类的内聚性是否高，耦合度是否低。目的是使程序模块的可重用性、移植性大大增强。通常程序结构中各模块的内聚程度越高，模块间的耦合程度就越低。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事，它描述的是模块内的功能联系；耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。'>高内聚低耦合</span>。除了必要的挂载容器以及适配样式和主题相关以外，理论上可以把它们迁移到任何其他主题。<br>这就给魔改方案普及化提供了可能性。只需要更换挂载容器或者附加一些样式补丁，我们就能很轻易的在其他主题也用上这些方案。<br>本文提供的详细的教程拆解和具体示例。</p>              </div>            </details><h1 id="NPM插件的发布"><a href="#NPM插件的发布" class="headerlink" title="NPM插件的发布"></a>NPM插件的发布</h1><p>此部分内容已经在<a href="/posts/3e956346/">NPM图床的使用技巧</a>中进行过详细描述。关于账户注册和插件发布的部分本帖不会再详细展开。以下仅针对本地开发流程进行阐述。</p><h1 id="教程拆解"><a href="#教程拆解" class="headerlink" title="教程拆解"></a>教程拆解</h1><ol><li>新建文件夹，在里面运行<code>npm init</code>以后，按照指示，初始化<code>npm</code>插件。我们首先会获得一个<code>package.json</code>。以下是我的<code>package.json</code>内容。此处除了初始化默认生成的内容外，我还指定了<code>pug</code>依赖的版本,没有特殊版本需求的话，不写其实也没有关系。<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-butterfly-artitalk-pro&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;A talk plugin for theme-butterfly based on artitalk&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;eslint .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;directories&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: <span class="string">&quot;./lib&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;lib/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;index.js&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;filter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;artitalk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;butterfly&quot;</span>,</span><br><span class="line">    <span class="string">&quot;theme-butterfly&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sidebar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;akilarlxh&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;Apache-2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pug&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/Akilarlxh/hexo-butterfly-artitalk-pro.git&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后是新建三个文件（或者文件目录），<ul><li><code>index.js</code>，这是插件的主要脚本，负责处理各类数据和进行插件植入操作。</li><li><code>README.md</code>，这是插件文档，你可以把它认为是你插件的说明书。出于开发者的专业素养，建议详细编写你的插件文档。</li><li><code>lib/</code>，这个目录下我们预计存放一些静态资源。当然你也不一定非要在这里放静态资源。放在根目录也同样可以。专门建个资源目录只是为了便于管理而已。</li></ul></li><li>在编写一款hexo插件之前，我们应当确认会用到哪些配置项。<div class="tabs" id="plugins-"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#plugins--1">容器挂载型</button></li><li class="tab"><button type="button" data-href="#plugins--2">页面生成型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="plugins--1"><p>以容器挂载型插件为例,必要的内容有插件开关，<span class='nota' data-nota='当有多个植入插件在同一个容器内请求挂载时，就需要用到过滤器优先权来决定他们的执行顺序，数字越小，则优先权越高，相对就越早执行。'>过滤器优先权</span>，应用页面，挂载容器。<br>  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config_name:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="plugins--2"><p>以页面生成型插件为例,必要的内容有插件开关，页面生成路径,<span class='nota' data-nota='此处指页面的特有变量'>front_matter</span>。<br>  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config_name:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开关</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#生成的页面路径</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#页面的front_matter</span></span><br><span class="line">    <span class="attr">title:</span></span><br><span class="line">    <span class="attr">description:</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li>在确定变量以后，我们就可以开始在<code>index.js</code>中编写插件的具体内容了。<div class="tabs" id="indexjs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#indexjs-1">容器挂载型</button></li><li class="tab"><button type="button" data-href="#indexjs-2">页面生成型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="indexjs-1"><ul><li>以容器挂载型为例。首先是整体的文件目录结构<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|__lib</span><br><span class="line">  |__html.pug  <span class="comment">#插件的主要dom结构</span></span><br><span class="line">  |__style.css <span class="comment">#可能用到的自定义样式</span></span><br><span class="line">  |__script.js <span class="comment">#可能用到的自定义脚本</span></span><br><span class="line">|__index.js</span><br><span class="line">|__package.json</span><br></pre></td></tr></table></figure></li><li>打开<code>index.js</code>,开始编写脚本。请详细阅读以下代码中的注释。我会尽量逐行解释。为了便于区分，我们约定不再变动的为常量，用<code>const</code>声明。会变动的为变量，用<code>var</code>声明。（事实上在这个<code>index.js</code>中，<code>const</code>和<code>var</code>的生命周期没多大意义了。就算全部用<code>var</code>也没事）<br><div class="note info flat"><p>考虑到以下代码内容较多，建议复制到自己的编辑器内进行查看。您也可以将以下代码作为通用模板进行修改，来编写属于您自己的插件。</p></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// 全局声明插件代号，插件的名字随你定</span></span><br><span class="line"><span class="comment">// 此处是为了便于区分多个插件的注入函数名，确保不重名。</span></span><br><span class="line"><span class="keyword">const</span> pluginname = <span class="string">&#x27;plugin_name&#x27;</span></span><br><span class="line"><span class="comment">// 全局声明依赖，此处用到的都是hexo的api或者pug插件的api</span></span><br><span class="line"><span class="keyword">const</span> pug = <span class="built_in">require</span>(<span class="string">&#x27;pug&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlFor = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util&#x27;</span>).url_for.bind(hexo)</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_generate&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 首先获取整体的配置项名称,</span></span><br><span class="line">  <span class="comment">// 这行的写法可以保证不管是写在主题配置文件里</span></span><br><span class="line">  <span class="comment">// 还是站点配置文件里，都能读取到配置项。</span></span><br><span class="line">  <span class="keyword">const</span> config = hexo.config.config_name || hexo.theme.config.config_name</span><br><span class="line">  <span class="comment">// 如果配置开启</span></span><br><span class="line">  <span class="keyword">if</span> (!(config &amp;&amp; config.enable)) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 集体声明配置项，将我们用到的配置项全部封装到data里</span></span><br><span class="line">  <span class="comment">// 之后方便我们统一调用。</span></span><br><span class="line">  <span class="comment">// 同时活用三元运算符，给配置项设置默认配置内容。</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      <span class="attr">enable_page</span>: config.enable_page ? config.enable_page : <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="attr">layout_type</span>: config.layout.type,</span><br><span class="line">      <span class="attr">layout_name</span>: config.layout.name,</span><br><span class="line">      <span class="attr">layout_index</span>: config.layout.index ? config.layout.index : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 渲染页面，此处调用了pug的api，具体写法可以查看最上方的参考教程。</span></span><br><span class="line">  <span class="keyword">const</span> temple_html_text = config.temple_html ? config.temple_html : pug.renderFile(path.join(__dirname, <span class="string">&#x27;./lib/html.pug&#x27;</span>),data)</span><br><span class="line">  <span class="comment">//cdn资源声明，来引用必要的依赖或者样式。</span></span><br><span class="line">    <span class="comment">//样式资源</span></span><br><span class="line">  <span class="keyword">const</span> css_text = <span class="string">`&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/package_name/lib/style.css&quot;&gt;`</span></span><br><span class="line">    <span class="comment">//脚本资源</span></span><br><span class="line">  <span class="keyword">const</span> js_text = <span class="string">`&lt;script src=&quot;https://cdn.jsdelivr.net/npm/package_name/lib/script.js&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">  <span class="comment">//注入容器声明，用来判断注入容器类型。</span></span><br><span class="line">  <span class="comment">// ==========start=============</span></span><br><span class="line">  <span class="keyword">var</span> get_layout</span><br><span class="line">  <span class="comment">//若指定为class类型的容器</span></span><br><span class="line">  <span class="comment">// 因为各个配置项内容已经封装在data数据集里</span></span><br><span class="line">  <span class="comment">// 我们就需要用data.name的方式来访问</span></span><br><span class="line">  <span class="keyword">if</span> (data.layout_type === <span class="string">&#x27;class&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//则根据class类名及序列获取容器</span></span><br><span class="line">    get_layout = <span class="string">`document.getElementsByClassName(&#x27;<span class="subst">$&#123;data.layout_name&#125;</span>&#x27;)[<span class="subst">$&#123;data.layout_index&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若指定为id类型的容器</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (data.layout_type === <span class="string">&#x27;id&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 直接根据id获取容器</span></span><br><span class="line">    get_layout = <span class="string">`document.getElementById(&#x27;<span class="subst">$&#123;data.layout_name&#125;</span>&#x27;)`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若未指定容器类型，默认使用id查询</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    get_layout = <span class="string">`document.getElementById(&#x27;<span class="subst">$&#123;data.layout_name&#125;</span>&#x27;)`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// =============end===============</span></span><br><span class="line">  <span class="comment">//挂载容器脚本，用来注入上方编译好的插件dom结构</span></span><br><span class="line">  <span class="keyword">var</span> user_info_js = <span class="string">`&lt;script data-pjax&gt;</span></span><br><span class="line"><span class="string">                        function <span class="subst">$&#123;pluginname&#125;</span>_injector_config()&#123;</span></span><br><span class="line"><span class="string">                          var parent_div_git = <span class="subst">$&#123;get_layout&#125;</span>;</span></span><br><span class="line"><span class="string">                          var item_html = &#x27;<span class="subst">$&#123;temple_html_text&#125;</span>&#x27;;  </span></span><br><span class="line"><span class="string">                          parent_div_git.insertAdjacentHTML(&quot;afterbegin&quot;,item_html)</span></span><br><span class="line"><span class="string">                          console.log(&#x27;已挂载<span class="subst">$&#123;pluginname&#125;</span>&#x27;)  </span></span><br><span class="line"><span class="string">                          &#125;</span></span><br><span class="line"><span class="string">                        if( <span class="subst">$&#123;get_layout&#125;</span> &amp;&amp; (location.pathname ===&#x27;<span class="subst">$&#123;data.enable_page&#125;</span>&#x27;|| &#x27;<span class="subst">$&#123;data.enable_page&#125;</span>&#x27; ===&#x27;all&#x27;))&#123;</span></span><br><span class="line"><span class="string">                        <span class="subst">$&#123;pluginname&#125;</span>_injector_config()</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                      &lt;/script&gt;`</span></span><br><span class="line">  <span class="comment">// 使用hexo提供的注入器API，将对应的html代码片段注入到对应的位置</span></span><br><span class="line">  <span class="comment">// 此处利用挂载容器实现了二级注入，也就是所谓的套娃，</span></span><br><span class="line">  <span class="comment">// 注入用户脚本 将上文的容器脚本注入到body标签的结束符之前。</span></span><br><span class="line">  hexo.extend.injector.register(<span class="string">&#x27;body_end&#x27;</span>, user_info_js, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">  <span class="comment">// 注入脚本资源，将上文的容器脚本注入到body标签的结束符之前。</span></span><br><span class="line">  hexo.extend.injector.register(<span class="string">&#x27;body_end&#x27;</span>, js_text, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">  <span class="comment">// 注入样式资源，将上文的容器脚本注入到head标签的结束符之前。</span></span><br><span class="line">  hexo.extend.injector.register(<span class="string">&#x27;head_end&#x27;</span>, css_text, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 此处利用hexo提供的辅助函数来获取主题配置文件的配置内容，</span></span><br><span class="line"><span class="comment">// 如果不用辅助函数的话，最多只能读取到站点配置文件的内容。</span></span><br><span class="line">hexo.extend.helper.register(<span class="string">&#x27;priority&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 过滤器优先级，priority 值越低，过滤器会越早执行，默认priority是10</span></span><br><span class="line">  <span class="keyword">const</span> pre_priority = hexo.config.config_name.priority || hexo.theme.config.config_name.priority</span><br><span class="line">  <span class="comment">// 此处设置过滤器优先级的预设值</span></span><br><span class="line">  <span class="keyword">const</span> priority = pre_priority ? pre_priority : <span class="number">10</span></span><br><span class="line">  <span class="comment">// 返回最终的过滤器优先级数值</span></span><br><span class="line">  <span class="keyword">return</span> priority</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="indexjs-2"><p>  页面生成型的代码基本完全复用了由<a href="https://github.com/jerryc127/butterfly-plugins">@butterfly主题作者jerry</a>开发的主题插件结构。以下仅做了具体注释。</p><ul><li>以页面生产性为例。首先是整体的文件目录结构<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|__lib</span><br><span class="line">  |__html.pug  <span class="comment">#插件的主要dom结构</span></span><br><span class="line">  |__style.css <span class="comment">#可能用到的自定义样式</span></span><br><span class="line">  |__script.js <span class="comment">#可能用到的自定义脚本</span></span><br><span class="line">|__index.js</span><br><span class="line">|__package.json</span><br></pre></td></tr></table></figure></li><li>打开<code>index.js</code>,开始编写脚本。请详细阅读以下代码中的注释。我会尽量逐行解释。为了便于区分，我们约定不再变动的为常量，用<code>const</code>声明。会变动的为变量，用<code>let</code>或者<code>var</code>声明。（事实上在这个<code>index.js</code>中，<code>const</code>、<code>let</code>和<code>var</code>的生命周期没多大意义了。就算全部用<code>var</code>也没事）<br><div class="note info flat"><p>考虑到以下代码内容较多，建议复制到自己的编辑器内进行查看。您也可以将以下代码作为通用模板进行修改，来编写属于您自己的插件。</p></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// 全局声明依赖，此处用到的都是hexo的api或者pug插件的api</span></span><br><span class="line"><span class="keyword">const</span> pug = <span class="built_in">require</span>(<span class="string">&#x27;pug&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> urlFor = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util&#x27;</span>).url_for.bind(hexo)</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用hexo的生成器API</span></span><br><span class="line"><span class="comment">// 此处的pathname指生成的页面名称</span></span><br><span class="line">hexo.extend.generator.register(<span class="string">&#x27;pathname&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 首先获取整体的配置项名称,</span></span><br><span class="line">  <span class="comment">// 这行的写法可以保证不管是写在主题配置文件里</span></span><br><span class="line">  <span class="comment">// 还是站点配置文件里，都能读取到配置项。</span></span><br><span class="line">  <span class="keyword">const</span> config = hexo.config.config_name || hexo.theme.config.config_name</span><br><span class="line">  <span class="comment">// 如果配置开启</span></span><br><span class="line">  <span class="keyword">if</span> (!(config &amp;&amp; config.enable)) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 集体声明配置项，将我们用到的配置项全部封装到data里</span></span><br><span class="line">  <span class="comment">// 之后方便我们统一调用。</span></span><br><span class="line">  <span class="comment">// 同时活用三元运算符，给配置项设置默认配置内容。</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="comment">//考虑到空页面没啥可参考的配置项，</span></span><br><span class="line">    <span class="comment">// 这里用hexo-butterfly-envelope的一些配置项作为写法示例</span></span><br><span class="line">    <span class="attr">author</span>: hexo.config.author,</span><br><span class="line">    <span class="attr">cover</span>: config.cover ? urlFor(config.cover) : <span class="string">&quot;https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: config.message ?  config.message : [<span class="string">&quot;有什么想问的？&quot;</span>,<span class="string">&quot;有什么想说的？&quot;</span>,<span class="string">&quot;有什么想吐槽的？&quot;</span>,<span class="string">&quot;哪怕是有什么想吃的，都可以告诉我哦~&quot;</span>],</span><br><span class="line">    <span class="attr">bottom</span>: config.bottom ? config.bottom : <span class="string">&quot;自动书记人偶竭诚为您服务&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: config.height ? config.height : <span class="string">&quot;1050px&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 渲染页面，此处调用了pug的api，具体写法可以查看最上方的参考教程。</span></span><br><span class="line">  <span class="keyword">const</span> content = pug.renderFile(path.join(__dirname, <span class="string">&#x27;./lib/html.pug&#x27;</span>), data)</span><br><span class="line">  <span class="comment">// 页面生成的访问路径</span></span><br><span class="line">  <span class="keyword">const</span> pathPre = config.path || <span class="string">&#x27;pathname&#x27;</span></span><br><span class="line">  <span class="comment">// 获取主题默认生成页面的基本配置内容，样式。</span></span><br><span class="line">  <span class="keyword">let</span> pageDate = &#123;</span><br><span class="line">    <span class="attr">content</span>: content</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取页面的front_matter</span></span><br><span class="line">  <span class="keyword">if</span> (config.front_matter) &#123;</span><br><span class="line">    pageDate = <span class="built_in">Object</span>.assign(pageDate, config.front_matter)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">path</span>: pathPre + <span class="string">&#x27;/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: pageDate,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;post&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li>编写完毕以后我们就可以通过在插件文件夹根目录下执行<code>npm publish</code>指令来发布插件。</li><li>发布成功后，在hexo博客根目录<code>[Blogroot]</code>下运行安装插件指令安装你的插件。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install package_name --save</span><br></pre></td></tr></table></figure></li><li>到主题配置文件<code>_config.butterfly.yml</code>或者<code>_config.yml</code>里添加配置项。运行<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code>即可。</li><li>当然以上说的都是理想状态。一般我们都会遇到各种各样的报错。这时候我们不用着急去修改插件版本并重新发布、重新安装。可以直接在hexo博客的<code>[Blogroot]/node_modules</code>目录下找到我们的插件文件夹，然后在此处进行修改，并进行本地调试。等到在hexo博客处调整通过了。再将代码逐一复制到插件开发文件夹处。发布正式版本。<h1 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h1>拟以hexo-butterfly-artitalk-pro为示例，结合了页面生成和侧栏插件注入的内容。插件待编写。敬请期待。</li></ol><p><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/fVwSyU7abiN1zW6.jpg" alt="施工中。。。。。。"></p><h1 id="更多已开发插件"><a href="#更多已开发插件" class="headerlink" title="更多已开发插件"></a>更多已开发插件</h1><p>以下是一些已经完成的插件源码。权且作为参考。开发模式基本同本帖所讨论的模板方案。在涉及一些辅助函数的时候也有详细注释。各位开发者可以选择适当的内容作为参照。</p><div class="table-container"><table><thead><tr><th style="text-align:left">插件仓库</th><th style="text-align:left">类型</th><th style="text-align:left">参考方向推荐</th></tr></thead><tbody><tr><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/akilarlxh/hexo-butterfly-clock"><img src="https://github-readme-stats.vercel.app/api/pin/?username=akilarlxh&repo=hexo-butterfly-clock&show_owner=true"/></a></td><td style="text-align:left">容器植入式</td><td style="text-align:left">侧栏魔改方案插件化</td></tr><tr><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/akilarlxh/hexo-butterfly-wowjs"><img src="https://github-readme-stats.vercel.app/api/pin/?username=akilarlxh&repo=hexo-butterfly-wowjs&show_owner=true"/></a></td><td style="text-align:left">容器植入式</td><td style="text-align:left">依赖添加，补丁添加，通过配置项给页面dom动态添加class，外挂标签插件植入</td></tr><tr><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/akilarlxh/hexo-butterfly-envelope"><img src="https://github-readme-stats.vercel.app/api/pin/?username=akilarlxh&repo=hexo-butterfly-envelope&show_owner=true"/></a></td><td style="text-align:left">页面生成式</td><td style="text-align:left">单独页面生成模板。动态生成css</td></tr><tr><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/akilarlxh/hexo-butterfly-fcircle"><img src="https://github-readme-stats.vercel.app/api/pin/?username=akilarlxh&repo=hexo-butterfly-fcircle&show_owner=true"/></a></td><td style="text-align:left">页面生成式</td><td style="text-align:left">单独页面生成模板</td></tr><tr><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/akilarlxh/hexo-butterfly-swiper"><img src="https://github-readme-stats.vercel.app/api/pin/?username=akilarlxh&repo=hexo-butterfly-swiper&show_owner=true"/></a></td><td style="text-align:left">容器植入式</td><td style="text-align:left">结合文章front-matter进行筛选，实现与post的front-matter联动</td></tr><tr><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/akilarlxh/hexo-filter-gitcalendar"><img src="https://github-readme-stats.vercel.app/api/pin/?username=akilarlxh&repo=hexo-filter-gitcalendar&show_owner=true"/></a></td><td style="text-align:left">容器植入式</td><td style="text-align:left">多主题适配，读取主题，自动加载容器</td></tr></tbody></table></div><h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h1><div class='checkbox red'><input type="checkbox" />            <p>讲解可能用到的一些api</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>具体案例</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>已开发插件源码示例</p>            </div>]]></content>
    
    
    <summary type="html">手把手教导你如何开发一款npm插件，在授人以渔的道路上越走越远</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="🌌糖果屋の一千零一夜" scheme="https://akilar.top/tags/%F0%9F%8C%8C%E7%B3%96%E6%9E%9C%E5%B1%8B%E3%81%AE%E4%B8%80%E5%8D%83%E9%9B%B6%E4%B8%80%E5%A4%9C/"/>
    
    <category term="🔩NPM插件开发" scheme="https://akilar.top/tags/%F0%9F%94%A9NPM%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>工信部举报腾讯的正确姿势</title>
    <link href="https://akilar.top/posts/b5324e2c/"/>
    <id>https://akilar.top/posts/b5324e2c/</id>
    <published>2021-05-27T08:47:05.000Z</published>
    <updated>2021-05-27T08:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><details cyan><summary> 事情的起因 </summary>              <div class='content'>              <p>事情的起因还要从4月27日说起，当时恰好我的博客满10w访问量和2w访客，可谓双喜临门，然后在大学同学问及域名的时候顺手在QQ空间评论区敲出了带协议的完整域名。紧接着，QQ空间秒吞了我的评论。当天晚上，我的域名就被腾讯拦截了。<br>  <img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/c2982d63.png" alt=""><br>当时也并未如何在意，毕竟在我之前，被误封站点的博主，我多少还是有见过一些的。之后借助腾讯提供的申诉渠道：<a href="https://urlsec.qq.com/check.html">腾讯安全-网址安全中心</a>进行申诉，效率还算快，当天申诉，隔天就能正常访问了。</p><p>原本这件事情应该就这么揭过了，出于一贯的贴心考量，我还顺手发了一条公告，告诉群友不要重蹈我的覆辙。但我当时还没有意识到问题的严重性。<br>  <img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/a8c59fa5.png" alt=""><br>一直到5月12日，腾讯的骚操作让我着实大吃一惊。包括我在内，几乎所有在群内曝光过域名的博主的站点域名都被拦截。一问之下才知道，其中一部分人甚至已经在申诉通过后又被拦截，和腾讯反复拉锯多达5次。<br>抱怨腾讯吃相难看之余，我的站点也开始遇到同样的问题，在第二次被拦截，申诉，申诉通过之后，当天晚上又被拦截。这时候我也总算是意识到确实是有某个人或者某一群人带着恶意在幕后操作了。</p><div class="note info flat"><p>通过腾讯提供的站长申诉渠道，我了解到我的站点被安上莫须有罪名的页面恰好是访问量最高的主页和美化日记文章帖。既然如此，就有理由怀疑是有人恶意举报了。<br>没事。冤有头债有主，既然找不到搞小动作的喽啰，我就直接到工信部找腾讯的麻烦。</p></div>              </div>            </details><h1 id="投诉渠道"><a href="#投诉渠道" class="headerlink" title="投诉渠道"></a>投诉渠道</h1><p>工信部提供的投诉渠道：<br><div class="tag link"><a class="link-card" title="互联网信息服务投诉平台" href="https://ts.isc.org.cn/#/complaint/info?type=1"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">互联网信息服务投诉平台</p><p class="url">https://ts.isc.org.cn/#/complaint/info?type=1</p></div></a></div></p><h1 id="问题梳理"><a href="#问题梳理" class="headerlink" title="问题梳理"></a>问题梳理</h1><p>这里就需要列举一下腾讯这波骚操作都恶心在哪里了。</p><ol><li>借助腾讯对国内即时通讯软件的垄断，使用腾讯QQ、微信等软件内置的浏览器，强行拦截站点域名。</li><li>无视国家法律法规，擅自使用自己的一套规则，恶意拦截屏蔽已经在ICP备案的站点（ICP备案由工信部主管）。</li><li>在申诉通过，确定站点无问题可以放行之后，立刻又重新拦截。反复无常，戏弄用户。这点也是最恶心人的。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/bdb2ca5c.png" alt=""></li><li>在申诉通道，除了申诉服务以外，还有一个品牌经营管家，借此推广腾讯的品牌保护服务。价格更是高的令人咋舌。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/4bb6d597.png" alt=""><h1 id="举报流程"><a href="#举报流程" class="headerlink" title="举报流程"></a>举报流程</h1></li><li>进入<a href="https://ts.isc.org.cn/">互联网信息服务投诉平台</a>,选择<kbd>我要投诉</kbd>，拉到最下，勾选<kbd>我已阅读投诉须知并同意隐私政策</kbd>，待倒计时结束后点击最下方的<kbd>我要投诉</kbd><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/24fa4919.png" alt=""></li><li>选择互联网企业投诉。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/49241c78.png" alt=""></li><li>在<kbd>搜索投诉企业</kbd>中搜索<strong>腾讯</strong>，之后填写个人信息，注意要填真实信息，验证通过后进入<kbd>填写投诉内容</kbd>页面。<div class="note primary flat"><p>抱着调侃的心态补充一下，要是担心所谓的南山必胜客的话，大可不必，若是你向国家投诉，而被投诉方却来找你麻烦，我想国内各大新闻媒体都会很乐意采访报导一下此事的。至少博主觉得，把自己的价值和国家公信力以及腾讯的品牌放在一起比较一下，应该还不至于为此被找麻烦。</p></div></li><li><kbd>投诉企业</kbd>默认为<strong>腾讯</strong>，<kbd>一级问题</kbd>选择<kbd>企业投诉机制</kbd>，<kbd>二级问题</kbd>选择<kbd>投诉电话、渠道</kbd>，<kbd>三级问题</kbd>选择<kbd>投诉渠道不畅</kbd>，<kbd>投诉业务</kbd>选择<kbd>不良举报</kbd>，<kbd>企业服务账号</kbd>为涉及账号，原本应该是QQ被封就填写QQ号，微信被封就填写微信号，但是此时我们是被拦截了站点域名，而此处的<kbd>企业服务账号</kbd>必须是能被联系到的账号，无奈，只能填写QQ号了。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/0feb4543.png" alt=""></li><li><kbd>投诉标题</kbd>必须精炼简洁，一句话概况，填写<code>举报腾讯使用内置浏览器恶意拦截站点域名并借机推广品牌保护收费服务</code>，言简意赅。</li><li><kbd>问题详情</kbd>则是详细论述腾讯的恶心操作。注意正确反映问题，用语文明。以下提供本人编写的案例：<div class="note success no-icon flat"><p>在2021年XX月XX日至今，腾讯QQ在毫无依据的情况下对我的站点（<code>https://你的站点域名</code>）进行了拦截。 之后我借由腾讯方提供的申诉通道（<code>https://urlsec.qq.com/complain.html</code>）申请恢复访问了XX次。 在腾讯方判定我的网页没有问题，可以解封，且我未对网站内容做任何更改的情况下，立刻又一次拦截我的站点。<br>而通过腾讯提供的网站安全检测（<code>https://urlsec.qq.com/check.html</code>），却反馈说在我的站点未检测到任何风险。 腾讯这种在软件内强制使用腾讯方内置浏览器，使用腾讯方自己的规则，无视国家相关法律法规，单方面毫无理由，毫无根据，肆无忌惮的拦截屏蔽他人的站点域名，且通过反复要求用户申请恢复访问之后又重新拦截的行为，一次又一次的戏弄用户。已经严重触犯了用户的正常权益。<br>腾讯还同时推出品牌保护服务，以收费（最低5400元/年）要求来保证域名不会被拦截屏蔽。这种行为已经完全可以定义为勒索。是借助腾讯对国内即时聊天软件的垄断，强制敛财。<br>强烈要求贵部对腾讯实施警告制裁，要求其停止在腾讯QQ等软件中强制使用内置浏览器，同时无理由拦截用户站点域名，借此强制推广品牌保护等收费服务的勒索行为。</p></div></li><li>同时附上附件作为论据，贴合上述投诉详情。<details red><summary> 附件 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/e2242038.png" alt="检测无风险"><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/bdb2ca5c.png" alt="提示已解封"><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/c2982d63.png" alt="立刻又封禁"><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/4bb6d597.png" alt="收费服务"></p>              </div>            </details><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1>很显然，有人会说，这样有什么用？国家和腾讯穿一条裤子的，估计最后还是不了了之。<br>抛开对国家的不信任这顶大帽子。姑且顺着这个思路走下去。<br>如果不发声，任由事态发展，难道就能改变什么吗？是指望腾讯良心发现，还是指望国家力量神兵天降，亦或者是市场调控不可见手？<br>醒醒吧。不作为，不会改变什么。<div class="tabs" id="马丁"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#马丁-1">English</button></li><li class="tab"><button type="button" data-href="#马丁-2">中文</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="马丁-1"><blockquote><p>In Germany, they first came for the Communists, and I didn’t speak up because I wasn’t a Communist.<br>Then they came for the Jews,<br>and I didn’t speak up because I wasn’t a Jew.<br>Then they came for the trade unionists,<br>and I didn’t speak up because I wasn’t a trade unionist.<br>Then they came for the Catholics,<br>and I didn’t speak up because I was a Protestant.<br>Then they came for me，<br>but by that time， there was no one left to speak up.</p><footer><strong>Martin Niemoller</strong><cite>1945</cite></footer></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="马丁-2"><blockquote><p>在德国，<br>起初他们追杀Communist主义者，我没有说话———因为我不是Communist主义者；<br>接着他们追杀犹太人，我没有说话———因为我不是犹太人；<br>后来他们追杀工会成员，我没有说话———因为我不是工会成员；<br>此后他们追杀天主教徒，我没有说话———因为我是新教教徒；<br>最后他们奔我而来，却再也没有人站出来为我说话了。</p><footer><strong>马丁·尼莫尔</strong><cite>1945</cite></footer></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ol>]]></content>
    
    
    <summary type="html">关于我一而再再而三被腾讯恶意拦截以至于怒而到工信部举报腾讯这件事。</summary>
    
    
    
    <category term="🍬Akilarの泡泡糖" scheme="https://akilar.top/categories/%F0%9F%8D%ACAkilar%E3%81%AE%E6%B3%A1%E6%B3%A1%E7%B3%96/"/>
    
    
    <category term="💥负能量" scheme="https://akilar.top/tags/%F0%9F%92%A5%E8%B4%9F%E8%83%BD%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>糖果屋の一千零一夜</title>
    <link href="https://akilar.top/posts/5844b41a/"/>
    <id>https://akilar.top/posts/5844b41a/</id>
    <published>2021-05-11T13:41:56.000Z</published>
    <updated>2021-05-11T13:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<details cyan><summary> 更新记录 </summary>              <div class='content'>              <div class="timeline"><p class='p h2'>博客编写方案</p><div class="timenode"><div class="meta"><p><p>2021-05-11:归纳部分不算在美化和优化日记内的教程帖</p></p></div><div class="body"><ol><li>新增Atom插件安装和推荐</li><li>新增hexo-editor配置</li><li>新增利用Atom实现平滑升级主题</li><li>新增利用python脚本动态更新hosts实现访问github</li><li>新增外挂标签简单写法丰富文章标签内容</li><li>新增npm图床使用方案，提供舒适传图体验</li></ol></div></div></div>              </div>            </details><h1 id="编辑器安装和配置"><a href="#编辑器安装和配置" class="headerlink" title="编辑器安装和配置"></a>编辑器安装和配置</h1><p>挑选一款合适的编辑器，能够在写作过程中提供更加舒适的体验。</p><p>对本站教程已经很熟悉的读者可以使用<code>Atom</code>，因为之后的很多操作都是基于这款编辑器的。理论上<code>Atom</code>能做到的<code>VScode</code>也能做到，这个就看各自的插件市场趋同性如何了。</p><p>初学者可以先使用<code>Hexo-editor</code>，这款编辑器虽然很久没更新了，但是胜在为<code>Hexo</code>量身打造，而且快捷键丰富，适合还不熟悉<code>Markdown</code>语法的萌新。如果要想长久的写博客，并且打算深入学习的话，这款新手编辑器已经无法满足需求了。权且可以当做练习markdown语法的过度产品。<br><div class="tabs" id="编辑器"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#编辑器-1">Atom（玩法更丰富）</button></li><li class="tab"><button type="button" data-href="#编辑器-2">Hexo-editor（初学者推荐）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="编辑器-1"><div class="note primary flat"><p><a href="/posts/498e6e74/">Atom插件安装和推荐</a></p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="编辑器-2"><div class="note primary flat"><p><a href="/posts/1da4f99e/">Hexo-editor——Hexo专用的编辑器</a></p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h1 id="平滑升级魔改后的Hexo主题"><a href="#平滑升级魔改后的Hexo主题" class="headerlink" title="平滑升级魔改后的Hexo主题"></a>平滑升级魔改后的Hexo主题</h1><p>前置教程为<code>Atom插件安装和推荐</code><br><div class="note primary flat"><p><a href="/posts/bbf68ad4/">平滑升级魔改后的Hexo主题</a></p></div></p><h1 id="github-faster"><a href="#github-faster" class="headerlink" title="github faster"></a>github faster</h1><p>使用<code>python</code>爬虫脚本快速更新本地<code>hosts</code>映射，实现访问<code>github</code>。有效解决<code>github</code>的<code>dns</code>污染问题。<br><div class="note primary flat"><p><a href="/posts/61b3e163/">访问github或部署在gitpage上的网站过慢的解决方案</a></p></div></p><h1 id="DIY外挂标签的简单写法与应用"><a href="#DIY外挂标签的简单写法与应用" class="headerlink" title="DIY外挂标签的简单写法与应用"></a>DIY外挂标签的简单写法与应用</h1><p>这篇教程的主要目的是给博客编写增加更多趣味，把一些好看的标签写成外挂标签来使用。<br><div class="note primary flat"><p><a href="/posts/e2bf861f/">DIY外挂标签的简单写法与应用</a></p></div></p><h1 id="npm图床的使用技巧"><a href="#npm图床的使用技巧" class="headerlink" title="npm图床的使用技巧"></a>npm图床的使用技巧</h1><p>现在最常见的应该就是<code>github+jsdelivr</code>图床，但是<code>jsdelivr</code>对<code>github</code>的50MB包大小上限设置非常恼人，还要提心吊胆的提防不知道啥时候会到来的封号审查。与之相比，<code>npm</code>图床不仅国内镜像节点多，而且没有大小上限限制。而且与<code>github</code>图床的方案可以并存。<br><div class="note primary flat"><p><a href="/posts/3e956346/">npm图床的使用技巧</a></p></div></p><h1 id="大神博客"><a href="#大神博客" class="headerlink" title="大神博客"></a>大神博客</h1><div class="site-card-group"><a class="site-card" href="https://zfe.one"><div class="img"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/zfe.one.jpg"/></div><div class="info"><img src="https://zfe.space/images/headimage.png"/><span class="title">小冰博客</span><span class="desc">做个有梦想的人！</span></div></a><a class="site-card" href="https://www.antmoe.com/"><div class="img"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/www.antmoe.com.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/avatar.jpg"/><span class="title">Dreamy.TZK</span><span class="desc">小康博客，Butterfly优雅魔改</span></div></a><a class="site-card" href="https://blog.hclonely.com/"><div class="img"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@v1.2/blog.hclonely.com.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/HCLonely/blog.hclonely.com@latest/img/avatar.jpg"/><span class="title">HCLonely</span><span class="desc">丰富的第三方插件魔改</span></div></a><a class="site-card" href="https://blog.zykjofficial.top/"><div class="img"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/blog.zykjofficial.top.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjofficial.github.io@master/img/avatar.png"/><span class="title">卓越科技</span><span class="desc">Remarkable life,for science and technology.</span></div></a><a class="site-card" href="/link/"><div class="img"><img src=""/></div><div class="info"><span class="title">虚位以待</span><span class="desc">糖果屋友人帐诚邀投稿</span></div></a></div>]]></content>
    
    
    <summary type="html">总结本人的博客实用技巧，包括编辑器配置，图床使用方案，github host脚本，主提升级方案等。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
  </entry>
  
  <entry>
    <title>npm图床的使用技巧</title>
    <link href="https://akilar.top/posts/3e956346/"/>
    <id>https://akilar.top/posts/3e956346/</id>
    <published>2021-05-11T10:33:02.000Z</published>
    <updated>2021-06-15T17:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<details cyan><summary> 点击查看更新记录 </summary>              <div class='content'>              <div class="timeline"><p class='p h2'>更新记录</p><div class="timenode"><div class="meta"><p><p>2021-05-11:基本使用步骤</p></p></div><div class="body"><ol><li>picgo+jsDelivr+github的基本使用方案</li><li>配合npm使用，得以享受npm的繁多国内镜像</li><li>新增github action，持续自动化发布package</li><li>一些个人习惯总结。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-06-10:picx配置方案更新</p></p></div><div class="body"><ol><li>感谢<a href="https://blog.cyfan.top/">@CYF</a>反馈，新增一行指令。</li><li><code>npm version patch</code>更新末尾指令号。</li><li>更新picx的自定义域名方案</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-06-15:picx配置方案更新</p></p></div><div class="body"><ol><li>新增邮箱验证图文说明</li><li>新增镜像节点提示</li></ol></div></div></div>              </div>            </details><details yellow><summary> 点击查看参考教程 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参考方向</th><th style="text-align:left">教程原贴</th></tr></thead><tbody><tr><td style="text-align:left">烂大街的Picgo使用教程</td><td style="text-align:left"><a href="https://www.itrhx.com/2019/08/01/A27-image-hosting/">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</a></td></tr><tr><td style="text-align:left">一些关于jsDelivr的使用注意事项</td><td style="text-align:left"><a href="https://www.antmoe.com/posts/e33d1c55/index.html">小康—优雅使用 JsDeliver 加速文件</a></td></tr><tr><td style="text-align:left">参考了npm图床的基本使用技巧和各种国内镜像</td><td style="text-align:left"><a href="https://blog.cyfan.top/p/eb490c73.html">CYF—图床的千层套路</a></td></tr><tr><td style="text-align:left">npm发包和常见错误排查</td><td style="text-align:left"><a href="https://blog.zhheo.com/p/e751c470.html">HEO—将项目首次发布到npm过程实录和教程</a></td></tr><tr><td style="text-align:left">github action发布npm包的基本方案</td><td style="text-align:left"><a href="https://www.antmoe.com/posts/8c0d5ccc/">小康—Github 之 Actions 自动发布 npm 包</a></td></tr><tr><td style="text-align:left">picgo的进阶项目</td><td style="text-align:left"><a href="https://blog.imzjw.cn/posts/8f9a47ec/">小嘉—介绍一个 GitHub + jsDelivr 图床神器</a></td></tr></tbody></table></div>              </div>            </details><details purple><summary> 店长的碎碎念 </summary>              <div class='content'>              <p>这篇帖子总结了大部分图床的使用方案，秉承着白嫖精神，坚决不花一分钱。因为是在目前最普罗大众的picgo方案上进行拓展，参考了chenyfan的npm图床方案，白嫖npm丰富的国内镜像节点。同时分享一些我平时写博客的习惯。希望在看完这篇以后，读者能够爱上写图文教程。</p>              </div>            </details><h1 id="Picgo或者Picx配置方案"><a href="#Picgo或者Picx配置方案" class="headerlink" title="Picgo或者Picx配置方案"></a>Picgo或者Picx配置方案</h1><p>这一步是为了实现图片上传至Github仓库。<br><div class="note warning flat"><ol><li>GitHub图床仓库大小不能超过 1G。因为GitHub原则上是反对仓库图床化的，当仓库超过 1G 后会有人工审核仓库内容，如果发现用来做图床，轻则删库重则封号。需注意。</li><li>因为jsDelivr加速的单文件大小为50M。这也就限制了单张图片大小上限。</li></ol></div><br><div class="tabs" id="图床配置"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#图床配置-1">Picgo</button></li><li class="tab"><button type="button" data-href="#图床配置-2">Picx（官网域名）</button></li><li class="tab"><button type="button" data-href="#图床配置-3">PicX（自定义域名）</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="图床配置-1"><ol><li>首先创建一个图床仓库用来存放图片，仓库名随意。以下会以<code>[AssetsRepo]</code>指代这个静态资源仓库。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/c3fffaba.png" alt=""></li><li>访问<a href="https://github.com/settings/tokens">Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens</a>-&gt;<kbd>generate new token</kbd>,创建的<code>Token</code>名称随意，但必须勾选<code>repo</code>项。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/PISlRDgrsBXzcLK.png" alt=""><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/yF8cNUkmAJVBSuw.png" alt=""><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200923085908748.png" alt=""><div class="note warning flat"><p><code>token</code>只会显示这一次，之后将无法查看，所以务必保证你已经记录下了<code>Token</code>。之后如果忘记了就只能重新生成重新配置了。</p></div></li><li>下载Picgo软件，可以直接访问Picgo的github仓库，在<a href="https://github.com/Molunerfinn/picgo/releases">release</a>中下载最新版本的安装包。<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Molunerfinn/picgo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Molunerfinn&repo=picgo&show_owner=true"/></a></li><li>打开Picgo，找到图床设置，选择<code>Github图床</code>，根据指示填写对应内容。<ul><li>设定仓库名：[UserName]/[AssetsRepo]</li><li>设定分支名：2020年10月后github新建仓库默认分支改为<code>main</code>,在这之前的是<code>master</code>。</li><li>设定Token：填入第二步时申请到的<code>Token</code></li><li>指定存储路径：这是存放图片的路径，这里可以直接写<code>/</code>表示存放在根目录。</li><li>设定自定义域名：在图片上传后，PicGo会按照<code>自定义域名+指定储存路径+上传的图片名</code>的方式生成访问链接，并放到粘贴板上，例如要使用<code>jsDelivr</code>加速，则设置为<code>https://cdn.jsdelivr.net/gh/[UserName]/[AssetsRepo]</code>，上传完毕后，我们就可以通过<code>https://cdn.jsdelivr.net/gh/[UserName]/[AssetsRepo]/指定存储路径/图片名</code>加速访问我们的图片了。</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图床配置-2"><ol><li>首先创建一个图床仓库用来存放图片，仓库名随意。以下会以<code>[AssetsRepo]</code>指代这个静态资源仓库。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/c3fffaba.png" alt=""></li><li>访问<a href="https://github.com/settings/tokens">Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens</a>-&gt;<kbd>generate new token</kbd>,创建的<code>Token</code>名称随意，但必须勾选<code>repo</code>项。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/PISlRDgrsBXzcLK.png" alt=""><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/yF8cNUkmAJVBSuw.png" alt=""><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200923085908748.png" alt=""><div class="note warning flat"><p><code>token</code>只会显示这一次，之后将无法查看，所以务必保证你已经记录下了<code>Token</code>。之后如果忘记了就只能重新生成重新配置了。</p></div></li><li><a href="https://picx.xpoet.cn/">PicX官网</a>就已经提供了构建好的项目，可以通过直接在官方提供的网站填入<code>Token</code>来使用。<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/XPoet/picx"><img src="https://github-readme-stats.vercel.app/api/pin/?username=XPoet&repo=picx&show_owner=true"/></a></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图床配置-3"><ol><li>若是不满足于官方的网站，想要个性化一点，也可以尝试配置属于自己的<code>PicX</code>。</li><li>首先将<code>Pixc</code>项目<code>fork</code>到自己的<code>github</code>,然后在自己的仓库中依次选择<kbd>Settings</kbd>-&gt;<kbd>Branches</kbd>-&gt;<kbd>Default Branch</kbd>，将<code>gh-pages</code>设置为默认分支。<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/XPoet/picx"><img src="https://github-readme-stats.vercel.app/api/pin/?username=XPoet&repo=picx&show_owner=true"/></a><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/83b562b1.png" alt=""></li><li>打开<code>github</code>的账号设置，依次选择，<a href="https://github.com/settings/tokens">头像-&gt;Settings-&gt;Developer settings-&gt;Personal access tokens</a>,点击<kbd>Generate new token</kbd>生成一个新的<code>token</code>，创建的<code>Token</code>名称随意，但需要勾选<code>repo</code>和<code>workflow</code>选项，留作备用。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/02db32ed.png" alt=""><div class="note warning flat"><p><code>token</code>只会显示这一次，之后将无法查看，所以务必保证你已经记录下了<code>Token</code>。之后如果忘记了就只能重新生成重新配置了。</p></div></li><li>回到<code>picx</code>，设置三个变量，这几个变量将作用于<code>github action</code>的推送部署。<ul><li>GH_PAGES_DEPLOY：上一步申请的Token的值。</li><li>MY_USER_EMAIL：github绑定的邮箱</li><li>MY_USER_NAME：github用户名<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/aae9f2e9.png" alt=""></li></ul></li><li>打开<a href="https://vercel.com/">Vercel</a>,注册完成后选择<code>New Project</code>，在<code>import git repository</code>中找到<code>picx</code>项目。点击<code>import</code>。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/51c38f74.png" alt=""><br>在这一过程中留意你引入的是不是<code>gh-pages</code>，若不是，重做本节第二步。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/3a4d3a01.png" alt=""><br>之后可以一路点选默认。<br>看到这一界面即部署成功。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/09724c46.png" alt=""></li><li>之后的配置自定义域名同其他任意二级项目。你可以对<code>picx</code>做更改，推送更新后会触发<code>github action</code>重新打包<code>vue</code>项目，并推送到<code>gh-pages</code>分支，然后触发<code>vercel</code>部署生成新的页面。</li><li>后续配置同隔壁的官网域名方案。<div class="note primary flat"><p>提示: 第三步申请的token可以复用。没必要再重复申请。</p></div></li><li>关于<code>Vercel</code>配置的更多内容可以参考站内教程<a href="/posts/8250e594/">二级域名的活用方法</a></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h1 id="npm图床的使用"><a href="#npm图床的使用" class="headerlink" title="npm图床的使用"></a>npm图床的使用</h1><details green><summary> 点击查看npm图床的使用 </summary>              <div class='content'>              <ol><li>首先需要注册一个npm的账号。访问<a href="https://www.npmjs.com/signup/">npm注册页面</a><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/a935a0d4.png" alt=""></li><li>完成邮箱验证，注册完成后进入账号管理界面:<kbd>头像</kbd>-&gt;<kbd>Account</kbd>，拉倒最上方，你会看到<code>You have not verified your email address</code>字样的提示，点击以后按提示步骤验证你的邮箱。<br><img src="/assets/85e92b51.png" alt=""></li><li>找到我们之前创建的图床仓库，在本地合适的位置把它<code>clone</code>下来。找个空文件夹打开终端输入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:[username]/[AssetsRepo].git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[username]/[AssetsRepo].git</span><br></pre></td></tr></table></figure></li><li>在clone下来的[AssetsRepo]文件夹内打开终端，输入以下指令切换回原生源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure></li><li>添加本地npm用户设置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure></li><li>运行npm初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在<a href="https://www.npmjs.com/">npm官网</a>搜索相应包名，搜不到就说明还没被占用。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/6000c029.png" alt=""><br>最后会输出一段package.json，请求确认，输入yes即可。</li><li>然后输入发布指令，我们就可以把包发布到npm上了。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></li><li>jsdelivr+npm的图片引用和jsdelivr+github很相似，例如我在<code>[AssetsRepo]</code>仓库里存放的<code>/img/index.png</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jsDelivr+github链接</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/[GithubUserName]/[AssetsRepo]/img/index.png</span><br><span class="line"><span class="comment"># jsDelivr+npm链接</span></span><br><span class="line">https://cdn.jsdelivr.net/npm/[NpmPackageName]/img/index.png</span><br></pre></td></tr></table></figure><div class="note success flat"><p>可以看到Npm只需要提供包名即可。这也是一开始要求包名不重复的原因之一</p></div><div class="note info flat"><p>jsDelivr+Npm依然有100MB的包大小限制，但是NPM有丰富的国内节点。可以挑选一个使用。个人推荐知乎的。没有大小限制，而且也很稳定。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】</span><br><span class="line">https://cdn.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">【知乎出品，网宿国内节点】</span><br><span class="line">https://unpkg.zhimg.com/:package@:version/:file</span><br><span class="line">【百度出品，网宿国内节点】</span><br><span class="line">https://code.bdstatic.com/npm/:package@:version/:file</span><br><span class="line">【饿了么出品，网宿国内节点】</span><br><span class="line">https://shadow.elemecdn.com/npm/:package@:version/:file</span><br></pre></td></tr></table></figure><br>当然你也可以利用<a href="https://unpkg.com/">unpkg</a>自建。(UNPKG是一个内容源自npm的全球快速CDN。它部署在cloudflare上，在大陆地区访问到的是香港节点。所以速度也不错。)<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure></p></div></li><li>如果每次都要在本地进行<code>npm publish</code>的话，npm的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给github action来完成。<ul><li>在<a href="https://www.npmjs.com/">npm官网</a>-&gt;<kbd>头像</kbd>-&gt;<kbd>Access Tokens</kbd>-&gt;<kbd>Generate New Token</kbd>,勾选<kbd>Automation</kbd>选项，<code>Token</code>只会显示这一次，之后如果忘记了就只能重新生成重新配置了。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/0e884db2.png" alt=""><br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/0158bc90.png" alt=""></li><li>在github的[AssetsRepo]仓库设置项里添加一个名为<code>NPM_TOKEN</code>的<code>secrets</code>，把获取的Npm的Access token输入进去。<br><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/c6dbbfb5.png" alt=""></li><li>在本地的<code>[AssetsRepo]</code>文件夹下新建<code>[AssetsRepo]/.github/workflows/autopublish.yml</code>,<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">Package</span></span><br><span class="line"><span class="comment"># 监测图床分支，2020年10月后github新建仓库默认分支改为main，记得更改</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li>在本地的<code>[AssetsRepo]</code>文件夹下打开终端，运行以下指令，上传新增内容至github，即可触发部署。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;npm publish&quot;</span></span><br><span class="line"><span class="comment"># 更新package版本号</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="comment"># 推送至github触发action</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>此处的四行指令顺序严格。<br>每次更新npm图床都需要先修改<code>[AssetsRepo]\package.json</code>里的<code>version</code>,也就是版本号。<br>而<code>npm version patch</code>即为更新package.json里的版本号的指令，效果是末尾版本号+1，例如<code>0.0.1=&gt;0.0.2</code>、<code>1.1.3=&gt;1.1.4</code>。免去了打开<code>package.json</code>再修改版本号的麻烦。（大版本更新还是需要手动改的）<br>更新npm图床务必要记得更新<code>package.json</code>里的版本号！</p></div></li></ul></li></ol>              </div>            </details><h1 id="配合编辑器的使用流程"><a href="#配合编辑器的使用流程" class="headerlink" title="配合编辑器的使用流程"></a>配合编辑器的使用流程</h1><details blue><summary> 点击查看配合Atom使用 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/fVwSyU7abiN1zW6.jpg" alt="施工中。。。。。。不妨跟着参考教程自己探索呀"></p>              </div>            </details><h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h1><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>参考内容罗列</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>编写picgo的使用图文教程</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>编写picx的使用图文教程</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>编写npm图床的使用图文教程</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Atom相应插件及使用技巧</p>            </div>]]></content>
    
    
    <summary type="html">picgo+jsDelivr+github的进阶教程，在这一基础上增加npm图床的活用方式，使用github action实现自动发布。</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="🌌糖果屋の一千零一夜" scheme="https://akilar.top/tags/%F0%9F%8C%8C%E7%B3%96%E6%9E%9C%E5%B1%8B%E3%81%AE%E4%B8%80%E5%8D%83%E9%9B%B6%E4%B8%80%E5%A4%9C/"/>
    
    <category term="🗺️图床" scheme="https://akilar.top/tags/%F0%9F%97%BA%EF%B8%8F%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Friend link subscription</title>
    <link href="https://akilar.top/posts/8480b91c/"/>
    <id>https://akilar.top/posts/8480b91c/</id>
    <published>2021-04-29T23:28:21.000Z</published>
    <updated>2021-04-29T00:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<details cyan><summary> 点击查看更新记录 </summary>              <div class='content'>              <div class="timeline"><p class='p h2'>更新记录</p><div class="timenode"><div class="meta"><p><p>2021-02-12:内测版v0.1</p></p></div><div class="body"><ol><li>应援冰老师的友链朋友圈项目，提供Hexo的插件化魔改方案；</li><li>按照惯有思路，将API路径的配置添加到配置文件中。</li><li>在页面配置中使用<code>type: fcircle</code>来实现加载友链朋友圈页面。</li><li>适配样式UI，使得友链朋友圈文章样式同时间轴样式。</li><li>适配pjax。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-04-29:新增npm插件</p></p></div><div class="body"><ol><li>适配冰老师最新的前端方案。</li><li>使用npm插件加载。</li><li>新增配置项，均为可选。</li><li>预留开发者接口，后续可能适配多主题样式。</li></ol></div></div></div>              </div>            </details><details yellow><summary> 点击查看参考教程 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参考方向</th><th style="text-align:left">教程原贴</th></tr></thead><tbody><tr><td style="text-align:left">冰老师的友链朋友圈项目</td><td style="text-align:left"><a href="https://zfe.space/post/friend-link-circle.html">基于hexo的友链朋友圈 Beta1.0</a></td></tr><tr><td style="text-align:left">冰老师编写的前端项目</td><td style="text-align:left"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Zfour/Butterfly-friend-poor-html"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Zfour&repo=Butterfly-friend-poor-html&show_owner=true"/></a></td></tr></tbody></table></div>              </div>            </details><h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><div class="tip cogs faa-horizontal animated"><p>本帖为对冰老师的友链朋友圈项目的前端配置方案进行主题插件化适配的应援帖，并不包括关键的后端配置内容。后端配置请参看冰老师的原帖<a href="https://zfe.space/post/friend-link-circle.html">基于hexo的友链朋友圈 Beta1.0</a>，本帖的内容对应原帖的<code>步骤四：配置 HEXO 页面</code>。考虑到冰老师的源项目也仍旧处于开发状态，故本帖也会尽可能的紧跟进度实时更新。</p></div><h1 id="npm插件方案"><a href="#npm插件方案" class="headerlink" title="npm插件方案"></a>npm插件方案</h1><details red><summary> 新版npm插件方案 </summary>              <div class='content'>              <ol><li>安装插件，在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-fcircle --save</span><br></pre></td></tr></table></figure></li><li>添加配置信息<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fcircle</span></span><br><span class="line"><span class="comment"># see https://zfe.space/friendcircle/</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8480b91c/</span></span><br><span class="line"><span class="attr">fcircle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制开关</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">https://hexo-circle-of-friends-api.vercel.app/api</span> <span class="comment">#api地址</span></span><br><span class="line">  <span class="attr">maxnumber:</span> <span class="number">20</span> <span class="comment">#【可选】页面展示文章数量</span></span><br><span class="line">  <span class="attr">addnumber:</span> <span class="number">10</span> <span class="comment">#【可选】每次加载增加的篇数</span></span><br><span class="line">  <span class="attr">opentype:</span> <span class="string">&#x27;_blank&#x27;</span> <span class="comment">#【可选】&#x27;_blank&#x27;打开新标签,&#x27;_self&#x27;本窗口打开,默认为&#x27;_blank&#x27;</span></span><br><span class="line">  <span class="attr">nofollow:</span> <span class="literal">true</span> <span class="comment">#【可选】开启禁止搜索引擎抓取,默认开启</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="comment">#【可选】加载动画图片链接</span></span><br><span class="line">  <span class="attr">css:</span> <span class="comment">#【可选】开发者接口，自定义css链接</span></span><br><span class="line">  <span class="attr">js:</span> <span class="comment">#【可选】开发者接口，自定义js链接</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】fcircle的路径名称。默认为 fcircle，生成的页面为 fcircle/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】fcircle页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朋友圈</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>参数释义</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left"><kbd>true</kbd>/<kbd>false</kbd></td><td style="text-align:left">控制开关</td></tr><tr><td style="text-align:left">apiurl</td><td style="text-align:left"><kbd>URL</kbd></td><td style="text-align:left">api链接，配置教程参看<a href="https://zfe.space/friendcircle/">基于 hexo 的友链朋友圈</a></td></tr><tr><td style="text-align:left">maxnumber</td><td style="text-align:left"><kbd>number</kbd></td><td style="text-align:left">【可选】填写阿拉伯数字，页面展示文章数量，默认20</td></tr><tr><td style="text-align:left">addnumber</td><td style="text-align:left"><kbd>number</kbd></td><td style="text-align:left">【可选】填写阿拉伯数字，每次加载增加的篇数，默认10</td></tr><tr><td style="text-align:left">opentype</td><td style="text-align:left"><kbd>_blank</kbd><kbd>_self</kbd></td><td style="text-align:left">【可选】’_blank’新标签打开,’_self’本窗口打开,默认为’_blank’</td></tr><tr><td style="text-align:left">nofollow</td><td style="text-align:left"><kbd>true</kbd>/<kbd>false</kbd></td><td style="text-align:left">【可选】开启禁止搜索引擎抓取,默认开启</td></tr><tr><td style="text-align:left">preload</td><td style="text-align:left"><kbd>URL</kbd></td><td style="text-align:left">【可选】加载动画图片链接</td></tr><tr><td style="text-align:left">css</td><td style="text-align:left"><kbd>URL</kbd></td><td style="text-align:left">【可选】开发者接口，自定义css链接</td></tr><tr><td style="text-align:left">js</td><td style="text-align:left"><kbd>URL</kbd></td><td style="text-align:left">【可选】开发者接口，自定义js链接</td></tr><tr><td style="text-align:left">path</td><td style="text-align:left"><kbd>string</kbd></td><td style="text-align:left">【可选】字符串，fcircle的路径名称。默认为 fcircle，生成的页面为 fcircle/index.html</td></tr><tr><td style="text-align:left">front_matter</td><td style="text-align:left"><kbd>object</kbd></td><td style="text-align:left">【可选】写法见上文示例，fcircle页面的 front_matter 配置</td></tr></tbody></table></div>              </div>            </details><h1 id="魔改源码方案"><a href="#魔改源码方案" class="headerlink" title="魔改源码方案"></a>魔改源码方案</h1><details cyan><summary> 旧版修改源码方案 </summary>              <div class='content'>              <h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><div class="tip cogs faa-horizontal animated"><p><strong>由于本教程涉及的所有修改对缩进格式等有严格要求，担心自己控制不好的可以直接下载静态资源。参照教程进行修改。</strong></p></div><div class="btns rounded center">            <a class="button" href='https://wwe.lanzoui.com/iCIS2ln7hpi' title='下载资源文件'><i class='fas fa-download'></i>下载资源文件</a>          </div><div class="note info flat"><div class="hide-block"><button type="button" class="hide-button button--animated" style="">预览效果    </button><div class="hide-content"><p><img src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/Friend-link-subscription-dfbba739.png" alt=""></p></div></div></div><h2 id="魔改步骤"><a href="#魔改步骤" class="headerlink" title="魔改步骤"></a>魔改步骤</h2><details purple open><summary> 点击查看魔改正文 </summary>              <div class='content'>              <ol><li>新建<code>[Blogroot]\themes\butterfly\layout\includes\page\fcircle.pug</code>;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#article-container</span></span><br><span class="line">  <span class="keyword">if</span> top_img === false</span><br><span class="line">    h1.page-title= page.title</span><br><span class="line">  <span class="keyword">if</span> theme.fcircle.enable</span><br><span class="line">    <span class="comment">#friend_link_circle</span></span><br><span class="line">      .article-sort-title 统计信息</span><br><span class="line">      .article-sort      </span><br><span class="line">        <span class="comment">#info_user_poor</span></span><br><span class="line">          .chart</span><br><span class="line">            span.friend_post_info_title 当前友链数:</span><br><span class="line">            span.friend_post_info_number &#123;&#123;user_lenth&#125;&#125;个</span><br><span class="line">            br</span><br><span class="line">            span.friend_post_info_title 失败数:</span><br><span class="line">            span.friend_post_info_number &#123;&#123;error&#125;&#125;个</span><br><span class="line">            br</span><br><span class="line">          .chart</span><br><span class="line">            span.friend_post_info_title 活跃友链数:</span><br><span class="line">            span.friend_post_info_number &#123;&#123;unique_live_link&#125;&#125;个</span><br><span class="line">            br</span><br><span class="line">            span.friend_post_info_title 当前库存:</span><br><span class="line">            span.friend_post_info_number &#123;&#123;listlenth&#125;&#125;篇</span><br><span class="line">            br</span><br><span class="line">          .chart</span><br><span class="line">            span.friend_post_info_title 今日更新:</span><br><span class="line">            span.friend_post_info_number &#123;&#123;today_post&#125;&#125;篇</span><br><span class="line">            br</span><br><span class="line">            span.friend_post_info_title 最近更新:</span><br><span class="line">            span.friend_post_info_number &#123;&#123;last_update_time&#125;&#125;</span><br><span class="line">      div(v-<span class="keyword">for</span>=<span class="string">&#x27;datalist in datalist_slice&#x27;</span>)</span><br><span class="line">        .article-sort-title(v-<span class="keyword">if</span>=<span class="string">&#x27;datalist[2]-maxnumber&lt;0&#x27;</span>) &#123;&#123;datalist[<span class="number">0</span>]&#125;&#125;</span><br><span class="line">        .article-sort</span><br><span class="line">          .article-sort-item(v-<span class="keyword">if</span>=<span class="string">&#x27;item[6]-maxnumber&lt;0&#x27;</span> v-<span class="keyword">for</span>=<span class="string">&#x27;(item,i) in datalist[1]&#x27;</span>)</span><br><span class="line">            a.article-sort-item-img(:target=<span class="string">&#x27;opentype&#x27;</span> :href=<span class="string">&#x27;item[2]&#x27;</span> :title=<span class="string">&#x27;item[0]&#x27;</span>)</span><br><span class="line">              img.entered.loaded(onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` data-ll-status=<span class="string">&#x27;loaded&#x27;</span> :src=<span class="string">&#x27;item[4]&#x27;</span>)</span><br><span class="line">            .article-sort-item-info</span><br><span class="line">              .article-sort-item-time</span><br><span class="line">                i.far.fa-user</span><br><span class="line">                span &#123;&#123;item[<span class="number">3</span>]&#125;&#125;</span><br><span class="line">                .friend_post_time</span><br><span class="line">                  i.far.fa-calendar-alt</span><br><span class="line">                  time.post-meta-date-created(:datetime=<span class="string">&#x27;item[1]&#x27;</span> :title=<span class="string">&#x27;item[1]&#x27;</span>) &#123;&#123;item[<span class="number">1</span>]&#125;&#125;</span><br><span class="line">              a.article-sort-item-title(:target=<span class="string">&#x27;opentype&#x27;</span> :href=<span class="string">&#x27;item[2]&#x27;</span> :title=<span class="string">&#x27;item[0]&#x27;</span>) &#123;&#123;item[<span class="number">0</span>]&#125;&#125;</span><br><span class="line">      div(style=<span class="string">&#x27;text-align: center&#x27;</span>)</span><br><span class="line">        button.load_button(v-<span class="keyword">if</span>=<span class="string">&#x27;loadmore_display&#x27;</span> <span class="built_in">type</span>=<span class="string">&#x27;button&#x27;</span> @click=<span class="string">&#x27;addmaxnumber()&#x27;</span>) 加载更多...</span><br><span class="line">      script.</span><br><span class="line">        requests_url = <span class="string">&#x27;!&#123;url_for(theme.fcircle.apiurl)&#125;&#x27;</span></span><br><span class="line">      script(defer data-pjax src=url_for(theme.CDN.fcircle))</span><br><span class="line">  != page.content</span><br></pre></td></tr></table></figure></li><li>新建<code>[Blogroot]\themes\butterfly\source\css\_page\fcircle.styl</code>,<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hexo-config(<span class="string">&#x27;fcircle.enable&#x27;</span>)</span><br><span class="line">  <span class="selector-id">#info_user_poor</span></span><br><span class="line">    <span class="attribute">display</span> flex</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">2px</span></span><br><span class="line">  <span class="selector-class">.friend_post_info_title</span></span><br><span class="line">    <span class="attribute">font-weight</span> <span class="number">700</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.friend_post_info_number</span></span><br><span class="line">    <span class="attribute">float</span> right</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.chart</span></span><br><span class="line">    <span class="attribute">align-items</span> flex-start</span><br><span class="line">    <span class="attribute">flex</span> <span class="number">1</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">100px</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">60px</span></span><br><span class="line">    <span class="attribute">margin</span> <span class="number">20px</span> <span class="number">0px</span></span><br><span class="line">    <span class="selector-tag">span</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">120px</span></span><br><span class="line">      <span class="attribute">white-space</span> nowrap</span><br><span class="line">      <span class="attribute">overflow</span> hidden</span><br><span class="line">      <span class="attribute">text-overflow</span> ellipsis</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.article-sort-item-time</span></span><br><span class="line">    <span class="selector-tag">span</span></span><br><span class="line">      <span class="attribute">padding-left</span> <span class="number">10px</span></span><br><span class="line">      <span class="attribute">padding-right</span> <span class="number">10px</span></span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.article-sort-item-title</span></span><br><span class="line">    -webkit-line-clamp: <span class="number">1</span></span><br><span class="line">  <span class="selector-class">.load_button</span></span><br><span class="line">    -webkit-<span class="attribute">transition-duration</span> <span class="number">0.4s</span></span><br><span class="line">    <span class="attribute">transition-duration</span> <span class="number">0.4s</span></span><br><span class="line">    <span class="attribute">text-align</span> center</span><br><span class="line">    <span class="attribute">border</span> <span class="number">1px</span> solid <span class="number">#ededed</span></span><br><span class="line">    <span class="attribute">border-radius</span> .<span class="number">3em</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">background</span> transparent</span><br><span class="line">    <span class="attribute">color</span> <span class="number">#555</span></span><br><span class="line">    <span class="attribute">padding</span> .<span class="number">5em</span> <span class="number">1.25em</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">color</span> <span class="number">#3090e4</span></span><br><span class="line">      <span class="attribute">border-color</span> <span class="number">#3090e4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">500px</span>)</span><br><span class="line">    .friend_post_time</span><br><span class="line">      float right</span><br><span class="line"></span><br><span class="line">  @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>)</span><br><span class="line">    #info_user_poor</span><br><span class="line">      padding <span class="number">10px</span></span><br><span class="line">      flex-direction column</span><br><span class="line">      <span class="attribute">max-height</span> <span class="number">200px</span></span><br><span class="line">    .chart</span><br><span class="line">      flex <span class="number">0</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">160px</span></span><br><span class="line">      margin <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>新建<code>[Blogroot]\themes\butterfly\source\js\fcircle.js</code>,这是处理友链数据的脚本：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> friend_link_circle = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#friend_link_circle&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">datalist</span>: [],</span><br><span class="line">        <span class="attr">datalist_slice</span>:[],</span><br><span class="line">        <span class="attr">maxnumber</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">addnumber</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">display</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">loadmore_display</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">listlenth</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">today_post</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">last_update_time</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">user_lenth</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">error</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">unique_live_link</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">opentype</span>:<span class="string">&#x27;_blank&#x27;</span>  <span class="comment">//&#x27;_blank&#x27;打开新标签,&#x27;_self&#x27;本窗口打开</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        unique (arr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">formatDate</span>(<span class="params">strDate</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(strDate.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>)));</span><br><span class="line">                <span class="keyword">let</span> gettimeoffset = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset())&#123;</span><br><span class="line">                    gettimeoffset = <span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    gettimeoffset = <span class="number">8</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> timeoffset = gettimeoffset * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">let</span> len = date.getTime();</span><br><span class="line">                <span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(len - timeoffset);</span><br><span class="line">                <span class="keyword">let</span> sec = date2.getSeconds().toString();</span><br><span class="line">                <span class="keyword">let</span> min =  date2.getMinutes().toString();</span><br><span class="line">                <span class="keyword">if</span> (sec.length === <span class="number">1</span>) &#123;</span><br><span class="line">                    sec = <span class="string">&quot;0&quot;</span> + sec;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (min.length === <span class="number">1</span>) &#123;</span><br><span class="line">                    min = <span class="string">&quot;0&quot;</span> + min;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> date2.getFullYear().toString() + <span class="string">&quot;/&quot;</span> + (date2.getMonth() + <span class="number">1</span>).toString() + <span class="string">&quot;/&quot;</span> + date2.getDate().toString() + <span class="string">&quot; &quot;</span> + date2.getHours().toString() + <span class="string">&quot;:&quot;</span> + min + <span class="string">&quot;:&quot;</span> + sec</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">timezoon</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> time = <span class="built_in">this</span>.datalist_slice[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.formatDate(time)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">todaypost</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> date= <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">let</span> year = date.getFullYear();</span><br><span class="line">            <span class="keyword">let</span> month =(date.getMonth() + <span class="number">1</span>).toString();</span><br><span class="line">            <span class="keyword">let</span> day = (date.getDate()).toString();</span><br><span class="line">            <span class="keyword">if</span> (month.length === <span class="number">1</span>) &#123;</span><br><span class="line">                month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (day.length === <span class="number">1</span>) &#123;</span><br><span class="line">                day = <span class="string">&quot;0&quot;</span> + day;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">addmaxnumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.maxnumber = <span class="built_in">this</span>.maxnumber + <span class="built_in">this</span>.addnumber;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.maxnumber &gt;= <span class="built_in">this</span>.listlenth)&#123;</span><br><span class="line">                <span class="built_in">this</span>.loadmore_display=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">slice</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> monthlist=[];</span><br><span class="line">            <span class="keyword">let</span> datalist=[];</span><br><span class="line">            <span class="keyword">let</span> data_slice = data;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> data_slice) &#123;</span><br><span class="line">                data_slice[item].push(item);</span><br><span class="line">                <span class="keyword">if</span> (data_slice[item][<span class="number">1</span>].lenth !== <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> list = data_slice[item][<span class="number">1</span>].split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                        <span class="keyword">if</span> (list[<span class="number">1</span>].length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                            list[<span class="number">1</span>]=<span class="string">&quot;0&quot;</span> + list[<span class="number">1</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (list[<span class="number">2</span>].length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                            list[<span class="number">2</span>]=<span class="string">&quot;0&quot;</span> + list[<span class="number">2</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    data_slice[item][<span class="number">1</span>] = list.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">let</span> month=data_slice[item][<span class="number">1</span>].slice(<span class="number">0</span>,<span class="number">7</span>);</span><br><span class="line">                <span class="keyword">if</span>(monthlist.indexOf(month) !== -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(month);</span><br><span class="line">                    datalist[monthlist.length-<span class="number">1</span>][<span class="number">1</span>].push(data_slice[item]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    monthlist.push(month);</span><br><span class="line">                    datalist.push([month,[data_slice[item]]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> mounthgroup  <span class="keyword">of</span> datalist)&#123;</span><br><span class="line">                mounthgroup.push(mounthgroup[<span class="number">1</span>][<span class="number">0</span>][<span class="number">6</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(datalist);</span><br><span class="line">            <span class="keyword">return</span> datalist</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        fetch(requests_url).then(</span><br><span class="line">            <span class="function"><span class="params">data</span> =&gt;</span> data.json()</span><br><span class="line">    ).then(</span><br><span class="line">            <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> today = <span class="built_in">this</span>.todaypost();</span><br><span class="line">                <span class="keyword">let</span> Datetody = <span class="keyword">new</span> <span class="built_in">Date</span>(today);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> item = <span class="number">0</span>; item &lt;data[<span class="number">1</span>].length ;item++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> Datedate = <span class="keyword">new</span> <span class="built_in">Date</span>(data[<span class="number">1</span>][item][<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">if</span> (Datedate&gt;Datetody)&#123;</span><br><span class="line">                        data[<span class="number">1</span>].splice(item --, <span class="number">1</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;穿越了&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.datalist = data[<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">this</span>.listlenth = data[<span class="number">1</span>].length;</span><br><span class="line">                <span class="built_in">this</span>.user_lenth = data[<span class="number">0</span>].length;</span><br><span class="line">                <span class="built_in">this</span>.datalist_slice = <span class="built_in">this</span>.slice(data[<span class="number">1</span>]);</span><br><span class="line">                <span class="built_in">this</span>.last_update_time =<span class="built_in">this</span>.timezoon();</span><br><span class="line">                <span class="built_in">this</span>.loadmore_display = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">let</span> link_list=[];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> data[<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span> (item[<span class="number">1</span>] === today )&#123;</span><br><span class="line">                        <span class="built_in">this</span>.today_post +=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    link_list.push(item[<span class="number">3</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> arr = <span class="built_in">this</span>.unique(link_list);</span><br><span class="line">                <span class="built_in">this</span>.unique_live_link = arr.length;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> data[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span> (item[<span class="number">3</span>] === <span class="string">&#x27;true&#x27;</span> )&#123;</span><br><span class="line">                        <span class="built_in">this</span>.error +=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>修改<code>[Blogroot]\themes\butterfly\layout\page.pug</code>,添加朋友圈页面的选项：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">  block content</span><br><span class="line">    #page</span><br><span class="line">      case page.type</span><br><span class="line">        when &#x27;tags&#x27;</span><br><span class="line">          include includes/page/tags.pug</span><br><span class="line">        when &#x27;link&#x27;</span><br><span class="line">          include includes/page/flink.pug</span><br><span class="line">        when &#x27;categories&#x27;</span><br><span class="line">          include includes/page/categories.pug</span><br><span class="line">        when &#x27;artitalk&#x27;</span><br><span class="line">          include includes/page/artitalk.pug</span><br><span class="line"><span class="addition">+       when &#x27;fcircle&#x27;</span></span><br><span class="line"><span class="addition">+         include includes/page/fcircle.pug</span></span><br><span class="line">        default</span><br><span class="line">          include includes/page/default-page.pug</span><br><span class="line"></span><br><span class="line">      if page.comments !== false &amp;&amp; theme.comments &amp;&amp; theme.comments.use</span><br><span class="line">        - var commentsJsLoad = true</span><br><span class="line">        !=partial(&#x27;includes/third-party/comments/index&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure></li><li>修改<code>[Blogroot]\themes\butterfly\layout\includes\additional-js.pug</code>,添加<code>vue.js</code>依赖的配置项,<code>butterfly_v3.4.0+</code>移除了<code>jquery</code>，所以没有<code>script(src=url_for(theme.CDN.jquery))</code>这一行。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  div</span><br><span class="line">    script(src=url_for(theme.CDN.utils))</span><br><span class="line">    script(src=url_for(theme.CDN.main))</span><br><span class="line"><span class="addition">+   script(src=url_for(theme.CDN.vue))</span></span><br><span class="line">    if theme.translate.enable</span><br><span class="line">      script(src=url_for(theme.CDN.translate))</span><br></pre></td></tr></table></figure></li><li>修改<code>[Blogroot]\_config.butterfly.yml</code>,添加友链页面菜单栏，CDN链接和配置项：<ul><li>添加菜单栏<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    博客: / || fas fa-home</span><br><span class="line">    时间轴: /archives/ || fas fa-archive</span><br><span class="line">    标签: /tags/ || fas fa-tags</span><br><span class="line">    分类: /categories/ || fas fa-folder-open</span><br><span class="line"><span class="addition">+   朋友圈: /fcircle/ || fa fa-puzzle-piece</span></span><br><span class="line">    友人帐: /link/ || fas fa-link</span><br><span class="line">    留言板: /comments/ || fas fa-comments</span><br></pre></td></tr></table></figure></li><li>添加CDN配置项：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  CDN:</span><br><span class="line">    # main</span><br><span class="line">    main_css: /css/index.css</span><br><span class="line">    jquery: https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span><br><span class="line">    main: https://cdn.jsdelivr.net/gh/Akilarlxh/Akilarlxh.github.io@bf_3.6.2_1/js/main.js</span><br><span class="line">    utils: https://cdn.jsdelivr.net/gh/Akilarlxh/Akilarlxh.github.io@bf_3.6.2_1/js/utils.js</span><br><span class="line"><span class="addition">+   vue: https://cdn.jsdelivr.net/npm/vue@2.6.11  # vue.js依赖</span></span><br><span class="line"><span class="addition">+   fcircle: /js/fcircle.js # 友链朋友圈</span></span><br></pre></td></tr></table></figure></li><li>添加配置项：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#友链朋友圈</span></span><br><span class="line"><span class="attr">fcircle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开关友链</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">https://hexo-circle-of-friends-api.vercel.app/api</span></span><br><span class="line">  <span class="comment"># 改为冰老师原帖步骤三：配置 vercel api中获取的api链接</span></span><br></pre></td></tr></table></figure></li></ul></li><li>使用指令生成友链页面,并添加样式<ul><li>在<code>[Blogroot]</code>路径下打开终端，运行以下指令生成朋友圈页面：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page fcircle</span><br></pre></td></tr></table></figure></li><li>打开刚刚生成的朋友圈页面<code>[Blogroot]\source\fcircle\index.md</code>,添加页面类型，以引入友链朋友圈：<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  ---</span><br><span class="line">    title: Akilarの朋友圈</span><br><span class="line">    date: 2021-02-11 18:09:00</span><br><span class="line"><span class="addition">+   type: &quot;fcircle&quot;</span></span><br><span class="line">    comments: &quot;true&quot;</span><br><span class="line">  ---</span><br></pre></td></tr></table></figure></li></ul></li><li>运行<code>hexo clean</code> 和<code>hexo generate</code>以及<code>hexo server</code>三件套以后就可以看到友链预览了。</li></ol>              </div>            </details>              </div>            </details><h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h1><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>前端配置魔改</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>前端配置npm插件化</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>多主题适配</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>重写统计部分UI</p>            </div>]]></content>
    
    
    <summary type="html">应援冰老师的友链朋友圈项目，提供插件化的Butterfly主题配置</summary>
    
    
    
    <category term="🍡Akilarの糖葫芦" scheme="https://akilar.top/categories/%F0%9F%8D%A1Akilar%E3%81%AE%E7%B3%96%E8%91%AB%E8%8A%A6/"/>
    
    
    <category term="📁Hexo" scheme="https://akilar.top/tags/%F0%9F%93%81Hexo/"/>
    
    <category term="🦋Butterfly" scheme="https://akilar.top/tags/%F0%9F%A6%8BButterfly/"/>
    
    <category term="🧊Ice-🍬Candy" scheme="https://akilar.top/tags/%F0%9F%A7%8AIce-%F0%9F%8D%ACCandy/"/>
    
  </entry>
  
</feed>
